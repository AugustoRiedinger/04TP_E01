
04TP_E01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001250  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013fc  080013fc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08001404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          00000040  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000cc  200000cc  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006203  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000bd9  00000000  00000000  000262bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000718  00000000  00000000  00026e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a0  00000000  00000000  000275b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000245e  00000000  00000000  00027c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027b4  00000000  00000000  0002a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c862  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001efc  00000000  00000000  0002c8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000008c 	.word	0x2000008c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080013e4 	.word	0x080013e4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000090 	.word	0x20000090
 80001e8:	080013e4 	.word	0x080013e4

080001ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
 8000206:	e076      	b.n	80002f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000208:	2201      	movs	r2, #1
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	429a      	cmp	r2, r3
 8000222:	d165      	bne.n	80002f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	4619      	mov	r1, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	791b      	ldrb	r3, [r3, #4]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d003      	beq.n	8000262 <GPIO_Init+0x76>
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d12e      	bne.n	80002c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	b29b      	uxth	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	2301      	movs	r3, #1
 800029c:	408b      	lsls	r3, r1
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	7992      	ldrb	r2, [r2, #6]
 80002ae:	4611      	mov	r1, r2
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	b292      	uxth	r2, r2
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	b292      	uxth	r2, r2
 80002ba:	431a      	orrs	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2103      	movs	r1, #3
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	401a      	ands	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	68da      	ldr	r2, [r3, #12]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	4619      	mov	r1, r3
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	431a      	orrs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d985      	bls.n	8000208 <GPIO_Init+0x1c>
    }
  }
}
 80002fc:	bf00      	nop
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
 8000314:	4613      	mov	r3, r2
 8000316:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000320:	787a      	ldrb	r2, [r7, #1]
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	f003 0307 	and.w	r3, r3, #7
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000330:	887b      	ldrh	r3, [r7, #2]
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	b29b      	uxth	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	887b      	ldrh	r3, [r7, #2]
 800033a:	08db      	lsrs	r3, r3, #3
 800033c:	b29b      	uxth	r3, r3
 800033e:	461a      	mov	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3208      	adds	r2, #8
 8000344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000348:	887b      	ldrh	r3, [r7, #2]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	ea02 0103 	and.w	r1, r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f100 0208 	add.w	r2, r0, #8
 8000362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000366:	887b      	ldrh	r3, [r7, #2]
 8000368:	08db      	lsrs	r3, r3, #3
 800036a:	b29b      	uxth	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3208      	adds	r2, #8
 8000372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4313      	orrs	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800037c:	887b      	ldrh	r3, [r7, #2]
 800037e:	08db      	lsrs	r3, r3, #3
 8000380:	b29b      	uxth	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3208      	adds	r2, #8
 8000388:	68b9      	ldr	r1, [r7, #8]
 800038a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80003ae:	490a      	ldr	r1, [pc, #40]	; (80003d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4313      	orrs	r3, r2
 80003b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80003ba:	e006      	b.n	80003ca <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80003bc:	4906      	ldr	r1, [pc, #24]	; (80003d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80003c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	4013      	ands	r3, r2
 80003c8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800

080003dc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d006      	beq.n	80003fc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003ee:	490a      	ldr	r1, [pc, #40]	; (8000418 <RCC_APB1PeriphClockCmd+0x3c>)
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <RCC_APB1PeriphClockCmd+0x3c>)
 80003f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80003fa:	e006      	b.n	800040a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80003fc:	4906      	ldr	r1, [pc, #24]	; (8000418 <RCC_APB1PeriphClockCmd+0x3c>)
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <RCC_APB1PeriphClockCmd+0x3c>)
 8000400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	43db      	mvns	r3, r3
 8000406:	4013      	ands	r3, r2
 8000408:	640b      	str	r3, [r1, #64]	; 0x40
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40023800 	.word	0x40023800

0800041c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a29      	ldr	r2, [pc, #164]	; (80004d8 <TIM_TimeBaseInit+0xbc>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d013      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a28      	ldr	r2, [pc, #160]	; (80004dc <TIM_TimeBaseInit+0xc0>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d00f      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000446:	d00b      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a25      	ldr	r2, [pc, #148]	; (80004e0 <TIM_TimeBaseInit+0xc4>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d007      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <TIM_TimeBaseInit+0xc8>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d003      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <TIM_TimeBaseInit+0xcc>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d108      	bne.n	8000472 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000460:	89fb      	ldrh	r3, [r7, #14]
 8000462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000466:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	885a      	ldrh	r2, [r3, #2]
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	4313      	orrs	r3, r2
 8000470:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <TIM_TimeBaseInit+0xd0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d00c      	beq.n	8000494 <TIM_TimeBaseInit+0x78>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <TIM_TimeBaseInit+0xd4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d008      	beq.n	8000494 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000488:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	891a      	ldrh	r2, [r3, #8]
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	4313      	orrs	r3, r2
 8000492:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	89fa      	ldrh	r2, [r7, #14]
 8000498:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	685a      	ldr	r2, [r3, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	881a      	ldrh	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <TIM_TimeBaseInit+0xbc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d003      	beq.n	80004ba <TIM_TimeBaseInit+0x9e>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a09      	ldr	r2, [pc, #36]	; (80004dc <TIM_TimeBaseInit+0xc0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d104      	bne.n	80004c4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	7a9b      	ldrb	r3, [r3, #10]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2201      	movs	r2, #1
 80004c8:	829a      	strh	r2, [r3, #20]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40010000 	.word	0x40010000
 80004dc:	40010400 	.word	0x40010400
 80004e0:	40000400 	.word	0x40000400
 80004e4:	40000800 	.word	0x40000800
 80004e8:	40000c00 	.word	0x40000c00
 80004ec:	40001000 	.word	0x40001000
 80004f0:	40001400 	.word	0x40001400

080004f4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	b29b      	uxth	r3, r3
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	b29a      	uxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000516:	e007      	b.n	8000528 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000522:	b29a      	uxth	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	801a      	strh	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	b29a      	uxth	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000556:	e007      	b.n	8000568 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	f023 0301 	bic.w	r3, r3, #1
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	817b      	strh	r3, [r7, #10]
 8000582:	2300      	movs	r3, #0
 8000584:	81fb      	strh	r3, [r7, #14]
 8000586:	2300      	movs	r3, #0
 8000588:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	8c1b      	ldrh	r3, [r3, #32]
 800058e:	b29b      	uxth	r3, r3
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	8c1b      	ldrh	r3, [r3, #32]
 800059e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	889b      	ldrh	r3, [r3, #4]
 80005a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8b1b      	ldrh	r3, [r3, #24]
 80005aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80005ac:	897b      	ldrh	r3, [r7, #10]
 80005ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	f023 0303 	bic.w	r3, r3, #3
 80005ba:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	881a      	ldrh	r2, [r3, #0]
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	f023 0302 	bic.w	r3, r3, #2
 80005cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	899a      	ldrh	r2, [r3, #12]
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	885a      	ldrh	r2, [r3, #2]
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	4313      	orrs	r3, r2
 80005e0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <TIM_OC1Init+0xec>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d003      	beq.n	80005f2 <TIM_OC1Init+0x7e>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <TIM_OC1Init+0xf0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d123      	bne.n	800063a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	f023 0308 	bic.w	r3, r3, #8
 80005f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	89da      	ldrh	r2, [r3, #14]
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	4313      	orrs	r3, r2
 8000602:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	f023 0304 	bic.w	r3, r3, #4
 800060a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	889a      	ldrh	r2, [r3, #4]
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	4313      	orrs	r3, r2
 8000614:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8000616:	89bb      	ldrh	r3, [r7, #12]
 8000618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800061c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800061e:	89bb      	ldrh	r3, [r7, #12]
 8000620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000624:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	8a1a      	ldrh	r2, [r3, #16]
 800062a:	89bb      	ldrh	r3, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	8a5a      	ldrh	r2, [r3, #18]
 8000634:	89bb      	ldrh	r3, [r7, #12]
 8000636:	4313      	orrs	r3, r2
 8000638:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	89ba      	ldrh	r2, [r7, #12]
 800063e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	897a      	ldrh	r2, [r7, #10]
 8000644:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	89fa      	ldrh	r2, [r7, #14]
 8000652:	841a      	strh	r2, [r3, #32]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40010000 	.word	0x40010000
 8000664:	40010400 	.word	0x40010400

08000668 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	817b      	strh	r3, [r7, #10]
 8000676:	2300      	movs	r3, #0
 8000678:	81fb      	strh	r3, [r7, #14]
 800067a:	2300      	movs	r3, #0
 800067c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	8c1b      	ldrh	r3, [r3, #32]
 8000682:	b29b      	uxth	r3, r3
 8000684:	f023 0310 	bic.w	r3, r3, #16
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	8c1b      	ldrh	r3, [r3, #32]
 8000692:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	8b1b      	ldrh	r3, [r3, #24]
 800069e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80006a0:	897b      	ldrh	r3, [r7, #10]
 80006a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006a6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80006a8:	897b      	ldrh	r3, [r7, #10]
 80006aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ae:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	897b      	ldrh	r3, [r7, #10]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	f023 0320 	bic.w	r3, r3, #32
 80006c4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	899b      	ldrh	r3, [r3, #12]
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	b29a      	uxth	r2, r3
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	4313      	orrs	r3, r2
 80006e0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <TIM_OC2Init+0x108>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d003      	beq.n	80006f2 <TIM_OC2Init+0x8a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <TIM_OC2Init+0x10c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d12b      	bne.n	800074a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	89db      	ldrh	r3, [r3, #14]
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	b29a      	uxth	r2, r3
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4313      	orrs	r3, r2
 8000706:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800070e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	b29a      	uxth	r2, r3
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	4313      	orrs	r3, r2
 800071c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000724:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8000726:	89bb      	ldrh	r3, [r7, #12]
 8000728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800072c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	8a1b      	ldrh	r3, [r3, #16]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	b29a      	uxth	r2, r3
 8000736:	89bb      	ldrh	r3, [r7, #12]
 8000738:	4313      	orrs	r3, r2
 800073a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	8a5b      	ldrh	r3, [r3, #18]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	89ba      	ldrh	r2, [r7, #12]
 800074e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	897a      	ldrh	r2, [r7, #10]
 8000754:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	89fa      	ldrh	r2, [r7, #14]
 8000762:	841a      	strh	r2, [r3, #32]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40010000 	.word	0x40010000
 8000774:	40010400 	.word	0x40010400

08000778 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	817b      	strh	r3, [r7, #10]
 8000786:	2300      	movs	r3, #0
 8000788:	81fb      	strh	r3, [r7, #14]
 800078a:	2300      	movs	r3, #0
 800078c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	8c1b      	ldrh	r3, [r3, #32]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	8c1b      	ldrh	r3, [r3, #32]
 80007a2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	889b      	ldrh	r3, [r3, #4]
 80007a8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8b9b      	ldrh	r3, [r3, #28]
 80007ae:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80007b0:	897b      	ldrh	r3, [r7, #10]
 80007b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007b6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	f023 0303 	bic.w	r3, r3, #3
 80007be:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	897b      	ldrh	r3, [r7, #10]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007d0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	899b      	ldrh	r3, [r3, #12]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b29a      	uxth	r2, r3
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	4313      	orrs	r3, r2
 80007de:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a22      	ldr	r2, [pc, #136]	; (800087c <TIM_OC3Init+0x104>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d003      	beq.n	80007fe <TIM_OC3Init+0x86>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <TIM_OC3Init+0x108>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12b      	bne.n	8000856 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000804:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	89db      	ldrh	r3, [r3, #14]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b29a      	uxth	r2, r3
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	4313      	orrs	r3, r2
 8000812:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000814:	89fb      	ldrh	r3, [r7, #14]
 8000816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800081a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b29a      	uxth	r2, r3
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	4313      	orrs	r3, r2
 8000828:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800082a:	89bb      	ldrh	r3, [r7, #12]
 800082c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000830:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000838:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	8a1b      	ldrh	r3, [r3, #16]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	b29a      	uxth	r2, r3
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	8a5b      	ldrh	r3, [r3, #18]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	b29a      	uxth	r2, r3
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	4313      	orrs	r3, r2
 8000854:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	89ba      	ldrh	r2, [r7, #12]
 800085a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	897a      	ldrh	r2, [r7, #10]
 8000860:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	89fa      	ldrh	r2, [r7, #14]
 800086e:	841a      	strh	r2, [r3, #32]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40010000 	.word	0x40010000
 8000880:	40010400 	.word	0x40010400

08000884 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	81bb      	strh	r3, [r7, #12]
 8000892:	2300      	movs	r3, #0
 8000894:	817b      	strh	r3, [r7, #10]
 8000896:	2300      	movs	r3, #0
 8000898:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	8c1b      	ldrh	r3, [r3, #32]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	8c1b      	ldrh	r3, [r3, #32]
 80008ae:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	889b      	ldrh	r3, [r3, #4]
 80008b4:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8b9b      	ldrh	r3, [r3, #28]
 80008ba:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008c2:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ca:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	89bb      	ldrh	r3, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80008da:	897b      	ldrh	r3, [r7, #10]
 80008dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008e0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	899b      	ldrh	r3, [r3, #12]
 80008e6:	031b      	lsls	r3, r3, #12
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	885b      	ldrh	r3, [r3, #2]
 80008f4:	031b      	lsls	r3, r3, #12
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	897b      	ldrh	r3, [r7, #10]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <TIM_OC4Init+0xc8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d003      	beq.n	800090e <TIM_OC4Init+0x8a>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <TIM_OC4Init+0xcc>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d10a      	bne.n	8000924 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000914:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	8a1b      	ldrh	r3, [r3, #16]
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	b29a      	uxth	r2, r3
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	4313      	orrs	r3, r2
 8000922:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89fa      	ldrh	r2, [r7, #14]
 8000928:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	89ba      	ldrh	r2, [r7, #12]
 800092e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	897a      	ldrh	r2, [r7, #10]
 800093c:	841a      	strh	r2, [r3, #32]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40010000 	.word	0x40010000
 8000950:	40010400 	.word	0x40010400

08000954 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	8b1b      	ldrh	r3, [r3, #24]
 8000968:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	f023 0308 	bic.w	r3, r3, #8
 8000970:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	4313      	orrs	r3, r2
 8000978:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	89fa      	ldrh	r2, [r7, #14]
 800097e:	831a      	strh	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	8b1b      	ldrh	r3, [r3, #24]
 80009a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009a8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	831a      	strh	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	8b9b      	ldrh	r3, [r3, #28]
 80009dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	f023 0308 	bic.w	r3, r3, #8
 80009e4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80009e6:	89fa      	ldrh	r2, [r7, #14]
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	89fa      	ldrh	r2, [r7, #14]
 80009f2:	839a      	strh	r2, [r3, #28]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	8b9b      	ldrh	r3, [r3, #28]
 8000a14:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a1c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	89fa      	ldrh	r2, [r7, #14]
 8000a2e:	839a      	strh	r2, [r3, #28]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <main>:

//Variable para contar cuantas veces se pulso el boton:
uint32_t Pulses = 0;

int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8000a40:	f000 fb7e 	bl	8001140 <SystemInit>

	//Inicializacion del DISPLAY LCD:
	INIT_LCD_2x16(LCD_2X16);
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <main+0x34>)
 8000a46:	f000 f81b 	bl	8000a80 <INIT_LCD_2x16>

	//Inicializacion del TIM4:
	INIT_TIM4(OC1_Port, OC1);
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <main+0x38>)
 8000a50:	f000 f83e 	bl	8000ad0 <INIT_TIM4>

	DutyCycle = 50;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <main+0x3c>)
 8000a56:	2232      	movs	r2, #50	; 0x32
 8000a58:	601a      	str	r2, [r3, #0]
	    	SET_TIM4(OC1, TimeBase, Freq, DutyCycle);
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <main+0x3c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000a62:	4906      	ldr	r1, [pc, #24]	; (8000a7c <main+0x40>)
 8000a64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a68:	f000 f866 	bl	8000b38 <SET_TIM4>


/*------------------------------------------------------------------------------
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
    while(1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x30>
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	200000a8 	.word	0x200000a8
 8000a7c:	00030d40 	.word	0x00030d40

08000a80 <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f95d 	bl	8000d48 <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <INIT_LCD_2x16+0x4c>)
 8000a90:	f000 f9ed 	bl	8000e6e <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f9fa 	bl	8000e8e <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2028      	movs	r0, #40	; 0x28
 8000a9e:	f000 fa52 	bl	8000f46 <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2006      	movs	r0, #6
 8000aa6:	f000 fa4e 	bl	8000f46 <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	200c      	movs	r0, #12
 8000aae:	f000 fa4a 	bl	8000f46 <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fa46 	bl	8000f46 <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000abe:	f000 f9d6 	bl	8000e6e <P_LCD_2x16_Delay>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <INIT_TIM4>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void INIT_TIM4(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
	  GPIO_InitTypeDef GPIO_InitStructure;


	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000adc:	2101      	movs	r1, #1
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f7ff fc7c 	bl	80003dc <RCC_APB1PeriphClockCmd>
	  //Habilitacion de la senal de reloj para el periferico:
	  uint32_t Clock;
	  Clock = FIND_CLOCK(Port);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f8e3 	bl	8000cb0 <FIND_CLOCK>
 8000aea:	6178      	str	r0, [r7, #20]
	  RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8000aec:	2101      	movs	r1, #1
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff fc54 	bl	800039c <RCC_AHB1PeriphClockCmd>

	  /* GPIOC Configuration: TIM4 CH1 (PD12),CH2 (PD13),CH3 (PD14)CH4 (PD15) */
	  GPIO_InitStructure.GPIO_Pin = Pin;
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000af8:	2302      	movs	r3, #2
 8000afa:	733b      	strb	r3, [r7, #12]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000afc:	2303      	movs	r3, #3
 8000afe:	737b      	strb	r3, [r7, #13]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73bb      	strb	r3, [r7, #14]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
	  GPIO_Init(Port, &GPIO_InitStructure);
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fb6c 	bl	80001ec <GPIO_Init>

	  //Definición de GPIO_PinSourceXX:
	  uint8_t PinSource;
	  PinSource = FIND_PINSOURCE(Pin);
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fa98 	bl	800104c <FIND_PINSOURCE>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	74fb      	strb	r3, [r7, #19]

	  /* Connect TIM4 pins to AF2 */
	  GPIO_PinAFConfig(Port, PinSource, GPIO_AF_TIM4);
 8000b20:	7cfb      	ldrb	r3, [r7, #19]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	2202      	movs	r2, #2
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fbed 	bl	8000308 <GPIO_PinAFConfig>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <SET_TIM4>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM4(uint16_t Pin, uint32_t TimeBase, uint32_t Freq, uint32_t DutyCycle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4603      	mov	r3, r0
 8000b46:	81fb      	strh	r3, [r7, #14]
	uint32_t DT_Value;
	uint16_t PrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	82fb      	strh	r3, [r7, #22]
	uint16_t TIM_Period = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	82bb      	strh	r3, [r7, #20]

	SystemCoreClockUpdate();
 8000b50:	f000 fb2c 	bl	80011ac <SystemCoreClockUpdate>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8000b54:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <SET_TIM4+0x164>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	085a      	lsrs	r2, r3, #1
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	3b01      	subs	r3, #1
 8000b64:	82fb      	strh	r3, [r7, #22]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	4a4b      	ldr	r2, [pc, #300]	; (8000ca0 <SET_TIM4+0x168>)
 8000b72:	6053      	str	r3, [r2, #4]
	TIM_Period = TimeBase / Freq - 1;
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	82bb      	strh	r3, [r7, #20]

	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8000b82:	4a47      	ldr	r2, [pc, #284]	; (8000ca0 <SET_TIM4+0x168>)
 8000b84:	8afb      	ldrh	r3, [r7, #22]
 8000b86:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000b88:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <SET_TIM4+0x168>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <SET_TIM4+0x168>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8000b94:	4942      	ldr	r1, [pc, #264]	; (8000ca0 <SET_TIM4+0x168>)
 8000b96:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <SET_TIM4+0x16c>)
 8000b98:	f7ff fc40 	bl	800041c <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1*/
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000b9c:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <SET_TIM4+0x170>)
 8000b9e:	2260      	movs	r2, #96	; 0x60
 8000ba0:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000ba2:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <SET_TIM4+0x170>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	819a      	strh	r2, [r3, #12]

	//Configuración del Duty Cycle para cada pin:
	DT_Value = DutyCycle * (TIM_Period + 1) / 100;
 8000ba8:	8abb      	ldrh	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	461a      	mov	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	fb03 f302 	mul.w	r3, r3, r2
 8000bb4:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <SET_TIM4+0x174>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	613b      	str	r3, [r7, #16]

	if (Pin == GPIO_Pin_12) {
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bc4:	d114      	bne.n	8000bf0 <SET_TIM4+0xb8>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <SET_TIM4+0x170>)
 8000bc8:	2260      	movs	r2, #96	; 0x60
 8000bca:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <SET_TIM4+0x170>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8000bd2:	4a35      	ldr	r2, [pc, #212]	; (8000ca8 <SET_TIM4+0x170>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SET_TIM4+0x170>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	819a      	strh	r2, [r3, #12]

		TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8000bde:	4932      	ldr	r1, [pc, #200]	; (8000ca8 <SET_TIM4+0x170>)
 8000be0:	4830      	ldr	r0, [pc, #192]	; (8000ca4 <SET_TIM4+0x16c>)
 8000be2:	f7ff fcc7 	bl	8000574 <TIM_OC1Init>

		TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000be6:	2108      	movs	r1, #8
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <SET_TIM4+0x16c>)
 8000bea:	f7ff feb3 	bl	8000954 <TIM_OC1PreloadConfig>
 8000bee:	e049      	b.n	8000c84 <SET_TIM4+0x14c>
	} else if (Pin == GPIO_Pin_13) {
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf6:	d114      	bne.n	8000c22 <SET_TIM4+0xea>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <SET_TIM4+0x170>)
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <SET_TIM4+0x170>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <SET_TIM4+0x170>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <SET_TIM4+0x170>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	819a      	strh	r2, [r3, #12]

		TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8000c10:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <SET_TIM4+0x170>)
 8000c12:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c14:	f7ff fd28 	bl	8000668 <TIM_OC2Init>

		TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c1c:	f7ff feb6 	bl	800098c <TIM_OC2PreloadConfig>
 8000c20:	e030      	b.n	8000c84 <SET_TIM4+0x14c>
	} else if (Pin == GPIO_Pin_14) {
 8000c22:	89fb      	ldrh	r3, [r7, #14]
 8000c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c28:	d114      	bne.n	8000c54 <SET_TIM4+0x11c>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <SET_TIM4+0x170>)
 8000c2c:	2260      	movs	r2, #96	; 0x60
 8000c2e:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <SET_TIM4+0x170>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <SET_TIM4+0x170>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <SET_TIM4+0x170>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	819a      	strh	r2, [r3, #12]

		TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8000c42:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <SET_TIM4+0x170>)
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c46:	f7ff fd97 	bl	8000778 <TIM_OC3Init>

		TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c4e:	f7ff febb 	bl	80009c8 <TIM_OC3PreloadConfig>
 8000c52:	e017      	b.n	8000c84 <SET_TIM4+0x14c>
	} else if (Pin == GPIO_Pin_15) {
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c5a:	d113      	bne.n	8000c84 <SET_TIM4+0x14c>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <SET_TIM4+0x170>)
 8000c5e:	2260      	movs	r2, #96	; 0x60
 8000c60:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <SET_TIM4+0x170>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <SET_TIM4+0x170>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <SET_TIM4+0x170>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	819a      	strh	r2, [r3, #12]

		TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <SET_TIM4+0x170>)
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c78:	f7ff fe04 	bl	8000884 <TIM_OC4Init>

		TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c80:	f7ff febe 	bl	8000a00 <TIM_OC4PreloadConfig>
	}

	//Cargar valores al TIM4:
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8000c84:	2101      	movs	r1, #1
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c88:	f7ff fc34 	bl	80004f4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIM4, ENABLE);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <SET_TIM4+0x16c>)
 8000c90:	f7ff fc50 	bl	8000534 <TIM_Cmd>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000078 	.word	0x20000078
 8000ca0:	200000ac 	.word	0x200000ac
 8000ca4:	40000800 	.word	0x40000800
 8000ca8:	200000b8 	.word	0x200000b8
 8000cac:	51eb851f 	.word	0x51eb851f

08000cb0 <FIND_CLOCK>:
/*------------------------------------------------------------------------------
 FUNCIONES INTERNAS:
------------------------------------------------------------------------------*/
//General:
uint32_t FIND_CLOCK(GPIO_TypeDef* Port)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint32_t Clock;

	if		(Port == GPIOA) Clock = RCC_AHB1Periph_GPIOA;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <FIND_CLOCK+0x7c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d102      	bne.n	8000cc6 <FIND_CLOCK+0x16>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e02b      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOB) Clock = RCC_AHB1Periph_GPIOB;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <FIND_CLOCK+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d102      	bne.n	8000cd4 <FIND_CLOCK+0x24>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e024      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOC) Clock = RCC_AHB1Periph_GPIOC;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <FIND_CLOCK+0x84>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d102      	bne.n	8000ce2 <FIND_CLOCK+0x32>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e01d      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOD) Clock = RCC_AHB1Periph_GPIOD;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <FIND_CLOCK+0x88>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d102      	bne.n	8000cf0 <FIND_CLOCK+0x40>
 8000cea:	2308      	movs	r3, #8
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e016      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOE) Clock = RCC_AHB1Periph_GPIOE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <FIND_CLOCK+0x8c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d102      	bne.n	8000cfe <FIND_CLOCK+0x4e>
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00f      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOF) Clock = RCC_AHB1Periph_GPIOF;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <FIND_CLOCK+0x90>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d102      	bne.n	8000d0c <FIND_CLOCK+0x5c>
 8000d06:	2320      	movs	r3, #32
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e008      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else if (Port == GPIOG) Clock = RCC_AHB1Periph_GPIOG;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <FIND_CLOCK+0x94>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <FIND_CLOCK+0x6a>
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e001      	b.n	8000d1e <FIND_CLOCK+0x6e>
	else 					Clock = NULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]

	return Clock;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021800 	.word	0x40021800

08000d48 <P_LCD_2x16_InitIO>:
	return Channel;
}

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	75fb      	strb	r3, [r7, #23]
 8000d54:	e046      	b.n	8000de4 <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 8000d56:	7dfa      	ldrb	r2, [r7, #23]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	461a      	mov	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb16 	bl	800039c <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 8000d70:	7dfa      	ldrb	r2, [r7, #23]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	891b      	ldrh	r3, [r3, #8]
 8000d82:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d84:	2301      	movs	r3, #1
 8000d86:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d90:	2302      	movs	r3, #2
 8000d92:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8000d94:	7dfa      	ldrb	r2, [r7, #23]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fa1d 	bl	80001ec <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 8000db2:	7dfa      	ldrb	r2, [r7, #23]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f810 	bl	8000df2 <P_LCD_2x16_PinLo>
 8000dd2:	e004      	b.n	8000dde <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f829 	bl	8000e30 <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	3301      	adds	r3, #1
 8000de2:	75fb      	strb	r3, [r7, #23]
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d9b5      	bls.n	8000d56 <P_LCD_2x16_InitIO+0xe>
	}
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	6039      	str	r1, [r7, #0]
 8000dfc:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	891b      	ldrh	r3, [r3, #8]
 8000e22:	834b      	strh	r3, [r1, #26]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	461a      	mov	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	6859      	ldr	r1, [r3, #4]
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	891b      	ldrh	r3, [r3, #8]
 8000e60:	830b      	strh	r3, [r1, #24]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8000e76:	bf00      	nop
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1fa      	bne.n	8000e78 <P_LCD_2x16_Delay+0xa>
  {
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f7ff ffc9 	bl	8000e30 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f7ff ffc5 	bl	8000e30 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f7ff ffa2 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2005      	movs	r0, #5
 8000eb2:	f7ff ff9e 	bl	8000df2 <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f82d 	bl	8000f16 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ec0:	f7ff ffd5 	bl	8000e6e <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f826 	bl	8000f16 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000eca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ece:	f7ff ffce 	bl	8000e6e <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f81f 	bl	8000f16 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000edc:	f7ff ffc7 	bl	8000e6e <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff ff85 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	2003      	movs	r0, #3
 8000eec:	f7ff ffa0 	bl	8000e30 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff ff7d 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	2005      	movs	r0, #5
 8000efc:	f7ff ff79 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f808 	bl	8000f16 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000f06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f0a:	f7ff ffb0 	bl	8000e6e <P_LCD_2x16_Delay>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff ff85 	bl	8000e30 <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8000f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2a:	f7ff ffa0 	bl	8000e6e <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff ff5e 	bl	8000df2 <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8000f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3a:	f7ff ff98 	bl	8000e6e <P_LCD_2x16_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	6039      	str	r1, [r7, #0]
 8000f50:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff4c 	bl	8000df2 <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da04      	bge.n	8000f6c <P_LCD_2x16_Cmd+0x26>
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	2005      	movs	r0, #5
 8000f66:	f7ff ff63 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000f6a:	e003      	b.n	8000f74 <P_LCD_2x16_Cmd+0x2e>
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f7ff ff3f 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <P_LCD_2x16_Cmd+0x42>
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	2004      	movs	r0, #4
 8000f82:	f7ff ff55 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000f86:	e003      	b.n	8000f90 <P_LCD_2x16_Cmd+0x4a>
 8000f88:	6839      	ldr	r1, [r7, #0]
 8000f8a:	2004      	movs	r0, #4
 8000f8c:	f7ff ff31 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <P_LCD_2x16_Cmd+0x5e>
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f7ff ff47 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000fa2:	e003      	b.n	8000fac <P_LCD_2x16_Cmd+0x66>
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff ff23 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <P_LCD_2x16_Cmd+0x7a>
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff ff39 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000fbe:	e003      	b.n	8000fc8 <P_LCD_2x16_Cmd+0x82>
 8000fc0:	6839      	ldr	r1, [r7, #0]
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff ff15 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f7ff ffa4 	bl	8000f16 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <P_LCD_2x16_Cmd+0x9c>
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f7ff ff28 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000fe0:	e003      	b.n	8000fea <P_LCD_2x16_Cmd+0xa4>
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	2005      	movs	r0, #5
 8000fe6:	f7ff ff04 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <P_LCD_2x16_Cmd+0xb8>
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f7ff ff1a 	bl	8000e30 <P_LCD_2x16_PinHi>
 8000ffc:	e003      	b.n	8001006 <P_LCD_2x16_Cmd+0xc0>
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	2004      	movs	r0, #4
 8001002:	f7ff fef6 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <P_LCD_2x16_Cmd+0xd4>
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff ff0c 	bl	8000e30 <P_LCD_2x16_PinHi>
 8001018:	e003      	b.n	8001022 <P_LCD_2x16_Cmd+0xdc>
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	2003      	movs	r0, #3
 800101e:	f7ff fee8 	bl	8000df2 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <P_LCD_2x16_Cmd+0xf0>
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	2002      	movs	r0, #2
 8001030:	f7ff fefe 	bl	8000e30 <P_LCD_2x16_PinHi>
 8001034:	e003      	b.n	800103e <P_LCD_2x16_Cmd+0xf8>
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff feda 	bl	8000df2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f7ff ff69 	bl	8000f16 <P_LCD_2x16_Clk>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <FIND_PINSOURCE>:
  P_LCD_2x16_Clk(LCD_2X16);
}

//Configuración del TIM4:
uint8_t FIND_PINSOURCE(uint32_t Pin)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if     (Pin == GPIO_Pin_12) return GPIO_PinSource12;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800105a:	d101      	bne.n	8001060 <FIND_PINSOURCE+0x14>
 800105c:	230c      	movs	r3, #12
 800105e:	e011      	b.n	8001084 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_13) return GPIO_PinSource13;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001066:	d101      	bne.n	800106c <FIND_PINSOURCE+0x20>
 8001068:	230d      	movs	r3, #13
 800106a:	e00b      	b.n	8001084 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_14) return GPIO_PinSource14;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001072:	d101      	bne.n	8001078 <FIND_PINSOURCE+0x2c>
 8001074:	230e      	movs	r3, #14
 8001076:	e005      	b.n	8001084 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_15) return GPIO_PinSource15;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800107e:	d101      	bne.n	8001084 <FIND_PINSOURCE+0x38>
 8001080:	230f      	movs	r3, #15
 8001082:	e7ff      	b.n	8001084 <FIND_PINSOURCE+0x38>
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001096:	e003      	b.n	80010a0 <LoopCopyDataInit>

08001098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800109a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800109c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800109e:	3104      	adds	r1, #4

080010a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a8:	d3f6      	bcc.n	8001098 <CopyDataInit>
  ldr  r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010ac:	e002      	b.n	80010b4 <LoopFillZerobss>

080010ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b0:	f842 3b04 	str.w	r3, [r2], #4

080010b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b8:	d3f9      	bcc.n	80010ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ba:	f000 f841 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f000 f96d 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fcbb 	bl	8000a3c <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010cc:	08001404 	.word	0x08001404
  ldr  r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80010d8:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80010dc:	200000cc 	.word	0x200000cc

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>

080010e2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <HardFault_Handler+0x4>

080010f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001100:	e7fe      	b.n	8001100 <BusFault_Handler+0x4>

08001102 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001106:	e7fe      	b.n	8001106 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <SystemInit+0x60>)
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <SystemInit+0x60>)
 8001148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SystemInit+0x64>)
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <SystemInit+0x64>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <SystemInit+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <SystemInit+0x64>)
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <SystemInit+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <SystemInit+0x64>)
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <SystemInit+0x68>)
 800117a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <SystemInit+0x64>)
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <SystemInit+0x64>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800118e:	f000 f889 	bl	80012a4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <SystemInit+0x60>)
 8001194:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001198:	609a      	str	r2, [r3, #8]
#endif
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	40023800 	.word	0x40023800
 80011a8:	24003010 	.word	0x24003010

080011ac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	2302      	movs	r3, #2
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	2302      	movs	r3, #2
 80011c4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d007      	beq.n	80011e6 <SystemCoreClockUpdate+0x3a>
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d009      	beq.n	80011ee <SystemCoreClockUpdate+0x42>
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13d      	bne.n	800125a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 80011e0:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <SystemCoreClockUpdate+0xec>)
 80011e2:	601a      	str	r2, [r3, #0]
      break;
 80011e4:	e03d      	b.n	8001262 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 80011e8:	4a2c      	ldr	r2, [pc, #176]	; (800129c <SystemCoreClockUpdate+0xf0>)
 80011ea:	601a      	str	r2, [r3, #0]
      break;
 80011ec:	e039      	b.n	8001262 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	0d9b      	lsrs	r3, r3, #22
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001202:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00c      	beq.n	8001224 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800120a:	4a24      	ldr	r2, [pc, #144]	; (800129c <SystemCoreClockUpdate+0xf0>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 8001214:	6852      	ldr	r2, [r2, #4]
 8001216:	0992      	lsrs	r2, r2, #6
 8001218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e00b      	b.n	800123c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <SystemCoreClockUpdate+0xec>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 800122e:	6852      	ldr	r2, [r2, #4]
 8001230:	0992      	lsrs	r2, r2, #6
 8001232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	3301      	adds	r3, #1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	fbb2 f3f3 	udiv	r3, r2, r3
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 8001256:	6013      	str	r3, [r2, #0]
      break;
 8001258:	e003      	b.n	8001262 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <SystemCoreClockUpdate+0xec>)
 800125e:	601a      	str	r2, [r3, #0]
      break;
 8001260:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <SystemCoreClockUpdate+0xe4>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <SystemCoreClockUpdate+0xf4>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemCoreClockUpdate+0xe8>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	20000078 	.word	0x20000078
 8001298:	00f42400 	.word	0x00f42400
 800129c:	007a1200 	.word	0x007a1200
 80012a0:	2000007c 	.word	0x2000007c

080012a4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80012b2:	4a36      	ldr	r2, [pc, #216]	; (800138c <SetSysClock+0xe8>)
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <SetSysClock+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012be:	4b33      	ldr	r3, [pc, #204]	; (800138c <SetSysClock+0xe8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <SetSysClock+0x38>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012da:	d1f0      	bne.n	80012be <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <SetSysClock+0xe8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012e8:	2301      	movs	r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	e001      	b.n	80012f2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d142      	bne.n	800137e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <SetSysClock+0xe8>)
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <SetSysClock+0xe8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <SetSysClock+0xec>)
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SetSysClock+0xec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <SetSysClock+0xe8>)
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <SetSysClock+0xe8>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <SetSysClock+0xe8>)
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <SetSysClock+0xe8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001322:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <SetSysClock+0xe8>)
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <SetSysClock+0xe8>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800132e:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <SetSysClock+0xe8>)
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <SetSysClock+0xf0>)
 8001334:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <SetSysClock+0xe8>)
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <SetSysClock+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001340:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001342:	bf00      	nop
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <SetSysClock+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f9      	beq.n	8001344 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <SetSysClock+0xf4>)
 8001352:	f240 7205 	movw	r2, #1797	; 0x705
 8001356:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <SetSysClock+0xe8>)
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <SetSysClock+0xe8>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <SetSysClock+0xe8>)
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <SetSysClock+0xe8>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001370:	bf00      	nop
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SetSysClock+0xe8>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b08      	cmp	r3, #8
 800137c:	d1f9      	bne.n	8001372 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000
 8001394:	07402d04 	.word	0x07402d04
 8001398:	40023c00 	.word	0x40023c00

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4e0d      	ldr	r6, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1ba4      	subs	r4, r4, r6
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2500      	movs	r5, #0
 80013a8:	42a5      	cmp	r5, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4e0b      	ldr	r6, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 f818 	bl	80013e4 <_init>
 80013b4:	1ba4      	subs	r4, r4, r6
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2500      	movs	r5, #0
 80013ba:	42a5      	cmp	r5, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c4:	4798      	blx	r3
 80013c6:	3501      	adds	r5, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ce:	4798      	blx	r3
 80013d0:	3501      	adds	r5, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	080013fc 	.word	0x080013fc
 80013d8:	080013fc 	.word	0x080013fc
 80013dc:	080013fc 	.word	0x080013fc
 80013e0:	08001400 	.word	0x08001400

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
