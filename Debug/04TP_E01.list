
04TP_E01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005530  08005530  00015530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000070c  20000000  080057c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002070c  2**0
                  CONTENTS
  8 .bss          00000094  2000070c  2000070c  0002070c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200007a0  200007a0  0002070c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000062be  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000c30  00000000  00000000  000269fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000730  00000000  00000000  00027630  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006b8  00000000  00000000  00027d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000024a9  00000000  00000000  00028418  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002823  00000000  00000000  0002a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002d0e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a18  00000000  00000000  0002d160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000070c 	.word	0x2000070c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005514 	.word	0x08005514

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000710 	.word	0x20000710
 80001ec:	08005514 	.word	0x08005514

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2f>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc8:	bf24      	itt	cs
 8000bca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bd2:	d90d      	bls.n	8000bf0 <__aeabi_d2f+0x30>
 8000bd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf4:	d121      	bne.n	8000c3a <__aeabi_d2f+0x7a>
 8000bf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bfa:	bfbc      	itt	lt
 8000bfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	4770      	bxlt	lr
 8000c02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0a:	f1c2 0218 	rsb	r2, r2, #24
 8000c0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c16:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1a:	bf18      	it	ne
 8000c1c:	f040 0001 	orrne.w	r0, r0, #1
 8000c20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c2c:	ea40 000c 	orr.w	r0, r0, ip
 8000c30:	fa23 f302 	lsr.w	r3, r3, r2
 8000c34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c38:	e7cc      	b.n	8000bd4 <__aeabi_d2f+0x14>
 8000c3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3e:	d107      	bne.n	8000c50 <__aeabi_d2f+0x90>
 8000c40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c44:	bf1e      	ittt	ne
 8000c46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4e:	4770      	bxne	lr
 8000c50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_uldivmod>:
 8000c60:	b953      	cbnz	r3, 8000c78 <__aeabi_uldivmod+0x18>
 8000c62:	b94a      	cbnz	r2, 8000c78 <__aeabi_uldivmod+0x18>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	bf08      	it	eq
 8000c68:	2800      	cmpeq	r0, #0
 8000c6a:	bf1c      	itt	ne
 8000c6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c74:	f000 b97a 	b.w	8000f6c <__aeabi_idiv0>
 8000c78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c80:	f000 f806 	bl	8000c90 <__udivmoddi4>
 8000c84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8c:	b004      	add	sp, #16
 8000c8e:	4770      	bx	lr

08000c90 <__udivmoddi4>:
 8000c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c94:	468c      	mov	ip, r1
 8000c96:	460d      	mov	r5, r1
 8000c98:	4604      	mov	r4, r0
 8000c9a:	9e08      	ldr	r6, [sp, #32]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d151      	bne.n	8000d44 <__udivmoddi4+0xb4>
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	d96d      	bls.n	8000d82 <__udivmoddi4+0xf2>
 8000ca6:	fab2 fe82 	clz	lr, r2
 8000caa:	f1be 0f00 	cmp.w	lr, #0
 8000cae:	d00b      	beq.n	8000cc8 <__udivmoddi4+0x38>
 8000cb0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cb4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cbc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cc0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cc4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cc8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ccc:	0c25      	lsrs	r5, r4, #16
 8000cce:	fbbc f8fa 	udiv	r8, ip, sl
 8000cd2:	fa1f f987 	uxth.w	r9, r7
 8000cd6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cda:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cde:	fb08 f309 	mul.w	r3, r8, r9
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x6c>
 8000ce6:	19ed      	adds	r5, r5, r7
 8000ce8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000cec:	f080 8123 	bcs.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	f240 8120 	bls.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	443d      	add	r5, r7
 8000cfc:	1aed      	subs	r5, r5, r3
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d04:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb00 f909 	mul.w	r9, r0, r9
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x98>
 8000d14:	19e4      	adds	r4, r4, r7
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 810a 	bcs.w	8000f32 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8107 	bls.w	8000f32 <__udivmoddi4+0x2a2>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 0409 	sub.w	r4, r4, r9
 8000d2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d30:	2100      	movs	r1, #0
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d061      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6034      	str	r4, [r6, #0]
 8000d3e:	6073      	str	r3, [r6, #4]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0xc8>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d054      	beq.n	8000df6 <__udivmoddi4+0x166>
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d52:	4608      	mov	r0, r1
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	fab3 f183 	clz	r1, r3
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	f040 808e 	bne.w	8000e7e <__udivmoddi4+0x1ee>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xdc>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80fa 	bhi.w	8000f60 <__udivmoddi4+0x2d0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	46ac      	mov	ip, r5
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d03f      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d7a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	b912      	cbnz	r2, 8000d8a <__udivmoddi4+0xfa>
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d8a:	fab7 fe87 	clz	lr, r7
 8000d8e:	f1be 0f00 	cmp.w	lr, #0
 8000d92:	d134      	bne.n	8000dfe <__udivmoddi4+0x16e>
 8000d94:	1beb      	subs	r3, r5, r7
 8000d96:	0c3a      	lsrs	r2, r7, #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000da2:	0c25      	lsrs	r5, r4, #16
 8000da4:	fb02 3318 	mls	r3, r2, r8, r3
 8000da8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dac:	fb0c f308 	mul.w	r3, ip, r8
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x134>
 8000db4:	19ed      	adds	r5, r5, r7
 8000db6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x132>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	f200 80d1 	bhi.w	8000f64 <__udivmoddi4+0x2d4>
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	1aed      	subs	r5, r5, r3
 8000dc6:	b2a3      	uxth	r3, r4
 8000dc8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dcc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dd4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x15c>
 8000ddc:	19e4      	adds	r4, r4, r7
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x15a>
 8000de4:	45a4      	cmp	ip, r4
 8000de6:	f200 80b8 	bhi.w	8000f5a <__udivmoddi4+0x2ca>
 8000dea:	4618      	mov	r0, r3
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df4:	e79d      	b.n	8000d32 <__udivmoddi4+0xa2>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1ce 0420 	rsb	r4, lr, #32
 8000e02:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e06:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e0a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e0e:	0c3a      	lsrs	r2, r7, #16
 8000e10:	fa25 f404 	lsr.w	r4, r5, r4
 8000e14:	ea48 0803 	orr.w	r8, r8, r3
 8000e18:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e1c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e20:	fb02 4411 	mls	r4, r2, r1, r4
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e2c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e36:	d909      	bls.n	8000e4c <__udivmoddi4+0x1bc>
 8000e38:	19ed      	adds	r5, r5, r7
 8000e3a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e3e:	f080 808a 	bcs.w	8000f56 <__udivmoddi4+0x2c6>
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	f240 8087 	bls.w	8000f56 <__udivmoddi4+0x2c6>
 8000e48:	3902      	subs	r1, #2
 8000e4a:	443d      	add	r5, r7
 8000e4c:	1aeb      	subs	r3, r5, r3
 8000e4e:	fa1f f588 	uxth.w	r5, r8
 8000e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e56:	fb02 3310 	mls	r3, r2, r0, r3
 8000e5a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e5e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x1e6>
 8000e66:	19ed      	adds	r5, r5, r7
 8000e68:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6c:	d26f      	bcs.n	8000f4e <__udivmoddi4+0x2be>
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	d96d      	bls.n	8000f4e <__udivmoddi4+0x2be>
 8000e72:	3802      	subs	r0, #2
 8000e74:	443d      	add	r5, r7
 8000e76:	1aeb      	subs	r3, r5, r3
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	e78f      	b.n	8000d9e <__udivmoddi4+0x10e>
 8000e7e:	f1c1 0720 	rsb	r7, r1, #32
 8000e82:	fa22 f807 	lsr.w	r8, r2, r7
 8000e86:	408b      	lsls	r3, r1
 8000e88:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8c:	ea48 0303 	orr.w	r3, r8, r3
 8000e90:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e9e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ea2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ea6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eaa:	fa1f f883 	uxth.w	r8, r3
 8000eae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000eb2:	fb09 f408 	mul.w	r4, r9, r8
 8000eb6:	42ac      	cmp	r4, r5
 8000eb8:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x244>
 8000ec2:	18ed      	adds	r5, r5, r3
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ec8:	d243      	bcs.n	8000f52 <__udivmoddi4+0x2c2>
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	d941      	bls.n	8000f52 <__udivmoddi4+0x2c2>
 8000ece:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed2:	441d      	add	r5, r3
 8000ed4:	1b2d      	subs	r5, r5, r4
 8000ed6:	fa1f fe8e 	uxth.w	lr, lr
 8000eda:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ede:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ee2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ee6:	fb00 f808 	mul.w	r8, r0, r8
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x26e>
 8000eee:	18e4      	adds	r4, r4, r3
 8000ef0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ef4:	d229      	bcs.n	8000f4a <__udivmoddi4+0x2ba>
 8000ef6:	45a0      	cmp	r8, r4
 8000ef8:	d927      	bls.n	8000f4a <__udivmoddi4+0x2ba>
 8000efa:	3802      	subs	r0, #2
 8000efc:	441c      	add	r4, r3
 8000efe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f02:	eba4 0408 	sub.w	r4, r4, r8
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	454c      	cmp	r4, r9
 8000f0c:	46c6      	mov	lr, r8
 8000f0e:	464d      	mov	r5, r9
 8000f10:	d315      	bcc.n	8000f3e <__udivmoddi4+0x2ae>
 8000f12:	d012      	beq.n	8000f3a <__udivmoddi4+0x2aa>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x29c>
 8000f16:	ebba 030e 	subs.w	r3, sl, lr
 8000f1a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40cb      	lsrs	r3, r1
 8000f24:	431f      	orrs	r7, r3
 8000f26:	40cc      	lsrs	r4, r1
 8000f28:	6037      	str	r7, [r6, #0]
 8000f2a:	6074      	str	r4, [r6, #4]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	4618      	mov	r0, r3
 8000f34:	e6f8      	b.n	8000d28 <__udivmoddi4+0x98>
 8000f36:	4690      	mov	r8, r2
 8000f38:	e6e0      	b.n	8000cfc <__udivmoddi4+0x6c>
 8000f3a:	45c2      	cmp	sl, r8
 8000f3c:	d2ea      	bcs.n	8000f14 <__udivmoddi4+0x284>
 8000f3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f42:	eb69 0503 	sbc.w	r5, r9, r3
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7e4      	b.n	8000f14 <__udivmoddi4+0x284>
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e7d7      	b.n	8000efe <__udivmoddi4+0x26e>
 8000f4e:	4640      	mov	r0, r8
 8000f50:	e791      	b.n	8000e76 <__udivmoddi4+0x1e6>
 8000f52:	4681      	mov	r9, r0
 8000f54:	e7be      	b.n	8000ed4 <__udivmoddi4+0x244>
 8000f56:	4601      	mov	r1, r0
 8000f58:	e778      	b.n	8000e4c <__udivmoddi4+0x1bc>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e745      	b.n	8000dec <__udivmoddi4+0x15c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xe6>
 8000f64:	f1a8 0802 	sub.w	r8, r8, #2
 8000f68:	443d      	add	r5, r7
 8000f6a:	e72b      	b.n	8000dc4 <__udivmoddi4+0x134>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e076      	b.n	800107a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d165      	bne.n	8001074 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d003      	beq.n	8000fe6 <GPIO_Init+0x76>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d12e      	bne.n	8001044 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2103      	movs	r1, #3
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	795b      	ldrb	r3, [r3, #5]
 8001004:	4619      	mov	r1, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	2301      	movs	r3, #1
 8001020:	408b      	lsls	r3, r1
 8001022:	43db      	mvns	r3, r3
 8001024:	401a      	ands	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	7992      	ldrb	r2, [r2, #6]
 8001032:	4611      	mov	r1, r2
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	b292      	uxth	r2, r2
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	b292      	uxth	r2, r2
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	b29b      	uxth	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2103      	movs	r1, #3
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	79db      	ldrb	r3, [r3, #7]
 8001064:	4619      	mov	r1, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d985      	bls.n	8000f8c <GPIO_Init+0x1c>
    }
  }
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010d8:	787a      	ldrb	r2, [r7, #1]
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	210f      	movs	r1, #15
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	ea02 0103 	and.w	r1, r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f100 0208 	add.w	r2, r0, #8
 800111a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	2302      	movs	r3, #2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	2302      	movs	r3, #2
 8001172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <RCC_GetClocksFreq+0x140>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d007      	beq.n	8001194 <RCC_GetClocksFreq+0x40>
 8001184:	2b08      	cmp	r3, #8
 8001186:	d009      	beq.n	800119c <RCC_GetClocksFreq+0x48>
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13d      	bne.n	8001208 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a42      	ldr	r2, [pc, #264]	; (8001298 <RCC_GetClocksFreq+0x144>)
 8001190:	601a      	str	r2, [r3, #0]
      break;
 8001192:	e03d      	b.n	8001210 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a41      	ldr	r2, [pc, #260]	; (800129c <RCC_GetClocksFreq+0x148>)
 8001198:	601a      	str	r2, [r3, #0]
      break;
 800119a:	e039      	b.n	8001210 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <RCC_GetClocksFreq+0x140>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	0d9b      	lsrs	r3, r3, #22
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <RCC_GetClocksFreq+0x140>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80011b8:	4a38      	ldr	r2, [pc, #224]	; (800129c <RCC_GetClocksFreq+0x148>)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	4a34      	ldr	r2, [pc, #208]	; (8001294 <RCC_GetClocksFreq+0x140>)
 80011c2:	6852      	ldr	r2, [r2, #4]
 80011c4:	0992      	lsrs	r2, r2, #6
 80011c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e00b      	b.n	80011ea <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011d2:	4a31      	ldr	r2, [pc, #196]	; (8001298 <RCC_GetClocksFreq+0x144>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <RCC_GetClocksFreq+0x140>)
 80011dc:	6852      	ldr	r2, [r2, #4]
 80011de:	0992      	lsrs	r2, r2, #6
 80011e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <RCC_GetClocksFreq+0x140>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	3301      	adds	r3, #1
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
      break;
 8001206:	e003      	b.n	8001210 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a23      	ldr	r2, [pc, #140]	; (8001298 <RCC_GetClocksFreq+0x144>)
 800120c:	601a      	str	r2, [r3, #0]
      break;
 800120e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <RCC_GetClocksFreq+0x140>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001218:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001220:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <RCC_GetClocksFreq+0x14c>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	40da      	lsrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <RCC_GetClocksFreq+0x140>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001240:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	0a9b      	lsrs	r3, r3, #10
 8001246:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <RCC_GetClocksFreq+0x14c>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	40da      	lsrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <RCC_GetClocksFreq+0x140>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001268:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	0b5b      	lsrs	r3, r3, #13
 800126e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <RCC_GetClocksFreq+0x14c>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]
}
 8001288:	bf00      	nop
 800128a:	3724      	adds	r7, #36	; 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40023800 	.word	0x40023800
 8001298:	00f42400 	.word	0x00f42400
 800129c:	007a1200 	.word	0x007a1200
 80012a0:	20000000 	.word	0x20000000

080012a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80012c2:	e006      	b.n	80012d2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4013      	ands	r3, r2
 80012d0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80012f6:	490a      	ldr	r1, [pc, #40]	; (8001320 <RCC_APB1PeriphClockCmd+0x3c>)
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <RCC_APB1PeriphClockCmd+0x3c>)
 80012fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001302:	e006      	b.n	8001312 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <RCC_APB1PeriphClockCmd+0x3c>)
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <RCC_APB1PeriphClockCmd+0x3c>)
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	43db      	mvns	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <TIM_TimeBaseInit+0xbc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <TIM_TimeBaseInit+0x44>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <TIM_TimeBaseInit+0xc0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00f      	beq.n	8001368 <TIM_TimeBaseInit+0x44>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134e:	d00b      	beq.n	8001368 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <TIM_TimeBaseInit+0xc4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d007      	beq.n	8001368 <TIM_TimeBaseInit+0x44>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <TIM_TimeBaseInit+0xc8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d003      	beq.n	8001368 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <TIM_TimeBaseInit+0xcc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d108      	bne.n	800137a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	885a      	ldrh	r2, [r3, #2]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	4313      	orrs	r3, r2
 8001378:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <TIM_TimeBaseInit+0xd0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00c      	beq.n	800139c <TIM_TimeBaseInit+0x78>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <TIM_TimeBaseInit+0xd4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d008      	beq.n	800139c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001390:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	891a      	ldrh	r2, [r3, #8]
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	4313      	orrs	r3, r2
 800139a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <TIM_TimeBaseInit+0xbc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d003      	beq.n	80013c2 <TIM_TimeBaseInit+0x9e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <TIM_TimeBaseInit+0xc0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d104      	bne.n	80013cc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	7a9b      	ldrb	r3, [r3, #10]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	829a      	strh	r2, [r3, #20]
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010400 	.word	0x40010400
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40000800 	.word	0x40000800
 80013f0:	40000c00 	.word	0x40000c00
 80013f4:	40001000 	.word	0x40001000
 80013f8:	40001400 	.word	0x40001400

080013fc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800141e:	e007      	b.n	8001430 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800142a:	b29a      	uxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	801a      	strh	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800145e:	e007      	b.n	8001470 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	801a      	strh	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	817b      	strh	r3, [r7, #10]
 800148a:	2300      	movs	r3, #0
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	2300      	movs	r3, #0
 8001490:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8c1b      	ldrh	r3, [r3, #32]
 8001496:	b29b      	uxth	r3, r3
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	8c1b      	ldrh	r3, [r3, #32]
 80014a6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	889b      	ldrh	r3, [r3, #4]
 80014ac:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	8b1b      	ldrh	r3, [r3, #24]
 80014b2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ba:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	881a      	ldrh	r2, [r3, #0]
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	f023 0302 	bic.w	r3, r3, #2
 80014d4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	899a      	ldrh	r2, [r3, #12]
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	4313      	orrs	r3, r2
 80014de:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	885a      	ldrh	r2, [r3, #2]
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <TIM_OC1Init+0xec>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d003      	beq.n	80014fa <TIM_OC1Init+0x7e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <TIM_OC1Init+0xf0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d123      	bne.n	8001542 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	f023 0308 	bic.w	r3, r3, #8
 8001500:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	89da      	ldrh	r2, [r3, #14]
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	4313      	orrs	r3, r2
 800150a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	889a      	ldrh	r2, [r3, #4]
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	4313      	orrs	r3, r2
 800151c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800152c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	8a1a      	ldrh	r2, [r3, #16]
 8001532:	89bb      	ldrh	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	8a5a      	ldrh	r2, [r3, #18]
 800153c:	89bb      	ldrh	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	89ba      	ldrh	r2, [r7, #12]
 8001546:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	897a      	ldrh	r2, [r7, #10]
 800154c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	89fa      	ldrh	r2, [r7, #14]
 800155a:	841a      	strh	r2, [r3, #32]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40010000 	.word	0x40010000
 800156c:	40010400 	.word	0x40010400

08001570 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	817b      	strh	r3, [r7, #10]
 800157e:	2300      	movs	r3, #0
 8001580:	81fb      	strh	r3, [r7, #14]
 8001582:	2300      	movs	r3, #0
 8001584:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8c1b      	ldrh	r3, [r3, #32]
 800158a:	b29b      	uxth	r3, r3
 800158c:	f023 0310 	bic.w	r3, r3, #16
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8c1b      	ldrh	r3, [r3, #32]
 800159a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	889b      	ldrh	r3, [r3, #4]
 80015a0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8b1b      	ldrh	r3, [r3, #24]
 80015a6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015ae:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	f023 0320 	bic.w	r3, r3, #32
 80015cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	899b      	ldrh	r3, [r3, #12]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	4313      	orrs	r3, r2
 80015da:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	885b      	ldrh	r3, [r3, #2]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <TIM_OC2Init+0x108>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d003      	beq.n	80015fa <TIM_OC2Init+0x8a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <TIM_OC2Init+0x10c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001600:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	89db      	ldrh	r3, [r3, #14]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	b29a      	uxth	r2, r3
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	4313      	orrs	r3, r2
 800160e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001616:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	b29a      	uxth	r2, r3
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	4313      	orrs	r3, r2
 8001624:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800162c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800162e:	89bb      	ldrh	r3, [r7, #12]
 8001630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001634:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	8a1b      	ldrh	r3, [r3, #16]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	b29a      	uxth	r2, r3
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	8a5b      	ldrh	r3, [r3, #18]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	b29a      	uxth	r2, r3
 800164c:	89bb      	ldrh	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	89ba      	ldrh	r2, [r7, #12]
 8001656:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	897a      	ldrh	r2, [r7, #10]
 800165c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	89fa      	ldrh	r2, [r7, #14]
 800166a:	841a      	strh	r2, [r3, #32]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	2300      	movs	r3, #0
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	2300      	movs	r3, #0
 8001694:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8c1b      	ldrh	r3, [r3, #32]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	8c1b      	ldrh	r3, [r3, #32]
 80016aa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8b9b      	ldrh	r3, [r3, #28]
 80016b6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80016b8:	897b      	ldrh	r3, [r7, #10]
 80016ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016be:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016d8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	899b      	ldrh	r3, [r3, #12]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	885b      	ldrh	r3, [r3, #2]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <TIM_OC3Init+0x104>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d003      	beq.n	8001706 <TIM_OC3Init+0x86>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <TIM_OC3Init+0x108>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d12b      	bne.n	800175e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800170c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	89db      	ldrh	r3, [r3, #14]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	4313      	orrs	r3, r2
 800171a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001722:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	4313      	orrs	r3, r2
 8001730:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001732:	89bb      	ldrh	r3, [r7, #12]
 8001734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001738:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001740:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	8a1b      	ldrh	r3, [r3, #16]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	b29a      	uxth	r2, r3
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	8a5b      	ldrh	r3, [r3, #18]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	b29a      	uxth	r2, r3
 8001758:	89bb      	ldrh	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	89ba      	ldrh	r2, [r7, #12]
 8001762:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	897a      	ldrh	r2, [r7, #10]
 8001768:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	89fa      	ldrh	r2, [r7, #14]
 8001776:	841a      	strh	r2, [r3, #32]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40010000 	.word	0x40010000
 8001788:	40010400 	.word	0x40010400

0800178c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	81bb      	strh	r3, [r7, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	817b      	strh	r3, [r7, #10]
 800179e:	2300      	movs	r3, #0
 80017a0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	8c1b      	ldrh	r3, [r3, #32]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8c1b      	ldrh	r3, [r3, #32]
 80017b6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	889b      	ldrh	r3, [r3, #4]
 80017bc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8b9b      	ldrh	r3, [r3, #28]
 80017c2:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017ca:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	89bb      	ldrh	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017e8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	899b      	ldrh	r3, [r3, #12]
 80017ee:	031b      	lsls	r3, r3, #12
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	031b      	lsls	r3, r3, #12
 80017fe:	b29a      	uxth	r2, r3
 8001800:	897b      	ldrh	r3, [r7, #10]
 8001802:	4313      	orrs	r3, r2
 8001804:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <TIM_OC4Init+0xc8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d003      	beq.n	8001816 <TIM_OC4Init+0x8a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <TIM_OC4Init+0xcc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10a      	bne.n	800182c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	8a1b      	ldrh	r3, [r3, #16]
 8001822:	019b      	lsls	r3, r3, #6
 8001824:	b29a      	uxth	r2, r3
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	4313      	orrs	r3, r2
 800182a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	89fa      	ldrh	r2, [r7, #14]
 8001830:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	89ba      	ldrh	r2, [r7, #12]
 8001836:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	897a      	ldrh	r2, [r7, #10]
 8001844:	841a      	strh	r2, [r3, #32]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40010000 	.word	0x40010000
 8001858:	40010400 	.word	0x40010400

0800185c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8b1b      	ldrh	r3, [r3, #24]
 8001870:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800187a:	89fa      	ldrh	r2, [r7, #14]
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	4313      	orrs	r3, r2
 8001880:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	89fa      	ldrh	r2, [r7, #14]
 8001886:	831a      	strh	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8b1b      	ldrh	r3, [r3, #24]
 80018a8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018b0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	89fa      	ldrh	r2, [r7, #14]
 80018c2:	831a      	strh	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8b9b      	ldrh	r3, [r3, #28]
 80018e4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	f023 0308 	bic.w	r3, r3, #8
 80018ec:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80018ee:	89fa      	ldrh	r2, [r7, #14]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	89fa      	ldrh	r2, [r7, #14]
 80018fa:	839a      	strh	r2, [r3, #28]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8b9b      	ldrh	r3, [r3, #28]
 800191c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001924:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b29a      	uxth	r2, r3
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	4313      	orrs	r3, r2
 8001930:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	89fa      	ldrh	r2, [r7, #14]
 8001936:	839a      	strh	r2, [r3, #28]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <main>:
uint32_t ReadUserButton = 0;
uint32_t RefreshTIM4 = 0;
uint32_t RefreshLCD = 0;

int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8001948:	f000 fd96 	bl	8002478 <SystemInit>

	//[1]Inicializacion de interrupcion por tiempo cada 50 mseg:
	INIT_SYSTICK(TimeINT_Systick);
 800194c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001990 <main+0x4c>
 8001950:	f000 f98e 	bl	8001c70 <INIT_SYSTICK>

	//Inicializacion del DISPLAY LCD:
	INIT_LCD_2x16(LCD_2X16);
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <main+0x50>)
 8001956:	f000 f931 	bl	8001bbc <INIT_LCD_2x16>

	//Inicializacion del TIM4:
	INIT_TIM4(OC1_Port, OC1);
 800195a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195e:	480e      	ldr	r0, [pc, #56]	; (8001998 <main+0x54>)
 8001960:	f000 f9a6 	bl	8001cb0 <INIT_TIM4>
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
    while(1)
    {
		//Task Scheduler:
		if(RefreshTIM4 == Ticks_RefreshTIM4)
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <main+0x58>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b0a      	cmp	r3, #10
 800196a:	d102      	bne.n	8001972 <main+0x2e>
			REFRESH_TIM4();
 800196c:	f000 f85a 	bl	8001a24 <REFRESH_TIM4>
 8001970:	e7f8      	b.n	8001964 <main+0x20>
		else if(ReadUserButton == Ticks_ReadUserButton)
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <main+0x5c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d102      	bne.n	8001980 <main+0x3c>
			READ_USER_BUTTON();
 800197a:	f000 f831 	bl	80019e0 <READ_USER_BUTTON>
 800197e:	e7f1      	b.n	8001964 <main+0x20>
		else if(RefreshLCD == Ticks_RefreshLCD)
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <main+0x60>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d1ed      	bne.n	8001964 <main+0x20>
			REFRESH_LCD();
 8001988:	f000 f862 	bl	8001a50 <REFRESH_LCD>
		if(RefreshTIM4 == Ticks_RefreshTIM4)
 800198c:	e7ea      	b.n	8001964 <main+0x20>
 800198e:	bf00      	nop
 8001990:	3d4ccccd 	.word	0x3d4ccccd
 8001994:	20000010 	.word	0x20000010
 8001998:	40020c00 	.word	0x40020c00
 800199c:	20000730 	.word	0x20000730
 80019a0:	2000072c 	.word	0x2000072c
 80019a4:	20000734 	.word	0x20000734

080019a8 <SysTick_Handler>:
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
//Interrupcion por tiempo - Systick cada 50mseg:
void SysTick_Handler()
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	ReadUserButton++;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <SysTick_Handler+0x2c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <SysTick_Handler+0x2c>)
 80019b4:	6013      	str	r3, [r2, #0]
	RefreshTIM4++;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SysTick_Handler+0x30>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <SysTick_Handler+0x30>)
 80019be:	6013      	str	r3, [r2, #0]
	RefreshLCD++;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SysTick_Handler+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SysTick_Handler+0x34>)
 80019c8:	6013      	str	r3, [r2, #0]
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	2000072c 	.word	0x2000072c
 80019d8:	20000730 	.word	0x20000730
 80019dc:	20000734 	.word	0x20000734

080019e0 <READ_USER_BUTTON>:
/*------------------------------------------------------------------------------
TAREAS:
------------------------------------------------------------------------------*/
//Lectura del UserButton:
void READ_USER_BUTTON()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	//Reinicio de los Ticks:
	ReadUserButton = 0;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <READ_USER_BUTTON+0x38>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

	//Si se presiona el boton, se aumenta el DT en un 25%:
	if(GPIO_ReadInputDataBit(UserButton_Port, UserButton))
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <READ_USER_BUTTON+0x3c>)
 80019f0:	f7ff fb4c 	bl	800108c <GPIO_ReadInputDataBit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <READ_USER_BUTTON+0x24>
		DutyCycle = DutyCycle + 15;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <READ_USER_BUTTON+0x40>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	330f      	adds	r3, #15
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <READ_USER_BUTTON+0x40>)
 8001a02:	6013      	str	r3, [r2, #0]

	//Si se llego al maximo DT, se reinicia:
	if(DutyCycle >= 100)
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <READ_USER_BUTTON+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b63      	cmp	r3, #99	; 0x63
 8001a0a:	d902      	bls.n	8001a12 <READ_USER_BUTTON+0x32>
		DutyCycle = 0;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <READ_USER_BUTTON+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000072c 	.word	0x2000072c
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	20000728 	.word	0x20000728

08001a24 <REFRESH_TIM4>:

//Refresco del TIM4:
void REFRESH_TIM4()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	//Reinicio de los Ticks:
	RefreshTIM4 = 0;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <REFRESH_TIM4+0x20>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

	//Seteo del OC1-TIM4 con un nuevo DT:
	SET_TIM4(OC1, TimeBase, Freq, DutyCycle);
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <REFRESH_TIM4+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001a36:	4905      	ldr	r1, [pc, #20]	; (8001a4c <REFRESH_TIM4+0x28>)
 8001a38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a3c:	f000 f96c 	bl	8001d18 <SET_TIM4>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000730 	.word	0x20000730
 8001a48:	20000728 	.word	0x20000728
 8001a4c:	00030d40 	.word	0x00030d40

08001a50 <REFRESH_LCD>:

//Refresco del LCD:
void REFRESH_LCD()
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b091      	sub	sp, #68	; 0x44
 8001a54:	af00      	add	r7, sp, #0
	//Reinicio de los Ticks:
	RefreshLCD = 0;
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <REFRESH_LCD+0xb8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

	//Refresco del LCD:
	CLEAR_LCD_2x16(LCD_2X16);
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <REFRESH_LCD+0xbc>)
 8001a5e:	f000 f8d5 	bl	8001c0c <CLEAR_LCD_2x16>
	char BufferFreq[BufferLength];
	char BufferVolt[BufferLength];
	char BufferDT[BufferLength];

	//Calculo del voltaje en base al DT:
	float Volt = DutyCycle * 3.3 / 100;
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <REFRESH_LCD+0xc0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd5c 	bl	8000524 <__aeabi_ui2d>
 8001a6c:	a324      	add	r3, pc, #144	; (adr r3, 8001b00 <REFRESH_LCD+0xb0>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fdcd 	bl	8000610 <__aeabi_dmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <REFRESH_LCD+0xc4>)
 8001a84:	f7fe feee 	bl	8000864 <__aeabi_ddiv>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f7ff f896 	bl	8000bc0 <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Mostrar valor de frecuencia:
	sprintf(BufferFreq, "FREQ = %d", Freq);
 8001a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001aa0:	491d      	ldr	r1, [pc, #116]	; (8001b18 <REFRESH_LCD+0xc8>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fe3a 	bl	800271c <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 3, 0, BufferFreq);
 8001aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aac:	2200      	movs	r2, #0
 8001aae:	2103      	movs	r1, #3
 8001ab0:	4816      	ldr	r0, [pc, #88]	; (8001b0c <REFRESH_LCD+0xbc>)
 8001ab2:	f000 f8bb 	bl	8001c2c <PRINT_LCD_2x16>

	//Mostrar valor del DT:
	sprintf(BufferDT, "DT = %d", DutyCycle);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <REFRESH_LCD+0xc0>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	463b      	mov	r3, r7
 8001abc:	4917      	ldr	r1, [pc, #92]	; (8001b1c <REFRESH_LCD+0xcc>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fe2c 	bl	800271c <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 0, 1, BufferDT);
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4810      	ldr	r0, [pc, #64]	; (8001b0c <REFRESH_LCD+0xbc>)
 8001acc:	f000 f8ae 	bl	8001c2c <PRINT_LCD_2x16>

	//Mostrar valor de voltaje:
	sprintf(BufferVolt, "V = %.1f", Volt);
 8001ad0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ad2:	f7fe fd49 	bl	8000568 <__aeabi_f2d>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	f107 0014 	add.w	r0, r7, #20
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	490f      	ldr	r1, [pc, #60]	; (8001b20 <REFRESH_LCD+0xd0>)
 8001ae4:	f000 fe1a 	bl	800271c <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 9, 1, BufferVolt);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2201      	movs	r2, #1
 8001aee:	2109      	movs	r1, #9
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <REFRESH_LCD+0xbc>)
 8001af2:	f000 f89b 	bl	8001c2c <PRINT_LCD_2x16>
}
 8001af6:	bf00      	nop
 8001af8:	3744      	adds	r7, #68	; 0x44
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	66666666 	.word	0x66666666
 8001b04:	400a6666 	.word	0x400a6666
 8001b08:	20000734 	.word	0x20000734
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000728 	.word	0x20000728
 8001b14:	40590000 	.word	0x40590000
 8001b18:	08005530 	.word	0x08005530
 8001b1c:	0800553c 	.word	0x0800553c
 8001b20:	08005544 	.word	0x08005544

08001b24 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da0b      	bge.n	8001b50 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001b38:	490d      	ldr	r1, [pc, #52]	; (8001b70 <NVIC_SetPriority+0x4c>)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	3b04      	subs	r3, #4
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001b4e:	e009      	b.n	8001b64 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001b50:	4908      	ldr	r1, [pc, #32]	; (8001b74 <NVIC_SetPriority+0x50>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b9c:	f7ff ffc2 	bl	8001b24 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f9b7 	bl	8001f38 <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <INIT_LCD_2x16+0x4c>)
 8001bcc:	f000 fa47 	bl	800205e <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa54 	bl	800207e <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f000 faac 	bl	8002136 <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	2006      	movs	r0, #6
 8001be2:	f000 faa8 	bl	8002136 <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	200c      	movs	r0, #12
 8001bea:	f000 faa4 	bl	8002136 <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 faa0 	bl	8002136 <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001bf6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bfa:	f000 fa30 	bl	800205e <P_LCD_2x16_Delay>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	000186a0 	.word	0x000186a0

08001c0c <CLEAR_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- UB_LCD_2x16_Clear(LCD_2X16);
******************************************************************************/
void CLEAR_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  // Display l�schen
  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 fa8d 	bl	8002136 <P_LCD_2x16_Cmd>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c20:	f000 fa1d 	bl	800205e <P_LCD_2x16_Delay>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <PRINT_LCD_2x16>:

	* @ej
		- PRINT_LCD_2x16(LCD_2X16, 0, 0, STR);
******************************************************************************/
void PRINT_LCD_2x16(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y, char *ptr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	72fb      	strb	r3, [r7, #11]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	72bb      	strb	r3, [r7, #10]
  // Cursor setzen
  P_LCD_2x16_Cursor(LCD_2X16,x,y);
 8001c3e:	7aba      	ldrb	r2, [r7, #10]
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	4619      	mov	r1, r3
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 faf9 	bl	800223c <P_LCD_2x16_Cursor>
  // kompletten String ausgeben
  while (*ptr != 0) {
 8001c4a:	e008      	b.n	8001c5e <PRINT_LCD_2x16+0x32>
    P_LCD_2x16_Data(*ptr, LCD_2X16);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fb18 	bl	8002288 <P_LCD_2x16_Data>
    ptr++;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
  while (*ptr != 0) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f2      	bne.n	8001c4c <PRINT_LCD_2x16+0x20>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <INIT_SYSTICK>:

	* @ej
		- INIT_SYSTICK(1/1000); //Interrupcion cada 1 mseg.
******************************************************************************/
void INIT_SYSTICK(float div)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick_Config(SystemCoreClock * div);
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <INIT_SYSTICK+0x3c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c92:	ee17 0a90 	vmov	r0, s15
 8001c96:	f7ff ff6f 	bl	8001b78 <SysTick_Config>
	RCC_ClocksTypeDef Clocks_Values;
	RCC_GetClocksFreq(&Clocks_Values);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fa58 	bl	8001154 <RCC_GetClocksFreq>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000088 	.word	0x20000088

08001cb0 <INIT_TIM4>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void INIT_TIM4(GPIO_TypeDef* Port, uint16_t Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
	  GPIO_InitTypeDef GPIO_InitStructure;


	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2004      	movs	r0, #4
 8001cc0:	f7ff fb10 	bl	80012e4 <RCC_APB1PeriphClockCmd>
	  //Habilitacion de la senal de reloj para el periferico:
	  uint32_t Clock;
	  Clock = FIND_CLOCK(Port);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8eb 	bl	8001ea0 <FIND_CLOCK>
 8001cca:	6178      	str	r0, [r7, #20]
	  RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8001ccc:	2101      	movs	r1, #1
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff fae8 	bl	80012a4 <RCC_AHB1PeriphClockCmd>

	  /* GPIOC Configuration: TIM4 CH1 (PD12),CH2 (PD13),CH3 (PD14)CH4 (PD15) */
	  GPIO_InitStructure.GPIO_Pin = Pin;
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	733b      	strb	r3, [r7, #12]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	737b      	strb	r3, [r7, #13]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
	  GPIO_Init(Port, &GPIO_InitStructure);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff f93e 	bl	8000f70 <GPIO_Init>

	  //Definición de GPIO_PinSourceXX:
	  uint8_t PinSource;
	  PinSource = FIND_PINSOURCE(Pin);
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fb49 	bl	800238e <FIND_PINSOURCE>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	74fb      	strb	r3, [r7, #19]

	  /* Connect TIM4 pins to AF2 */
	  GPIO_PinAFConfig(Port, PinSource, GPIO_AF_TIM4);
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2202      	movs	r2, #2
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff f9d9 	bl	80010c0 <GPIO_PinAFConfig>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SET_TIM4>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM4(uint16_t Pin, uint32_t TimeBase, uint32_t Freq, uint32_t DutyCycle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4603      	mov	r3, r0
 8001d26:	81fb      	strh	r3, [r7, #14]
	uint32_t DT_Value;
	uint16_t PrescalerValue = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	82fb      	strh	r3, [r7, #22]
	uint16_t TIM_Period = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	82bb      	strh	r3, [r7, #20]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8001d30:	f000 fbd8 	bl	80024e4 <SystemCoreClockUpdate>
	TIM_ARRPreloadConfig(TIM4, DISABLE);
 8001d34:	2100      	movs	r1, #0
 8001d36:	4855      	ldr	r0, [pc, #340]	; (8001e8c <SET_TIM4+0x174>)
 8001d38:	f7ff fb60 	bl	80013fc <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM4, DISABLE);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4853      	ldr	r0, [pc, #332]	; (8001e8c <SET_TIM4+0x174>)
 8001d40:	f7ff fb7c 	bl	800143c <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8001d44:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <SET_TIM4+0x178>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	085a      	lsrs	r2, r3, #1
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	82fb      	strh	r3, [r7, #22]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <SET_TIM4+0x17c>)
 8001d62:	6053      	str	r3, [r2, #4]
	TIM_Period = TimeBase / Freq - 1;
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	82bb      	strh	r3, [r7, #20]

	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8001d72:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <SET_TIM4+0x17c>)
 8001d74:	8afb      	ldrh	r3, [r7, #22]
 8001d76:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <SET_TIM4+0x17c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001d7e:	4b45      	ldr	r3, [pc, #276]	; (8001e94 <SET_TIM4+0x17c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8001d84:	4943      	ldr	r1, [pc, #268]	; (8001e94 <SET_TIM4+0x17c>)
 8001d86:	4841      	ldr	r0, [pc, #260]	; (8001e8c <SET_TIM4+0x174>)
 8001d88:	f7ff facc 	bl	8001324 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1*/
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <SET_TIM4+0x180>)
 8001d8e:	2260      	movs	r2, #96	; 0x60
 8001d90:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <SET_TIM4+0x180>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	819a      	strh	r2, [r3, #12]

	//Configuración del Duty Cycle para cada pin:
	DT_Value = DutyCycle * (TIM_Period + 1) / 100;
 8001d98:	8abb      	ldrh	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	fb03 f302 	mul.w	r3, r3, r2
 8001da4:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <SET_TIM4+0x184>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	613b      	str	r3, [r7, #16]

	if (Pin == GPIO_Pin_12) {
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	d114      	bne.n	8001de0 <SET_TIM4+0xc8>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <SET_TIM4+0x180>)
 8001db8:	2260      	movs	r2, #96	; 0x60
 8001dba:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <SET_TIM4+0x180>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8001dc2:	4a35      	ldr	r2, [pc, #212]	; (8001e98 <SET_TIM4+0x180>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <SET_TIM4+0x180>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	819a      	strh	r2, [r3, #12]

		TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8001dce:	4932      	ldr	r1, [pc, #200]	; (8001e98 <SET_TIM4+0x180>)
 8001dd0:	482e      	ldr	r0, [pc, #184]	; (8001e8c <SET_TIM4+0x174>)
 8001dd2:	f7ff fb53 	bl	800147c <TIM_OC1Init>

		TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	482c      	ldr	r0, [pc, #176]	; (8001e8c <SET_TIM4+0x174>)
 8001dda:	f7ff fd3f 	bl	800185c <TIM_OC1PreloadConfig>
 8001dde:	e049      	b.n	8001e74 <SET_TIM4+0x15c>
	} else if (Pin == GPIO_Pin_13) {
 8001de0:	89fb      	ldrh	r3, [r7, #14]
 8001de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de6:	d114      	bne.n	8001e12 <SET_TIM4+0xfa>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <SET_TIM4+0x180>)
 8001dea:	2260      	movs	r2, #96	; 0x60
 8001dec:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <SET_TIM4+0x180>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8001df4:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <SET_TIM4+0x180>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <SET_TIM4+0x180>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	819a      	strh	r2, [r3, #12]

		TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8001e00:	4925      	ldr	r1, [pc, #148]	; (8001e98 <SET_TIM4+0x180>)
 8001e02:	4822      	ldr	r0, [pc, #136]	; (8001e8c <SET_TIM4+0x174>)
 8001e04:	f7ff fbb4 	bl	8001570 <TIM_OC2Init>

		TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001e08:	2108      	movs	r1, #8
 8001e0a:	4820      	ldr	r0, [pc, #128]	; (8001e8c <SET_TIM4+0x174>)
 8001e0c:	f7ff fd42 	bl	8001894 <TIM_OC2PreloadConfig>
 8001e10:	e030      	b.n	8001e74 <SET_TIM4+0x15c>
	} else if (Pin == GPIO_Pin_14) {
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e18:	d114      	bne.n	8001e44 <SET_TIM4+0x12c>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <SET_TIM4+0x180>)
 8001e1c:	2260      	movs	r2, #96	; 0x60
 8001e1e:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <SET_TIM4+0x180>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <SET_TIM4+0x180>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <SET_TIM4+0x180>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	819a      	strh	r2, [r3, #12]

		TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8001e32:	4919      	ldr	r1, [pc, #100]	; (8001e98 <SET_TIM4+0x180>)
 8001e34:	4815      	ldr	r0, [pc, #84]	; (8001e8c <SET_TIM4+0x174>)
 8001e36:	f7ff fc23 	bl	8001680 <TIM_OC3Init>

		TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <SET_TIM4+0x174>)
 8001e3e:	f7ff fd47 	bl	80018d0 <TIM_OC3PreloadConfig>
 8001e42:	e017      	b.n	8001e74 <SET_TIM4+0x15c>
	} else if (Pin == GPIO_Pin_15) {
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4a:	d113      	bne.n	8001e74 <SET_TIM4+0x15c>
		/* PWM1 Mode configuration: Channel1 : para TIM4 es PD12 */
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <SET_TIM4+0x180>)
 8001e4e:	2260      	movs	r2, #96	; 0x60
 8001e50:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <SET_TIM4+0x180>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	805a      	strh	r2, [r3, #2]
		TIM_OCInitStructure.TIM_Pulse = DT_Value;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <SET_TIM4+0x180>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6093      	str	r3, [r2, #8]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <SET_TIM4+0x180>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	819a      	strh	r2, [r3, #12]

		TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <SET_TIM4+0x180>)
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <SET_TIM4+0x174>)
 8001e68:	f7ff fc90 	bl	800178c <TIM_OC4Init>

		TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <SET_TIM4+0x174>)
 8001e70:	f7ff fd4a 	bl	8001908 <TIM_OC4PreloadConfig>
	}

	//Cargar valores al TIM4:
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8001e74:	2101      	movs	r1, #1
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <SET_TIM4+0x174>)
 8001e78:	f7ff fac0 	bl	80013fc <TIM_ARRPreloadConfig>
    TIM_Cmd(TIM4, ENABLE);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <SET_TIM4+0x174>)
 8001e80:	f7ff fadc 	bl	800143c <TIM_Cmd>
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	20000088 	.word	0x20000088
 8001e94:	20000770 	.word	0x20000770
 8001e98:	2000077c 	.word	0x2000077c
 8001e9c:	51eb851f 	.word	0x51eb851f

08001ea0 <FIND_CLOCK>:
/*------------------------------------------------------------------------------
 FUNCIONES INTERNAS:
------------------------------------------------------------------------------*/
//General:
uint32_t FIND_CLOCK(GPIO_TypeDef* Port)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	uint32_t Clock;

	if		(Port == GPIOA) Clock = RCC_AHB1Periph_GPIOA;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <FIND_CLOCK+0x7c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <FIND_CLOCK+0x16>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e02b      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOB) Clock = RCC_AHB1Periph_GPIOB;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <FIND_CLOCK+0x80>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <FIND_CLOCK+0x24>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e024      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOC) Clock = RCC_AHB1Periph_GPIOC;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <FIND_CLOCK+0x84>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <FIND_CLOCK+0x32>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e01d      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOD) Clock = RCC_AHB1Periph_GPIOD;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <FIND_CLOCK+0x88>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d102      	bne.n	8001ee0 <FIND_CLOCK+0x40>
 8001eda:	2308      	movs	r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e016      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOE) Clock = RCC_AHB1Periph_GPIOE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <FIND_CLOCK+0x8c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d102      	bne.n	8001eee <FIND_CLOCK+0x4e>
 8001ee8:	2310      	movs	r3, #16
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e00f      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOF) Clock = RCC_AHB1Periph_GPIOF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <FIND_CLOCK+0x90>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d102      	bne.n	8001efc <FIND_CLOCK+0x5c>
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e008      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else if (Port == GPIOG) Clock = RCC_AHB1Periph_GPIOG;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <FIND_CLOCK+0x94>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <FIND_CLOCK+0x6a>
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e001      	b.n	8001f0e <FIND_CLOCK+0x6e>
	else 					Clock = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

	return Clock;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021400 	.word	0x40021400
 8001f34:	40021800 	.word	0x40021800

08001f38 <P_LCD_2x16_InitIO>:
	return Channel;
}

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
 8001f44:	e046      	b.n	8001fd4 <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 8001f46:	7dfa      	ldrb	r2, [r7, #23]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f9a2 	bl	80012a4 <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 8001f60:	7dfa      	ldrb	r2, [r7, #23]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	891b      	ldrh	r3, [r3, #8]
 8001f72:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001f74:	2301      	movs	r3, #1
 8001f76:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f80:	2302      	movs	r3, #2
 8001f82:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8001f84:	7dfa      	ldrb	r2, [r7, #23]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe ffe7 	bl	8000f70 <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 8001fa2:	7dfa      	ldrb	r2, [r7, #23]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	7c1b      	ldrb	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f810 	bl	8001fe2 <P_LCD_2x16_PinLo>
 8001fc2:	e004      	b.n	8001fce <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f829 	bl	8002020 <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d9b5      	bls.n	8001f46 <P_LCD_2x16_InitIO+0xe>
	}
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	6039      	str	r1, [r7, #0]
 8001fec:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	461a      	mov	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	891b      	ldrh	r3, [r3, #8]
 8002012:	834b      	strh	r3, [r1, #26]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	891b      	ldrh	r3, [r3, #8]
 8002050:	830b      	strh	r3, [r1, #24]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8002066:	bf00      	nop
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1e5a      	subs	r2, r3, #1
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1fa      	bne.n	8002068 <P_LCD_2x16_Delay+0xa>
  {
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	2002      	movs	r0, #2
 800208a:	f7ff ffc9 	bl	8002020 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	2003      	movs	r0, #3
 8002092:	f7ff ffc5 	bl	8002020 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	2004      	movs	r0, #4
 800209a:	f7ff ffa2 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	2005      	movs	r0, #5
 80020a2:	f7ff ff9e 	bl	8001fe2 <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f82d 	bl	8002106 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80020ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020b0:	f7ff ffd5 	bl	800205e <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f826 	bl	8002106 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80020ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020be:	f7ff ffce 	bl	800205e <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f81f 	bl	8002106 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80020c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020cc:	f7ff ffc7 	bl	800205e <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7ff ff85 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	2003      	movs	r0, #3
 80020dc:	f7ff ffa0 	bl	8002020 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	2004      	movs	r0, #4
 80020e4:	f7ff ff7d 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	2005      	movs	r0, #5
 80020ec:	f7ff ff79 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f808 	bl	8002106 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80020f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020fa:	f7ff ffb0 	bl	800205e <P_LCD_2x16_Delay>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	2001      	movs	r0, #1
 8002112:	f7ff ff85 	bl	8002020 <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8002116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800211a:	f7ff ffa0 	bl	800205e <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	2001      	movs	r0, #1
 8002122:	f7ff ff5e 	bl	8001fe2 <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8002126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212a:	f7ff ff98 	bl	800205e <P_LCD_2x16_Delay>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	6039      	str	r1, [r7, #0]
 8002140:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff ff4c 	bl	8001fe2 <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da04      	bge.n	800215c <P_LCD_2x16_Cmd+0x26>
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	2005      	movs	r0, #5
 8002156:	f7ff ff63 	bl	8002020 <P_LCD_2x16_PinHi>
 800215a:	e003      	b.n	8002164 <P_LCD_2x16_Cmd+0x2e>
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	2005      	movs	r0, #5
 8002160:	f7ff ff3f 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <P_LCD_2x16_Cmd+0x42>
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	2004      	movs	r0, #4
 8002172:	f7ff ff55 	bl	8002020 <P_LCD_2x16_PinHi>
 8002176:	e003      	b.n	8002180 <P_LCD_2x16_Cmd+0x4a>
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	2004      	movs	r0, #4
 800217c:	f7ff ff31 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <P_LCD_2x16_Cmd+0x5e>
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	2003      	movs	r0, #3
 800218e:	f7ff ff47 	bl	8002020 <P_LCD_2x16_PinHi>
 8002192:	e003      	b.n	800219c <P_LCD_2x16_Cmd+0x66>
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	2003      	movs	r0, #3
 8002198:	f7ff ff23 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <P_LCD_2x16_Cmd+0x7a>
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7ff ff39 	bl	8002020 <P_LCD_2x16_PinHi>
 80021ae:	e003      	b.n	80021b8 <P_LCD_2x16_Cmd+0x82>
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	2002      	movs	r0, #2
 80021b4:	f7ff ff15 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f7ff ffa4 	bl	8002106 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <P_LCD_2x16_Cmd+0x9c>
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	2005      	movs	r0, #5
 80021cc:	f7ff ff28 	bl	8002020 <P_LCD_2x16_PinHi>
 80021d0:	e003      	b.n	80021da <P_LCD_2x16_Cmd+0xa4>
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	2005      	movs	r0, #5
 80021d6:	f7ff ff04 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <P_LCD_2x16_Cmd+0xb8>
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	2004      	movs	r0, #4
 80021e8:	f7ff ff1a 	bl	8002020 <P_LCD_2x16_PinHi>
 80021ec:	e003      	b.n	80021f6 <P_LCD_2x16_Cmd+0xc0>
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	2004      	movs	r0, #4
 80021f2:	f7ff fef6 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <P_LCD_2x16_Cmd+0xd4>
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	2003      	movs	r0, #3
 8002204:	f7ff ff0c 	bl	8002020 <P_LCD_2x16_PinHi>
 8002208:	e003      	b.n	8002212 <P_LCD_2x16_Cmd+0xdc>
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	2003      	movs	r0, #3
 800220e:	f7ff fee8 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <P_LCD_2x16_Cmd+0xf0>
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	2002      	movs	r0, #2
 8002220:	f7ff fefe 	bl	8002020 <P_LCD_2x16_PinHi>
 8002224:	e003      	b.n	800222e <P_LCD_2x16_Cmd+0xf8>
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	2002      	movs	r0, #2
 800222a:	f7ff feda 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f7ff ff69 	bl	8002106 <P_LCD_2x16_Clk>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <P_LCD_2x16_Cursor>:

void P_LCD_2x16_Cursor(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
 8002248:	4613      	mov	r3, r2
 800224a:	70bb      	strb	r3, [r7, #2]
  uint8_t wert;

  if(x>=TLCD_MAXX) x=0;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d901      	bls.n	8002256 <P_LCD_2x16_Cursor+0x1a>
 8002252:	2300      	movs	r3, #0
 8002254:	70fb      	strb	r3, [r7, #3]
  if(y>=TLCD_MAXY) y=0;
 8002256:	78bb      	ldrb	r3, [r7, #2]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d901      	bls.n	8002260 <P_LCD_2x16_Cursor+0x24>
 800225c:	2300      	movs	r3, #0
 800225e:	70bb      	strb	r3, [r7, #2]

  wert=(y<<6);
 8002260:	78bb      	ldrb	r3, [r7, #2]
 8002262:	019b      	lsls	r3, r3, #6
 8002264:	73fb      	strb	r3, [r7, #15]
  wert|=x;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	4313      	orrs	r3, r2
 800226c:	73fb      	strb	r3, [r7, #15]
  wert|=0x80;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002274:	73fb      	strb	r3, [r7, #15]
  P_LCD_2x16_Cmd(wert,LCD_2X16);
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff5b 	bl	8002136 <P_LCD_2x16_Cmd>
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <P_LCD_2x16_Data>:

void P_LCD_2x16_Data(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  // RS=Hi (Data)
  P_LCD_2x16_PinHi(TLCD_RS, LCD_2X16);
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff fec2 	bl	8002020 <P_LCD_2x16_PinHi>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da04      	bge.n	80022ae <P_LCD_2x16_Data+0x26>
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	2005      	movs	r0, #5
 80022a8:	f7ff feba 	bl	8002020 <P_LCD_2x16_PinHi>
 80022ac:	e003      	b.n	80022b6 <P_LCD_2x16_Data+0x2e>
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	2005      	movs	r0, #5
 80022b2:	f7ff fe96 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <P_LCD_2x16_Data+0x42>
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	2004      	movs	r0, #4
 80022c4:	f7ff feac 	bl	8002020 <P_LCD_2x16_PinHi>
 80022c8:	e003      	b.n	80022d2 <P_LCD_2x16_Data+0x4a>
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	2004      	movs	r0, #4
 80022ce:	f7ff fe88 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <P_LCD_2x16_Data+0x5e>
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	2003      	movs	r0, #3
 80022e0:	f7ff fe9e 	bl	8002020 <P_LCD_2x16_PinHi>
 80022e4:	e003      	b.n	80022ee <P_LCD_2x16_Data+0x66>
 80022e6:	6839      	ldr	r1, [r7, #0]
 80022e8:	2003      	movs	r0, #3
 80022ea:	f7ff fe7a 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <P_LCD_2x16_Data+0x7a>
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7ff fe90 	bl	8002020 <P_LCD_2x16_PinHi>
 8002300:	e003      	b.n	800230a <P_LCD_2x16_Data+0x82>
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	2002      	movs	r0, #2
 8002306:	f7ff fe6c 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f7ff fefb 	bl	8002106 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <P_LCD_2x16_Data+0x9c>
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	2005      	movs	r0, #5
 800231e:	f7ff fe7f 	bl	8002020 <P_LCD_2x16_PinHi>
 8002322:	e003      	b.n	800232c <P_LCD_2x16_Data+0xa4>
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	2005      	movs	r0, #5
 8002328:	f7ff fe5b 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <P_LCD_2x16_Data+0xb8>
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	2004      	movs	r0, #4
 800233a:	f7ff fe71 	bl	8002020 <P_LCD_2x16_PinHi>
 800233e:	e003      	b.n	8002348 <P_LCD_2x16_Data+0xc0>
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	2004      	movs	r0, #4
 8002344:	f7ff fe4d 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <P_LCD_2x16_Data+0xd4>
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	2003      	movs	r0, #3
 8002356:	f7ff fe63 	bl	8002020 <P_LCD_2x16_PinHi>
 800235a:	e003      	b.n	8002364 <P_LCD_2x16_Data+0xdc>
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	2003      	movs	r0, #3
 8002360:	f7ff fe3f 	bl	8001fe2 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <P_LCD_2x16_Data+0xf0>
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	2002      	movs	r0, #2
 8002372:	f7ff fe55 	bl	8002020 <P_LCD_2x16_PinHi>
 8002376:	e003      	b.n	8002380 <P_LCD_2x16_Data+0xf8>
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	2002      	movs	r0, #2
 800237c:	f7ff fe31 	bl	8001fe2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f7ff fec0 	bl	8002106 <P_LCD_2x16_Clk>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <FIND_PINSOURCE>:

//Configuración del TIM4:
uint8_t FIND_PINSOURCE(uint32_t Pin)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	if     (Pin == GPIO_Pin_12) return GPIO_PinSource12;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d101      	bne.n	80023a2 <FIND_PINSOURCE+0x14>
 800239e:	230c      	movs	r3, #12
 80023a0:	e011      	b.n	80023c6 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_13) return GPIO_PinSource13;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a8:	d101      	bne.n	80023ae <FIND_PINSOURCE+0x20>
 80023aa:	230d      	movs	r3, #13
 80023ac:	e00b      	b.n	80023c6 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_14) return GPIO_PinSource14;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b4:	d101      	bne.n	80023ba <FIND_PINSOURCE+0x2c>
 80023b6:	230e      	movs	r3, #14
 80023b8:	e005      	b.n	80023c6 <FIND_PINSOURCE+0x38>
	else if(Pin == GPIO_Pin_15) return GPIO_PinSource15;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d101      	bne.n	80023c6 <FIND_PINSOURCE+0x38>
 80023c2:	230f      	movs	r3, #15
 80023c4:	e7ff      	b.n	80023c6 <FIND_PINSOURCE+0x38>
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023da:	e003      	b.n	80023e4 <LoopCopyDataInit>

080023dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023e2:	3104      	adds	r1, #4

080023e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023ec:	d3f6      	bcc.n	80023dc <CopyDataInit>
  ldr  r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023f0:	e002      	b.n	80023f8 <LoopFillZerobss>

080023f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023f4:	f842 3b04 	str.w	r3, [r2], #4

080023f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023fc:	d3f9      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fe:	f000 f83b 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f000 f967 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fa9d 	bl	8001944 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800240c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002410:	080057c8 	.word	0x080057c8
  ldr  r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002418:	2000070c 	.word	0x2000070c
  ldr  r2, =_sbss
 800241c:	2000070c 	.word	0x2000070c
  ldr  r3, = _ebss
 8002420:	200007a0 	.word	0x200007a0

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>

08002426 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002438:	e7fe      	b.n	8002438 <HardFault_Handler+0x4>

0800243a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800243e:	e7fe      	b.n	800243e <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002444:	e7fe      	b.n	8002444 <BusFault_Handler+0x4>

08002446 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800244a:	e7fe      	b.n	800244a <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <SystemInit+0x60>)
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <SystemInit+0x60>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <SystemInit+0x64>)
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <SystemInit+0x64>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <SystemInit+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <SystemInit+0x64>)
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <SystemInit+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <SystemInit+0x64>)
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <SystemInit+0x68>)
 80024b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <SystemInit+0x64>)
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <SystemInit+0x64>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80024c6:	f000 f889 	bl	80025dc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024ca:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <SystemInit+0x60>)
 80024cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024d0:	609a      	str	r2, [r3, #8]
#endif
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00
 80024dc:	40023800 	.word	0x40023800
 80024e0:	24003010 	.word	0x24003010

080024e4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	2302      	movs	r3, #2
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2302      	movs	r3, #2
 80024fc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d007      	beq.n	800251e <SystemCoreClockUpdate+0x3a>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d009      	beq.n	8002526 <SystemCoreClockUpdate+0x42>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d13d      	bne.n	8002592 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 8002518:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <SystemCoreClockUpdate+0xec>)
 800251a:	601a      	str	r2, [r3, #0]
      break;
 800251c:	e03d      	b.n	800259a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 8002520:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <SystemCoreClockUpdate+0xf0>)
 8002522:	601a      	str	r2, [r3, #0]
      break;
 8002524:	e039      	b.n	800259a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0d9b      	lsrs	r3, r3, #22
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002542:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <SystemCoreClockUpdate+0xf0>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 800254c:	6852      	ldr	r2, [r2, #4]
 800254e:	0992      	lsrs	r2, r2, #6
 8002550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e00b      	b.n	8002574 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800255c:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <SystemCoreClockUpdate+0xec>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 8002566:	6852      	ldr	r2, [r2, #4]
 8002568:	0992      	lsrs	r2, r2, #6
 800256a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 800258e:	6013      	str	r3, [r2, #0]
      break;
 8002590:	e003      	b.n	800259a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <SystemCoreClockUpdate+0xec>)
 8002596:	601a      	str	r2, [r3, #0]
      break;
 8002598:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <SystemCoreClockUpdate+0xe4>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <SystemCoreClockUpdate+0xf4>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <SystemCoreClockUpdate+0xe8>)
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	20000088 	.word	0x20000088
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	2000008c 	.word	0x2000008c

080025dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80025ea:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <SetSysClock+0xe8>)
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <SetSysClock+0xe8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <SetSysClock+0xe8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <SetSysClock+0x38>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002612:	d1f0      	bne.n	80025f6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <SetSysClock+0xe8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002620:	2301      	movs	r3, #1
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	e001      	b.n	800262a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d142      	bne.n	80026b6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <SetSysClock+0xe8>)
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <SetSysClock+0xe8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <SetSysClock+0xec>)
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <SetSysClock+0xec>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002646:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002648:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <SetSysClock+0xe8>)
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <SetSysClock+0xe8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <SetSysClock+0xe8>)
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <SetSysClock+0xe8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <SetSysClock+0xe8>)
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <SetSysClock+0xe8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002666:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <SetSysClock+0xe8>)
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <SetSysClock+0xf0>)
 800266c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <SetSysClock+0xe8>)
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <SetSysClock+0xe8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002678:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800267a:	bf00      	nop
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <SetSysClock+0xe8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f9      	beq.n	800267c <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <SetSysClock+0xf4>)
 800268a:	f240 7205 	movw	r2, #1797	; 0x705
 800268e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002690:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <SetSysClock+0xe8>)
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <SetSysClock+0xe8>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <SetSysClock+0xe8>)
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <SetSysClock+0xe8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80026a8:	bf00      	nop
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <SetSysClock+0xe8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d1f9      	bne.n	80026aa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000
 80026cc:	07402d04 	.word	0x07402d04
 80026d0:	40023c00 	.word	0x40023c00

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	4e0d      	ldr	r6, [pc, #52]	; (800270c <__libc_init_array+0x38>)
 80026d8:	4c0d      	ldr	r4, [pc, #52]	; (8002710 <__libc_init_array+0x3c>)
 80026da:	1ba4      	subs	r4, r4, r6
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	2500      	movs	r5, #0
 80026e0:	42a5      	cmp	r5, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	4e0b      	ldr	r6, [pc, #44]	; (8002714 <__libc_init_array+0x40>)
 80026e6:	4c0c      	ldr	r4, [pc, #48]	; (8002718 <__libc_init_array+0x44>)
 80026e8:	f002 ff14 	bl	8005514 <_init>
 80026ec:	1ba4      	subs	r4, r4, r6
 80026ee:	10a4      	asrs	r4, r4, #2
 80026f0:	2500      	movs	r5, #0
 80026f2:	42a5      	cmp	r5, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026fc:	4798      	blx	r3
 80026fe:	3501      	adds	r5, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002706:	4798      	blx	r3
 8002708:	3501      	adds	r5, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	080057c0 	.word	0x080057c0
 8002710:	080057c0 	.word	0x080057c0
 8002714:	080057c0 	.word	0x080057c0
 8002718:	080057c4 	.word	0x080057c4

0800271c <sprintf>:
 800271c:	b40e      	push	{r1, r2, r3}
 800271e:	b500      	push	{lr}
 8002720:	b09c      	sub	sp, #112	; 0x70
 8002722:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002726:	ab1d      	add	r3, sp, #116	; 0x74
 8002728:	f8ad 1014 	strh.w	r1, [sp, #20]
 800272c:	9002      	str	r0, [sp, #8]
 800272e:	9006      	str	r0, [sp, #24]
 8002730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002734:	480a      	ldr	r0, [pc, #40]	; (8002760 <sprintf+0x44>)
 8002736:	9104      	str	r1, [sp, #16]
 8002738:	9107      	str	r1, [sp, #28]
 800273a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800273e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002742:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002746:	6800      	ldr	r0, [r0, #0]
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	a902      	add	r1, sp, #8
 800274c:	f000 f80c 	bl	8002768 <_svfprintf_r>
 8002750:	9b02      	ldr	r3, [sp, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	b01c      	add	sp, #112	; 0x70
 8002758:	f85d eb04 	ldr.w	lr, [sp], #4
 800275c:	b003      	add	sp, #12
 800275e:	4770      	bx	lr
 8002760:	2000009c 	.word	0x2000009c
 8002764:	00000000 	.word	0x00000000

08002768 <_svfprintf_r>:
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	b0bd      	sub	sp, #244	; 0xf4
 800276e:	468a      	mov	sl, r1
 8002770:	4615      	mov	r5, r2
 8002772:	461f      	mov	r7, r3
 8002774:	4683      	mov	fp, r0
 8002776:	f001 fe25 	bl	80043c4 <_localeconv_r>
 800277a:	6803      	ldr	r3, [r0, #0]
 800277c:	930d      	str	r3, [sp, #52]	; 0x34
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd86 	bl	8000290 <strlen>
 8002784:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002788:	9008      	str	r0, [sp, #32]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	d518      	bpl.n	80027c0 <_svfprintf_r+0x58>
 800278e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002792:	b9ab      	cbnz	r3, 80027c0 <_svfprintf_r+0x58>
 8002794:	2140      	movs	r1, #64	; 0x40
 8002796:	4658      	mov	r0, fp
 8002798:	f001 fe2a 	bl	80043f0 <_malloc_r>
 800279c:	f8ca 0000 	str.w	r0, [sl]
 80027a0:	f8ca 0010 	str.w	r0, [sl, #16]
 80027a4:	b948      	cbnz	r0, 80027ba <_svfprintf_r+0x52>
 80027a6:	230c      	movs	r3, #12
 80027a8:	f8cb 3000 	str.w	r3, [fp]
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b0:	9309      	str	r3, [sp, #36]	; 0x24
 80027b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027b4:	b03d      	add	sp, #244	; 0xf4
 80027b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	f8ca 3014 	str.w	r3, [sl, #20]
 80027c0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002a28 <_svfprintf_r+0x2c0>
 80027c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027c8:	2300      	movs	r3, #0
 80027ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80027cc:	941f      	str	r4, [sp, #124]	; 0x7c
 80027ce:	9321      	str	r3, [sp, #132]	; 0x84
 80027d0:	9320      	str	r3, [sp, #128]	; 0x80
 80027d2:	9505      	str	r5, [sp, #20]
 80027d4:	9303      	str	r3, [sp, #12]
 80027d6:	9311      	str	r3, [sp, #68]	; 0x44
 80027d8:	9310      	str	r3, [sp, #64]	; 0x40
 80027da:	9309      	str	r3, [sp, #36]	; 0x24
 80027dc:	9d05      	ldr	r5, [sp, #20]
 80027de:	462b      	mov	r3, r5
 80027e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e4:	b112      	cbz	r2, 80027ec <_svfprintf_r+0x84>
 80027e6:	2a25      	cmp	r2, #37	; 0x25
 80027e8:	f040 8083 	bne.w	80028f2 <_svfprintf_r+0x18a>
 80027ec:	9b05      	ldr	r3, [sp, #20]
 80027ee:	1aee      	subs	r6, r5, r3
 80027f0:	d00d      	beq.n	800280e <_svfprintf_r+0xa6>
 80027f2:	e884 0048 	stmia.w	r4, {r3, r6}
 80027f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80027f8:	4433      	add	r3, r6
 80027fa:	9321      	str	r3, [sp, #132]	; 0x84
 80027fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80027fe:	3301      	adds	r3, #1
 8002800:	2b07      	cmp	r3, #7
 8002802:	9320      	str	r3, [sp, #128]	; 0x80
 8002804:	dc77      	bgt.n	80028f6 <_svfprintf_r+0x18e>
 8002806:	3408      	adds	r4, #8
 8002808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800280a:	4433      	add	r3, r6
 800280c:	9309      	str	r3, [sp, #36]	; 0x24
 800280e:	782b      	ldrb	r3, [r5, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8729 	beq.w	8003668 <_svfprintf_r+0xf00>
 8002816:	2300      	movs	r3, #0
 8002818:	1c69      	adds	r1, r5, #1
 800281a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800281e:	461a      	mov	r2, r3
 8002820:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8002824:	930a      	str	r3, [sp, #40]	; 0x28
 8002826:	461d      	mov	r5, r3
 8002828:	200a      	movs	r0, #10
 800282a:	1c4e      	adds	r6, r1, #1
 800282c:	7809      	ldrb	r1, [r1, #0]
 800282e:	9605      	str	r6, [sp, #20]
 8002830:	9102      	str	r1, [sp, #8]
 8002832:	9902      	ldr	r1, [sp, #8]
 8002834:	3920      	subs	r1, #32
 8002836:	2958      	cmp	r1, #88	; 0x58
 8002838:	f200 8418 	bhi.w	800306c <_svfprintf_r+0x904>
 800283c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002840:	041600a6 	.word	0x041600a6
 8002844:	00ab0416 	.word	0x00ab0416
 8002848:	04160416 	.word	0x04160416
 800284c:	04160416 	.word	0x04160416
 8002850:	04160416 	.word	0x04160416
 8002854:	006500ae 	.word	0x006500ae
 8002858:	00b70416 	.word	0x00b70416
 800285c:	041600ba 	.word	0x041600ba
 8002860:	00da00d7 	.word	0x00da00d7
 8002864:	00da00da 	.word	0x00da00da
 8002868:	00da00da 	.word	0x00da00da
 800286c:	00da00da 	.word	0x00da00da
 8002870:	00da00da 	.word	0x00da00da
 8002874:	04160416 	.word	0x04160416
 8002878:	04160416 	.word	0x04160416
 800287c:	04160416 	.word	0x04160416
 8002880:	04160416 	.word	0x04160416
 8002884:	04160416 	.word	0x04160416
 8002888:	012b0115 	.word	0x012b0115
 800288c:	012b0416 	.word	0x012b0416
 8002890:	04160416 	.word	0x04160416
 8002894:	04160416 	.word	0x04160416
 8002898:	041600ed 	.word	0x041600ed
 800289c:	03400416 	.word	0x03400416
 80028a0:	04160416 	.word	0x04160416
 80028a4:	04160416 	.word	0x04160416
 80028a8:	03a80416 	.word	0x03a80416
 80028ac:	04160416 	.word	0x04160416
 80028b0:	04160086 	.word	0x04160086
 80028b4:	04160416 	.word	0x04160416
 80028b8:	04160416 	.word	0x04160416
 80028bc:	04160416 	.word	0x04160416
 80028c0:	04160416 	.word	0x04160416
 80028c4:	01070416 	.word	0x01070416
 80028c8:	012b006b 	.word	0x012b006b
 80028cc:	012b012b 	.word	0x012b012b
 80028d0:	006b00f0 	.word	0x006b00f0
 80028d4:	04160416 	.word	0x04160416
 80028d8:	041600fa 	.word	0x041600fa
 80028dc:	03420322 	.word	0x03420322
 80028e0:	01010376 	.word	0x01010376
 80028e4:	03870416 	.word	0x03870416
 80028e8:	03aa0416 	.word	0x03aa0416
 80028ec:	04160416 	.word	0x04160416
 80028f0:	03c2      	.short	0x03c2
 80028f2:	461d      	mov	r5, r3
 80028f4:	e773      	b.n	80027de <_svfprintf_r+0x76>
 80028f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80028f8:	4651      	mov	r1, sl
 80028fa:	4658      	mov	r0, fp
 80028fc:	f002 fa7e 	bl	8004dfc <__ssprint_r>
 8002900:	2800      	cmp	r0, #0
 8002902:	f040 8692 	bne.w	800362a <_svfprintf_r+0xec2>
 8002906:	ac2c      	add	r4, sp, #176	; 0xb0
 8002908:	e77e      	b.n	8002808 <_svfprintf_r+0xa0>
 800290a:	2301      	movs	r3, #1
 800290c:	222b      	movs	r2, #43	; 0x2b
 800290e:	9905      	ldr	r1, [sp, #20]
 8002910:	e78b      	b.n	800282a <_svfprintf_r+0xc2>
 8002912:	460f      	mov	r7, r1
 8002914:	e7fb      	b.n	800290e <_svfprintf_r+0x1a6>
 8002916:	b10b      	cbz	r3, 800291c <_svfprintf_r+0x1b4>
 8002918:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800291c:	06ae      	lsls	r6, r5, #26
 800291e:	f140 80aa 	bpl.w	8002a76 <_svfprintf_r+0x30e>
 8002922:	3707      	adds	r7, #7
 8002924:	f027 0707 	bic.w	r7, r7, #7
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002930:	9304      	str	r3, [sp, #16]
 8002932:	2e00      	cmp	r6, #0
 8002934:	f177 0300 	sbcs.w	r3, r7, #0
 8002938:	da06      	bge.n	8002948 <_svfprintf_r+0x1e0>
 800293a:	4276      	negs	r6, r6
 800293c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002940:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002944:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002948:	2301      	movs	r3, #1
 800294a:	e2ca      	b.n	8002ee2 <_svfprintf_r+0x77a>
 800294c:	b10b      	cbz	r3, 8002952 <_svfprintf_r+0x1ea>
 800294e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <_svfprintf_r+0x2c8>)
 8002954:	9311      	str	r3, [sp, #68]	; 0x44
 8002956:	06ab      	lsls	r3, r5, #26
 8002958:	f140 8339 	bpl.w	8002fce <_svfprintf_r+0x866>
 800295c:	3707      	adds	r7, #7
 800295e:	f027 0707 	bic.w	r7, r7, #7
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	e9d7 6700 	ldrd	r6, r7, [r7]
 800296a:	9304      	str	r3, [sp, #16]
 800296c:	07e8      	lsls	r0, r5, #31
 800296e:	d50b      	bpl.n	8002988 <_svfprintf_r+0x220>
 8002970:	ea56 0307 	orrs.w	r3, r6, r7
 8002974:	d008      	beq.n	8002988 <_svfprintf_r+0x220>
 8002976:	2330      	movs	r3, #48	; 0x30
 8002978:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800297c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002980:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002984:	f045 0502 	orr.w	r5, r5, #2
 8002988:	2302      	movs	r3, #2
 800298a:	e2a7      	b.n	8002edc <_svfprintf_r+0x774>
 800298c:	2a00      	cmp	r2, #0
 800298e:	d1be      	bne.n	800290e <_svfprintf_r+0x1a6>
 8002990:	2301      	movs	r3, #1
 8002992:	2220      	movs	r2, #32
 8002994:	e7bb      	b.n	800290e <_svfprintf_r+0x1a6>
 8002996:	f045 0501 	orr.w	r5, r5, #1
 800299a:	e7b8      	b.n	800290e <_svfprintf_r+0x1a6>
 800299c:	683e      	ldr	r6, [r7, #0]
 800299e:	960a      	str	r6, [sp, #40]	; 0x28
 80029a0:	2e00      	cmp	r6, #0
 80029a2:	f107 0104 	add.w	r1, r7, #4
 80029a6:	dab4      	bge.n	8002912 <_svfprintf_r+0x1aa>
 80029a8:	4276      	negs	r6, r6
 80029aa:	960a      	str	r6, [sp, #40]	; 0x28
 80029ac:	460f      	mov	r7, r1
 80029ae:	f045 0504 	orr.w	r5, r5, #4
 80029b2:	e7ac      	b.n	800290e <_svfprintf_r+0x1a6>
 80029b4:	9905      	ldr	r1, [sp, #20]
 80029b6:	1c4e      	adds	r6, r1, #1
 80029b8:	7809      	ldrb	r1, [r1, #0]
 80029ba:	9102      	str	r1, [sp, #8]
 80029bc:	292a      	cmp	r1, #42	; 0x2a
 80029be:	d010      	beq.n	80029e2 <_svfprintf_r+0x27a>
 80029c0:	f04f 0900 	mov.w	r9, #0
 80029c4:	9605      	str	r6, [sp, #20]
 80029c6:	9902      	ldr	r1, [sp, #8]
 80029c8:	3930      	subs	r1, #48	; 0x30
 80029ca:	2909      	cmp	r1, #9
 80029cc:	f63f af31 	bhi.w	8002832 <_svfprintf_r+0xca>
 80029d0:	fb00 1909 	mla	r9, r0, r9, r1
 80029d4:	9905      	ldr	r1, [sp, #20]
 80029d6:	460e      	mov	r6, r1
 80029d8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80029dc:	9102      	str	r1, [sp, #8]
 80029de:	9605      	str	r6, [sp, #20]
 80029e0:	e7f1      	b.n	80029c6 <_svfprintf_r+0x25e>
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	9605      	str	r6, [sp, #20]
 80029e6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80029ea:	3704      	adds	r7, #4
 80029ec:	e78f      	b.n	800290e <_svfprintf_r+0x1a6>
 80029ee:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80029f2:	e78c      	b.n	800290e <_svfprintf_r+0x1a6>
 80029f4:	2100      	movs	r1, #0
 80029f6:	910a      	str	r1, [sp, #40]	; 0x28
 80029f8:	9902      	ldr	r1, [sp, #8]
 80029fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80029fc:	3930      	subs	r1, #48	; 0x30
 80029fe:	fb00 1106 	mla	r1, r0, r6, r1
 8002a02:	910a      	str	r1, [sp, #40]	; 0x28
 8002a04:	9905      	ldr	r1, [sp, #20]
 8002a06:	460e      	mov	r6, r1
 8002a08:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002a0c:	9102      	str	r1, [sp, #8]
 8002a0e:	9902      	ldr	r1, [sp, #8]
 8002a10:	9605      	str	r6, [sp, #20]
 8002a12:	3930      	subs	r1, #48	; 0x30
 8002a14:	2909      	cmp	r1, #9
 8002a16:	d9ef      	bls.n	80029f8 <_svfprintf_r+0x290>
 8002a18:	e70b      	b.n	8002832 <_svfprintf_r+0xca>
 8002a1a:	f045 0508 	orr.w	r5, r5, #8
 8002a1e:	e776      	b.n	800290e <_svfprintf_r+0x1a6>
 8002a20:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002a24:	e773      	b.n	800290e <_svfprintf_r+0x1a6>
 8002a26:	bf00      	nop
	...
 8002a30:	0800555d 	.word	0x0800555d
 8002a34:	9905      	ldr	r1, [sp, #20]
 8002a36:	7809      	ldrb	r1, [r1, #0]
 8002a38:	296c      	cmp	r1, #108	; 0x6c
 8002a3a:	d105      	bne.n	8002a48 <_svfprintf_r+0x2e0>
 8002a3c:	9905      	ldr	r1, [sp, #20]
 8002a3e:	3101      	adds	r1, #1
 8002a40:	9105      	str	r1, [sp, #20]
 8002a42:	f045 0520 	orr.w	r5, r5, #32
 8002a46:	e762      	b.n	800290e <_svfprintf_r+0x1a6>
 8002a48:	f045 0510 	orr.w	r5, r5, #16
 8002a4c:	e75f      	b.n	800290e <_svfprintf_r+0x1a6>
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	9304      	str	r3, [sp, #16]
 8002a52:	2600      	movs	r6, #0
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002a5a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002a5e:	f04f 0901 	mov.w	r9, #1
 8002a62:	4637      	mov	r7, r6
 8002a64:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002a68:	e11b      	b.n	8002ca2 <_svfprintf_r+0x53a>
 8002a6a:	b10b      	cbz	r3, 8002a70 <_svfprintf_r+0x308>
 8002a6c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002a70:	f045 0510 	orr.w	r5, r5, #16
 8002a74:	e752      	b.n	800291c <_svfprintf_r+0x1b4>
 8002a76:	f015 0f10 	tst.w	r5, #16
 8002a7a:	f107 0304 	add.w	r3, r7, #4
 8002a7e:	d003      	beq.n	8002a88 <_svfprintf_r+0x320>
 8002a80:	683e      	ldr	r6, [r7, #0]
 8002a82:	9304      	str	r3, [sp, #16]
 8002a84:	17f7      	asrs	r7, r6, #31
 8002a86:	e754      	b.n	8002932 <_svfprintf_r+0x1ca>
 8002a88:	683e      	ldr	r6, [r7, #0]
 8002a8a:	9304      	str	r3, [sp, #16]
 8002a8c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a90:	bf18      	it	ne
 8002a92:	b236      	sxthne	r6, r6
 8002a94:	e7f6      	b.n	8002a84 <_svfprintf_r+0x31c>
 8002a96:	b10b      	cbz	r3, 8002a9c <_svfprintf_r+0x334>
 8002a98:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002a9c:	3707      	adds	r7, #7
 8002a9e:	f027 0707 	bic.w	r7, r7, #7
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	9304      	str	r3, [sp, #16]
 8002aa8:	ed97 7b00 	vldr	d7, [r7]
 8002aac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ab0:	9b06      	ldr	r3, [sp, #24]
 8002ab2:	9312      	str	r3, [sp, #72]	; 0x48
 8002ab4:	9b07      	ldr	r3, [sp, #28]
 8002ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aba:	9313      	str	r3, [sp, #76]	; 0x4c
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <_svfprintf_r+0x484>)
 8002ac2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002ac6:	f7fe f83d 	bl	8000b44 <__aeabi_dcmpun>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	f040 85d5 	bne.w	800367a <_svfprintf_r+0xf12>
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <_svfprintf_r+0x484>)
 8002ad6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002ada:	f7fe f815 	bl	8000b08 <__aeabi_dcmple>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	f040 85cb 	bne.w	800367a <_svfprintf_r+0xf12>
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002aec:	f7fe f802 	bl	8000af4 <__aeabi_dcmplt>
 8002af0:	b110      	cbz	r0, 8002af8 <_svfprintf_r+0x390>
 8002af2:	232d      	movs	r3, #45	; 0x2d
 8002af4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002af8:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <_svfprintf_r+0x488>)
 8002afa:	4a3e      	ldr	r2, [pc, #248]	; (8002bf4 <_svfprintf_r+0x48c>)
 8002afc:	9902      	ldr	r1, [sp, #8]
 8002afe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002b02:	2947      	cmp	r1, #71	; 0x47
 8002b04:	bfcc      	ite	gt
 8002b06:	4690      	movgt	r8, r2
 8002b08:	4698      	movle	r8, r3
 8002b0a:	f04f 0903 	mov.w	r9, #3
 8002b0e:	2600      	movs	r6, #0
 8002b10:	4637      	mov	r7, r6
 8002b12:	e0c6      	b.n	8002ca2 <_svfprintf_r+0x53a>
 8002b14:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002b18:	d022      	beq.n	8002b60 <_svfprintf_r+0x3f8>
 8002b1a:	9b02      	ldr	r3, [sp, #8]
 8002b1c:	f023 0320 	bic.w	r3, r3, #32
 8002b20:	2b47      	cmp	r3, #71	; 0x47
 8002b22:	d104      	bne.n	8002b2e <_svfprintf_r+0x3c6>
 8002b24:	f1b9 0f00 	cmp.w	r9, #0
 8002b28:	bf08      	it	eq
 8002b2a:	f04f 0901 	moveq.w	r9, #1
 8002b2e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002b32:	930c      	str	r3, [sp, #48]	; 0x30
 8002b34:	9b07      	ldr	r3, [sp, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da15      	bge.n	8002b66 <_svfprintf_r+0x3fe>
 8002b3a:	9b06      	ldr	r3, [sp, #24]
 8002b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8002b3e:	9b07      	ldr	r3, [sp, #28]
 8002b40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b46:	232d      	movs	r3, #45	; 0x2d
 8002b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	f023 0720 	bic.w	r7, r3, #32
 8002b50:	2f46      	cmp	r7, #70	; 0x46
 8002b52:	d00e      	beq.n	8002b72 <_svfprintf_r+0x40a>
 8002b54:	2f45      	cmp	r7, #69	; 0x45
 8002b56:	d146      	bne.n	8002be6 <_svfprintf_r+0x47e>
 8002b58:	f109 0601 	add.w	r6, r9, #1
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	e00a      	b.n	8002b76 <_svfprintf_r+0x40e>
 8002b60:	f04f 0906 	mov.w	r9, #6
 8002b64:	e7e3      	b.n	8002b2e <_svfprintf_r+0x3c6>
 8002b66:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002b70:	e7ea      	b.n	8002b48 <_svfprintf_r+0x3e0>
 8002b72:	464e      	mov	r6, r9
 8002b74:	2103      	movs	r1, #3
 8002b76:	ab1d      	add	r3, sp, #116	; 0x74
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	ab1a      	add	r3, sp, #104	; 0x68
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4632      	mov	r2, r6
 8002b80:	ab19      	add	r3, sp, #100	; 0x64
 8002b82:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002b86:	4658      	mov	r0, fp
 8002b88:	f000 fe4e 	bl	8003828 <_dtoa_r>
 8002b8c:	2f47      	cmp	r7, #71	; 0x47
 8002b8e:	4680      	mov	r8, r0
 8002b90:	d102      	bne.n	8002b98 <_svfprintf_r+0x430>
 8002b92:	07e8      	lsls	r0, r5, #31
 8002b94:	f140 857e 	bpl.w	8003694 <_svfprintf_r+0xf2c>
 8002b98:	eb08 0306 	add.w	r3, r8, r6
 8002b9c:	2f46      	cmp	r7, #70	; 0x46
 8002b9e:	9303      	str	r3, [sp, #12]
 8002ba0:	d111      	bne.n	8002bc6 <_svfprintf_r+0x45e>
 8002ba2:	f898 3000 	ldrb.w	r3, [r8]
 8002ba6:	2b30      	cmp	r3, #48	; 0x30
 8002ba8:	d109      	bne.n	8002bbe <_svfprintf_r+0x456>
 8002baa:	2200      	movs	r2, #0
 8002bac:	2300      	movs	r3, #0
 8002bae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002bb2:	f7fd ff95 	bl	8000ae0 <__aeabi_dcmpeq>
 8002bb6:	b910      	cbnz	r0, 8002bbe <_svfprintf_r+0x456>
 8002bb8:	f1c6 0601 	rsb	r6, r6, #1
 8002bbc:	9619      	str	r6, [sp, #100]	; 0x64
 8002bbe:	9a03      	ldr	r2, [sp, #12]
 8002bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002bc2:	441a      	add	r2, r3
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002bce:	f7fd ff87 	bl	8000ae0 <__aeabi_dcmpeq>
 8002bd2:	b988      	cbnz	r0, 8002bf8 <_svfprintf_r+0x490>
 8002bd4:	2230      	movs	r2, #48	; 0x30
 8002bd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002bd8:	9903      	ldr	r1, [sp, #12]
 8002bda:	4299      	cmp	r1, r3
 8002bdc:	d90e      	bls.n	8002bfc <_svfprintf_r+0x494>
 8002bde:	1c59      	adds	r1, r3, #1
 8002be0:	911d      	str	r1, [sp, #116]	; 0x74
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e7f7      	b.n	8002bd6 <_svfprintf_r+0x46e>
 8002be6:	464e      	mov	r6, r9
 8002be8:	e7b8      	b.n	8002b5c <_svfprintf_r+0x3f4>
 8002bea:	bf00      	nop
 8002bec:	7fefffff 	.word	0x7fefffff
 8002bf0:	0800554d 	.word	0x0800554d
 8002bf4:	08005551 	.word	0x08005551
 8002bf8:	9b03      	ldr	r3, [sp, #12]
 8002bfa:	931d      	str	r3, [sp, #116]	; 0x74
 8002bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002bfe:	2f47      	cmp	r7, #71	; 0x47
 8002c00:	eba3 0308 	sub.w	r3, r3, r8
 8002c04:	9303      	str	r3, [sp, #12]
 8002c06:	f040 80fa 	bne.w	8002dfe <_svfprintf_r+0x696>
 8002c0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c0c:	1cd9      	adds	r1, r3, #3
 8002c0e:	db02      	blt.n	8002c16 <_svfprintf_r+0x4ae>
 8002c10:	4599      	cmp	r9, r3
 8002c12:	f280 8120 	bge.w	8002e56 <_svfprintf_r+0x6ee>
 8002c16:	9b02      	ldr	r3, [sp, #8]
 8002c18:	3b02      	subs	r3, #2
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002c1e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002c22:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002c26:	1e53      	subs	r3, r2, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	9319      	str	r3, [sp, #100]	; 0x64
 8002c2c:	bfb6      	itet	lt
 8002c2e:	f1c2 0301 	rsblt	r3, r2, #1
 8002c32:	222b      	movge	r2, #43	; 0x2b
 8002c34:	222d      	movlt	r2, #45	; 0x2d
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002c3c:	f340 80fb 	ble.w	8002e36 <_svfprintf_r+0x6ce>
 8002c40:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002c44:	260a      	movs	r6, #10
 8002c46:	fb93 f0f6 	sdiv	r0, r3, r6
 8002c4a:	fb06 3310 	mls	r3, r6, r0, r3
 8002c4e:	3330      	adds	r3, #48	; 0x30
 8002c50:	2809      	cmp	r0, #9
 8002c52:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002c56:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f300 80e4 	bgt.w	8002e28 <_svfprintf_r+0x6c0>
 8002c60:	3330      	adds	r3, #48	; 0x30
 8002c62:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002c66:	3a02      	subs	r2, #2
 8002c68:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002c6c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002c70:	4282      	cmp	r2, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	f0c0 80da 	bcc.w	8002e2c <_svfprintf_r+0x6c4>
 8002c78:	9a03      	ldr	r2, [sp, #12]
 8002c7a:	ab1b      	add	r3, sp, #108	; 0x6c
 8002c7c:	1acb      	subs	r3, r1, r3
 8002c7e:	2a01      	cmp	r2, #1
 8002c80:	9310      	str	r3, [sp, #64]	; 0x40
 8002c82:	eb03 0902 	add.w	r9, r3, r2
 8002c86:	dc02      	bgt.n	8002c8e <_svfprintf_r+0x526>
 8002c88:	f015 0701 	ands.w	r7, r5, #1
 8002c8c:	d002      	beq.n	8002c94 <_svfprintf_r+0x52c>
 8002c8e:	9b08      	ldr	r3, [sp, #32]
 8002c90:	2700      	movs	r7, #0
 8002c92:	4499      	add	r9, r3
 8002c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c96:	b113      	cbz	r3, 8002c9e <_svfprintf_r+0x536>
 8002c98:	232d      	movs	r3, #45	; 0x2d
 8002c9a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	454e      	cmp	r6, r9
 8002ca4:	4633      	mov	r3, r6
 8002ca6:	bfb8      	it	lt
 8002ca8:	464b      	movlt	r3, r9
 8002caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cac:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002cb0:	b113      	cbz	r3, 8002cb8 <_svfprintf_r+0x550>
 8002cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cb8:	f015 0302 	ands.w	r3, r5, #2
 8002cbc:	9314      	str	r3, [sp, #80]	; 0x50
 8002cbe:	bf1e      	ittt	ne
 8002cc0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002cc2:	3302      	addne	r3, #2
 8002cc4:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002cc6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002cca:	9315      	str	r3, [sp, #84]	; 0x54
 8002ccc:	d118      	bne.n	8002d00 <_svfprintf_r+0x598>
 8002cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8002cd8:	dd12      	ble.n	8002d00 <_svfprintf_r+0x598>
 8002cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	4ba9      	ldr	r3, [pc, #676]	; (8002f84 <_svfprintf_r+0x81c>)
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	f300 81d5 	bgt.w	8003090 <_svfprintf_r+0x928>
 8002ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ce8:	6063      	str	r3, [r4, #4]
 8002cea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cee:	4413      	add	r3, r2
 8002cf0:	9321      	str	r3, [sp, #132]	; 0x84
 8002cf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	2b07      	cmp	r3, #7
 8002cf8:	9320      	str	r3, [sp, #128]	; 0x80
 8002cfa:	f300 81e2 	bgt.w	80030c2 <_svfprintf_r+0x95a>
 8002cfe:	3408      	adds	r4, #8
 8002d00:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002d04:	b173      	cbz	r3, 8002d24 <_svfprintf_r+0x5bc>
 8002d06:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	6063      	str	r3, [r4, #4]
 8002d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d12:	3301      	adds	r3, #1
 8002d14:	9321      	str	r3, [sp, #132]	; 0x84
 8002d16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d18:	3301      	adds	r3, #1
 8002d1a:	2b07      	cmp	r3, #7
 8002d1c:	9320      	str	r3, [sp, #128]	; 0x80
 8002d1e:	f300 81da 	bgt.w	80030d6 <_svfprintf_r+0x96e>
 8002d22:	3408      	adds	r4, #8
 8002d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d26:	b16b      	cbz	r3, 8002d44 <_svfprintf_r+0x5dc>
 8002d28:	ab18      	add	r3, sp, #96	; 0x60
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d32:	3302      	adds	r3, #2
 8002d34:	9321      	str	r3, [sp, #132]	; 0x84
 8002d36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d38:	3301      	adds	r3, #1
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	9320      	str	r3, [sp, #128]	; 0x80
 8002d3e:	f300 81d4 	bgt.w	80030ea <_svfprintf_r+0x982>
 8002d42:	3408      	adds	r4, #8
 8002d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d114      	bne.n	8002d74 <_svfprintf_r+0x60c>
 8002d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dd0f      	ble.n	8002d74 <_svfprintf_r+0x60c>
 8002d54:	4a8c      	ldr	r2, [pc, #560]	; (8002f88 <_svfprintf_r+0x820>)
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	f300 81d0 	bgt.w	80030fe <_svfprintf_r+0x996>
 8002d5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	9321      	str	r3, [sp, #132]	; 0x84
 8002d66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d68:	3301      	adds	r3, #1
 8002d6a:	2b07      	cmp	r3, #7
 8002d6c:	9320      	str	r3, [sp, #128]	; 0x80
 8002d6e:	f300 81df 	bgt.w	8003130 <_svfprintf_r+0x9c8>
 8002d72:	3408      	adds	r4, #8
 8002d74:	eba6 0609 	sub.w	r6, r6, r9
 8002d78:	2e00      	cmp	r6, #0
 8002d7a:	dd0f      	ble.n	8002d9c <_svfprintf_r+0x634>
 8002d7c:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <_svfprintf_r+0x820>)
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	2e10      	cmp	r6, #16
 8002d82:	f300 81df 	bgt.w	8003144 <_svfprintf_r+0x9dc>
 8002d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d88:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002d8a:	6066      	str	r6, [r4, #4]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4406      	add	r6, r0
 8002d90:	2b07      	cmp	r3, #7
 8002d92:	9621      	str	r6, [sp, #132]	; 0x84
 8002d94:	9320      	str	r3, [sp, #128]	; 0x80
 8002d96:	f300 81ec 	bgt.w	8003172 <_svfprintf_r+0xa0a>
 8002d9a:	3408      	adds	r4, #8
 8002d9c:	05eb      	lsls	r3, r5, #23
 8002d9e:	f100 81f2 	bmi.w	8003186 <_svfprintf_r+0xa1e>
 8002da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002da4:	e884 0300 	stmia.w	r4, {r8, r9}
 8002da8:	444b      	add	r3, r9
 8002daa:	9321      	str	r3, [sp, #132]	; 0x84
 8002dac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002dae:	3301      	adds	r3, #1
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	9320      	str	r3, [sp, #128]	; 0x80
 8002db4:	f340 8419 	ble.w	80035ea <_svfprintf_r+0xe82>
 8002db8:	aa1f      	add	r2, sp, #124	; 0x7c
 8002dba:	4651      	mov	r1, sl
 8002dbc:	4658      	mov	r0, fp
 8002dbe:	f002 f81d 	bl	8004dfc <__ssprint_r>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	f040 8431 	bne.w	800362a <_svfprintf_r+0xec2>
 8002dc8:	ac2c      	add	r4, sp, #176	; 0xb0
 8002dca:	076b      	lsls	r3, r5, #29
 8002dcc:	f100 8410 	bmi.w	80035f0 <_svfprintf_r+0xe88>
 8002dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dd6:	428a      	cmp	r2, r1
 8002dd8:	bfac      	ite	ge
 8002dda:	189b      	addge	r3, r3, r2
 8002ddc:	185b      	addlt	r3, r3, r1
 8002dde:	9309      	str	r3, [sp, #36]	; 0x24
 8002de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002de2:	b13b      	cbz	r3, 8002df4 <_svfprintf_r+0x68c>
 8002de4:	aa1f      	add	r2, sp, #124	; 0x7c
 8002de6:	4651      	mov	r1, sl
 8002de8:	4658      	mov	r0, fp
 8002dea:	f002 f807 	bl	8004dfc <__ssprint_r>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	f040 841b 	bne.w	800362a <_svfprintf_r+0xec2>
 8002df4:	2300      	movs	r3, #0
 8002df6:	9320      	str	r3, [sp, #128]	; 0x80
 8002df8:	9f04      	ldr	r7, [sp, #16]
 8002dfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002dfc:	e4ee      	b.n	80027dc <_svfprintf_r+0x74>
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	2b65      	cmp	r3, #101	; 0x65
 8002e02:	f77f af0b 	ble.w	8002c1c <_svfprintf_r+0x4b4>
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	2b66      	cmp	r3, #102	; 0x66
 8002e0a:	d124      	bne.n	8002e56 <_svfprintf_r+0x6ee>
 8002e0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	dd19      	ble.n	8002e46 <_svfprintf_r+0x6de>
 8002e12:	f1b9 0f00 	cmp.w	r9, #0
 8002e16:	d101      	bne.n	8002e1c <_svfprintf_r+0x6b4>
 8002e18:	07ea      	lsls	r2, r5, #31
 8002e1a:	d502      	bpl.n	8002e22 <_svfprintf_r+0x6ba>
 8002e1c:	9a08      	ldr	r2, [sp, #32]
 8002e1e:	4413      	add	r3, r2
 8002e20:	444b      	add	r3, r9
 8002e22:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002e24:	4699      	mov	r9, r3
 8002e26:	e735      	b.n	8002c94 <_svfprintf_r+0x52c>
 8002e28:	460a      	mov	r2, r1
 8002e2a:	e70c      	b.n	8002c46 <_svfprintf_r+0x4de>
 8002e2c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002e30:	f803 1b01 	strb.w	r1, [r3], #1
 8002e34:	e71c      	b.n	8002c70 <_svfprintf_r+0x508>
 8002e36:	2230      	movs	r2, #48	; 0x30
 8002e38:	4413      	add	r3, r2
 8002e3a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002e3e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8002e42:	a91c      	add	r1, sp, #112	; 0x70
 8002e44:	e718      	b.n	8002c78 <_svfprintf_r+0x510>
 8002e46:	f1b9 0f00 	cmp.w	r9, #0
 8002e4a:	d101      	bne.n	8002e50 <_svfprintf_r+0x6e8>
 8002e4c:	07eb      	lsls	r3, r5, #31
 8002e4e:	d515      	bpl.n	8002e7c <_svfprintf_r+0x714>
 8002e50:	9b08      	ldr	r3, [sp, #32]
 8002e52:	3301      	adds	r3, #1
 8002e54:	e7e4      	b.n	8002e20 <_svfprintf_r+0x6b8>
 8002e56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002e58:	9b03      	ldr	r3, [sp, #12]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	db06      	blt.n	8002e6c <_svfprintf_r+0x704>
 8002e5e:	07ef      	lsls	r7, r5, #31
 8002e60:	d50e      	bpl.n	8002e80 <_svfprintf_r+0x718>
 8002e62:	9b08      	ldr	r3, [sp, #32]
 8002e64:	4413      	add	r3, r2
 8002e66:	2267      	movs	r2, #103	; 0x67
 8002e68:	9202      	str	r2, [sp, #8]
 8002e6a:	e7da      	b.n	8002e22 <_svfprintf_r+0x6ba>
 8002e6c:	9b03      	ldr	r3, [sp, #12]
 8002e6e:	9908      	ldr	r1, [sp, #32]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	440b      	add	r3, r1
 8002e74:	dcf7      	bgt.n	8002e66 <_svfprintf_r+0x6fe>
 8002e76:	f1c2 0201 	rsb	r2, r2, #1
 8002e7a:	e7f3      	b.n	8002e64 <_svfprintf_r+0x6fc>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e7d0      	b.n	8002e22 <_svfprintf_r+0x6ba>
 8002e80:	4613      	mov	r3, r2
 8002e82:	e7f0      	b.n	8002e66 <_svfprintf_r+0x6fe>
 8002e84:	b10b      	cbz	r3, 8002e8a <_svfprintf_r+0x722>
 8002e86:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e8a:	f015 0f20 	tst.w	r5, #32
 8002e8e:	f107 0304 	add.w	r3, r7, #4
 8002e92:	d008      	beq.n	8002ea6 <_svfprintf_r+0x73e>
 8002e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	17ce      	asrs	r6, r1, #31
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	4631      	mov	r1, r6
 8002e9e:	e9c2 0100 	strd	r0, r1, [r2]
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	e49a      	b.n	80027dc <_svfprintf_r+0x74>
 8002ea6:	06ee      	lsls	r6, r5, #27
 8002ea8:	d503      	bpl.n	8002eb2 <_svfprintf_r+0x74a>
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002eae:	6011      	str	r1, [r2, #0]
 8002eb0:	e7f7      	b.n	8002ea2 <_svfprintf_r+0x73a>
 8002eb2:	0668      	lsls	r0, r5, #25
 8002eb4:	d5f9      	bpl.n	8002eaa <_svfprintf_r+0x742>
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002ebc:	8011      	strh	r1, [r2, #0]
 8002ebe:	e7f0      	b.n	8002ea2 <_svfprintf_r+0x73a>
 8002ec0:	f045 0510 	orr.w	r5, r5, #16
 8002ec4:	f015 0320 	ands.w	r3, r5, #32
 8002ec8:	d022      	beq.n	8002f10 <_svfprintf_r+0x7a8>
 8002eca:	3707      	adds	r7, #7
 8002ecc:	f027 0707 	bic.w	r7, r7, #7
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002ed8:	9304      	str	r3, [sp, #16]
 8002eda:	2300      	movs	r3, #0
 8002edc:	2200      	movs	r2, #0
 8002ede:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002ee2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002ee6:	f000 83db 	beq.w	80036a0 <_svfprintf_r+0xf38>
 8002eea:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ef0:	ea56 0207 	orrs.w	r2, r6, r7
 8002ef4:	f040 83d9 	bne.w	80036aa <_svfprintf_r+0xf42>
 8002ef8:	f1b9 0f00 	cmp.w	r9, #0
 8002efc:	f000 80aa 	beq.w	8003054 <_svfprintf_r+0x8ec>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d076      	beq.n	8002ff2 <_svfprintf_r+0x88a>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f000 8091 	beq.w	800302c <_svfprintf_r+0x8c4>
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	2700      	movs	r7, #0
 8002f0e:	e3d2      	b.n	80036b6 <_svfprintf_r+0xf4e>
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	f015 0110 	ands.w	r1, r5, #16
 8002f16:	9204      	str	r2, [sp, #16]
 8002f18:	d002      	beq.n	8002f20 <_svfprintf_r+0x7b8>
 8002f1a:	683e      	ldr	r6, [r7, #0]
 8002f1c:	2700      	movs	r7, #0
 8002f1e:	e7dd      	b.n	8002edc <_svfprintf_r+0x774>
 8002f20:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002f24:	d0f9      	beq.n	8002f1a <_svfprintf_r+0x7b2>
 8002f26:	883e      	ldrh	r6, [r7, #0]
 8002f28:	2700      	movs	r7, #0
 8002f2a:	e7d6      	b.n	8002eda <_svfprintf_r+0x772>
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	9304      	str	r3, [sp, #16]
 8002f30:	2330      	movs	r3, #48	; 0x30
 8002f32:	2278      	movs	r2, #120	; 0x78
 8002f34:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <_svfprintf_r+0x824>)
 8002f3a:	683e      	ldr	r6, [r7, #0]
 8002f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8002f3e:	2700      	movs	r7, #0
 8002f40:	f045 0502 	orr.w	r5, r5, #2
 8002f44:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9202      	str	r2, [sp, #8]
 8002f4c:	e7c6      	b.n	8002edc <_svfprintf_r+0x774>
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2600      	movs	r6, #0
 8002f52:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002f56:	9304      	str	r3, [sp, #16]
 8002f58:	f8d7 8000 	ldr.w	r8, [r7]
 8002f5c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002f60:	d00a      	beq.n	8002f78 <_svfprintf_r+0x810>
 8002f62:	464a      	mov	r2, r9
 8002f64:	4631      	mov	r1, r6
 8002f66:	4640      	mov	r0, r8
 8002f68:	f7fd f942 	bl	80001f0 <memchr>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f000 808d 	beq.w	800308c <_svfprintf_r+0x924>
 8002f72:	eba0 0908 	sub.w	r9, r0, r8
 8002f76:	e5cb      	b.n	8002b10 <_svfprintf_r+0x3a8>
 8002f78:	4640      	mov	r0, r8
 8002f7a:	f7fd f989 	bl	8000290 <strlen>
 8002f7e:	4681      	mov	r9, r0
 8002f80:	e5c6      	b.n	8002b10 <_svfprintf_r+0x3a8>
 8002f82:	bf00      	nop
 8002f84:	08005581 	.word	0x08005581
 8002f88:	08005591 	.word	0x08005591
 8002f8c:	0800556e 	.word	0x0800556e
 8002f90:	f045 0510 	orr.w	r5, r5, #16
 8002f94:	06a9      	lsls	r1, r5, #26
 8002f96:	d509      	bpl.n	8002fac <_svfprintf_r+0x844>
 8002f98:	3707      	adds	r7, #7
 8002f9a:	f027 0707 	bic.w	r7, r7, #7
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002fa6:	9304      	str	r3, [sp, #16]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e797      	b.n	8002edc <_svfprintf_r+0x774>
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	f015 0f10 	tst.w	r5, #16
 8002fb2:	9304      	str	r3, [sp, #16]
 8002fb4:	d001      	beq.n	8002fba <_svfprintf_r+0x852>
 8002fb6:	683e      	ldr	r6, [r7, #0]
 8002fb8:	e002      	b.n	8002fc0 <_svfprintf_r+0x858>
 8002fba:	066a      	lsls	r2, r5, #25
 8002fbc:	d5fb      	bpl.n	8002fb6 <_svfprintf_r+0x84e>
 8002fbe:	883e      	ldrh	r6, [r7, #0]
 8002fc0:	2700      	movs	r7, #0
 8002fc2:	e7f1      	b.n	8002fa8 <_svfprintf_r+0x840>
 8002fc4:	b10b      	cbz	r3, 8002fca <_svfprintf_r+0x862>
 8002fc6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002fca:	4ba3      	ldr	r3, [pc, #652]	; (8003258 <_svfprintf_r+0xaf0>)
 8002fcc:	e4c2      	b.n	8002954 <_svfprintf_r+0x1ec>
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	f015 0f10 	tst.w	r5, #16
 8002fd4:	9304      	str	r3, [sp, #16]
 8002fd6:	d001      	beq.n	8002fdc <_svfprintf_r+0x874>
 8002fd8:	683e      	ldr	r6, [r7, #0]
 8002fda:	e002      	b.n	8002fe2 <_svfprintf_r+0x87a>
 8002fdc:	066e      	lsls	r6, r5, #25
 8002fde:	d5fb      	bpl.n	8002fd8 <_svfprintf_r+0x870>
 8002fe0:	883e      	ldrh	r6, [r7, #0]
 8002fe2:	2700      	movs	r7, #0
 8002fe4:	e4c2      	b.n	800296c <_svfprintf_r+0x204>
 8002fe6:	4643      	mov	r3, r8
 8002fe8:	e366      	b.n	80036b8 <_svfprintf_r+0xf50>
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	bf08      	it	eq
 8002fee:	2e0a      	cmpeq	r6, #10
 8002ff0:	d205      	bcs.n	8002ffe <_svfprintf_r+0x896>
 8002ff2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002ff6:	3630      	adds	r6, #48	; 0x30
 8002ff8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002ffc:	e377      	b.n	80036ee <_svfprintf_r+0xf86>
 8002ffe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003002:	4630      	mov	r0, r6
 8003004:	4639      	mov	r1, r7
 8003006:	220a      	movs	r2, #10
 8003008:	2300      	movs	r3, #0
 800300a:	f7fd fe29 	bl	8000c60 <__aeabi_uldivmod>
 800300e:	3230      	adds	r2, #48	; 0x30
 8003010:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003014:	2300      	movs	r3, #0
 8003016:	4630      	mov	r0, r6
 8003018:	4639      	mov	r1, r7
 800301a:	220a      	movs	r2, #10
 800301c:	f7fd fe20 	bl	8000c60 <__aeabi_uldivmod>
 8003020:	4606      	mov	r6, r0
 8003022:	460f      	mov	r7, r1
 8003024:	ea56 0307 	orrs.w	r3, r6, r7
 8003028:	d1eb      	bne.n	8003002 <_svfprintf_r+0x89a>
 800302a:	e360      	b.n	80036ee <_svfprintf_r+0xf86>
 800302c:	2600      	movs	r6, #0
 800302e:	2700      	movs	r7, #0
 8003030:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003034:	f006 030f 	and.w	r3, r6, #15
 8003038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003040:	0933      	lsrs	r3, r6, #4
 8003042:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003046:	093a      	lsrs	r2, r7, #4
 8003048:	461e      	mov	r6, r3
 800304a:	4617      	mov	r7, r2
 800304c:	ea56 0307 	orrs.w	r3, r6, r7
 8003050:	d1f0      	bne.n	8003034 <_svfprintf_r+0x8cc>
 8003052:	e34c      	b.n	80036ee <_svfprintf_r+0xf86>
 8003054:	b93b      	cbnz	r3, 8003066 <_svfprintf_r+0x8fe>
 8003056:	07ea      	lsls	r2, r5, #31
 8003058:	d505      	bpl.n	8003066 <_svfprintf_r+0x8fe>
 800305a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800305e:	2330      	movs	r3, #48	; 0x30
 8003060:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003064:	e343      	b.n	80036ee <_svfprintf_r+0xf86>
 8003066:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800306a:	e340      	b.n	80036ee <_svfprintf_r+0xf86>
 800306c:	b10b      	cbz	r3, 8003072 <_svfprintf_r+0x90a>
 800306e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 82f7 	beq.w	8003668 <_svfprintf_r+0xf00>
 800307a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800307e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003082:	2600      	movs	r6, #0
 8003084:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003088:	9704      	str	r7, [sp, #16]
 800308a:	e4e8      	b.n	8002a5e <_svfprintf_r+0x2f6>
 800308c:	4606      	mov	r6, r0
 800308e:	e53f      	b.n	8002b10 <_svfprintf_r+0x3a8>
 8003090:	2310      	movs	r3, #16
 8003092:	6063      	str	r3, [r4, #4]
 8003094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003096:	3310      	adds	r3, #16
 8003098:	9321      	str	r3, [sp, #132]	; 0x84
 800309a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800309c:	3301      	adds	r3, #1
 800309e:	2b07      	cmp	r3, #7
 80030a0:	9320      	str	r3, [sp, #128]	; 0x80
 80030a2:	dc04      	bgt.n	80030ae <_svfprintf_r+0x946>
 80030a4:	3408      	adds	r4, #8
 80030a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030a8:	3b10      	subs	r3, #16
 80030aa:	930c      	str	r3, [sp, #48]	; 0x30
 80030ac:	e615      	b.n	8002cda <_svfprintf_r+0x572>
 80030ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80030b0:	4651      	mov	r1, sl
 80030b2:	4658      	mov	r0, fp
 80030b4:	f001 fea2 	bl	8004dfc <__ssprint_r>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f040 82b6 	bne.w	800362a <_svfprintf_r+0xec2>
 80030be:	ac2c      	add	r4, sp, #176	; 0xb0
 80030c0:	e7f1      	b.n	80030a6 <_svfprintf_r+0x93e>
 80030c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80030c4:	4651      	mov	r1, sl
 80030c6:	4658      	mov	r0, fp
 80030c8:	f001 fe98 	bl	8004dfc <__ssprint_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	f040 82ac 	bne.w	800362a <_svfprintf_r+0xec2>
 80030d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80030d4:	e614      	b.n	8002d00 <_svfprintf_r+0x598>
 80030d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80030d8:	4651      	mov	r1, sl
 80030da:	4658      	mov	r0, fp
 80030dc:	f001 fe8e 	bl	8004dfc <__ssprint_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f040 82a2 	bne.w	800362a <_svfprintf_r+0xec2>
 80030e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80030e8:	e61c      	b.n	8002d24 <_svfprintf_r+0x5bc>
 80030ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80030ec:	4651      	mov	r1, sl
 80030ee:	4658      	mov	r0, fp
 80030f0:	f001 fe84 	bl	8004dfc <__ssprint_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f040 8298 	bne.w	800362a <_svfprintf_r+0xec2>
 80030fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80030fc:	e622      	b.n	8002d44 <_svfprintf_r+0x5dc>
 80030fe:	2210      	movs	r2, #16
 8003100:	6062      	str	r2, [r4, #4]
 8003102:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003104:	3210      	adds	r2, #16
 8003106:	9221      	str	r2, [sp, #132]	; 0x84
 8003108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800310a:	3201      	adds	r2, #1
 800310c:	2a07      	cmp	r2, #7
 800310e:	9220      	str	r2, [sp, #128]	; 0x80
 8003110:	dc02      	bgt.n	8003118 <_svfprintf_r+0x9b0>
 8003112:	3408      	adds	r4, #8
 8003114:	3b10      	subs	r3, #16
 8003116:	e61d      	b.n	8002d54 <_svfprintf_r+0x5ec>
 8003118:	aa1f      	add	r2, sp, #124	; 0x7c
 800311a:	4651      	mov	r1, sl
 800311c:	4658      	mov	r0, fp
 800311e:	930c      	str	r3, [sp, #48]	; 0x30
 8003120:	f001 fe6c 	bl	8004dfc <__ssprint_r>
 8003124:	2800      	cmp	r0, #0
 8003126:	f040 8280 	bne.w	800362a <_svfprintf_r+0xec2>
 800312a:	ac2c      	add	r4, sp, #176	; 0xb0
 800312c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800312e:	e7f1      	b.n	8003114 <_svfprintf_r+0x9ac>
 8003130:	aa1f      	add	r2, sp, #124	; 0x7c
 8003132:	4651      	mov	r1, sl
 8003134:	4658      	mov	r0, fp
 8003136:	f001 fe61 	bl	8004dfc <__ssprint_r>
 800313a:	2800      	cmp	r0, #0
 800313c:	f040 8275 	bne.w	800362a <_svfprintf_r+0xec2>
 8003140:	ac2c      	add	r4, sp, #176	; 0xb0
 8003142:	e617      	b.n	8002d74 <_svfprintf_r+0x60c>
 8003144:	2310      	movs	r3, #16
 8003146:	6063      	str	r3, [r4, #4]
 8003148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800314a:	3310      	adds	r3, #16
 800314c:	9321      	str	r3, [sp, #132]	; 0x84
 800314e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003150:	3301      	adds	r3, #1
 8003152:	2b07      	cmp	r3, #7
 8003154:	9320      	str	r3, [sp, #128]	; 0x80
 8003156:	dc02      	bgt.n	800315e <_svfprintf_r+0x9f6>
 8003158:	3408      	adds	r4, #8
 800315a:	3e10      	subs	r6, #16
 800315c:	e60e      	b.n	8002d7c <_svfprintf_r+0x614>
 800315e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003160:	4651      	mov	r1, sl
 8003162:	4658      	mov	r0, fp
 8003164:	f001 fe4a 	bl	8004dfc <__ssprint_r>
 8003168:	2800      	cmp	r0, #0
 800316a:	f040 825e 	bne.w	800362a <_svfprintf_r+0xec2>
 800316e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003170:	e7f3      	b.n	800315a <_svfprintf_r+0x9f2>
 8003172:	aa1f      	add	r2, sp, #124	; 0x7c
 8003174:	4651      	mov	r1, sl
 8003176:	4658      	mov	r0, fp
 8003178:	f001 fe40 	bl	8004dfc <__ssprint_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	f040 8254 	bne.w	800362a <_svfprintf_r+0xec2>
 8003182:	ac2c      	add	r4, sp, #176	; 0xb0
 8003184:	e60a      	b.n	8002d9c <_svfprintf_r+0x634>
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	2b65      	cmp	r3, #101	; 0x65
 800318a:	f340 81a9 	ble.w	80034e0 <_svfprintf_r+0xd78>
 800318e:	2200      	movs	r2, #0
 8003190:	2300      	movs	r3, #0
 8003192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003196:	f7fd fca3 	bl	8000ae0 <__aeabi_dcmpeq>
 800319a:	2800      	cmp	r0, #0
 800319c:	d062      	beq.n	8003264 <_svfprintf_r+0xafc>
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <_svfprintf_r+0xaf4>)
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	2301      	movs	r3, #1
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031a8:	3301      	adds	r3, #1
 80031aa:	9321      	str	r3, [sp, #132]	; 0x84
 80031ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031ae:	3301      	adds	r3, #1
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	9320      	str	r3, [sp, #128]	; 0x80
 80031b4:	dc25      	bgt.n	8003202 <_svfprintf_r+0xa9a>
 80031b6:	3408      	adds	r4, #8
 80031b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031ba:	9a03      	ldr	r2, [sp, #12]
 80031bc:	4293      	cmp	r3, r2
 80031be:	db02      	blt.n	80031c6 <_svfprintf_r+0xa5e>
 80031c0:	07ee      	lsls	r6, r5, #31
 80031c2:	f57f ae02 	bpl.w	8002dca <_svfprintf_r+0x662>
 80031c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	9b08      	ldr	r3, [sp, #32]
 80031cc:	6063      	str	r3, [r4, #4]
 80031ce:	9a08      	ldr	r2, [sp, #32]
 80031d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031d2:	4413      	add	r3, r2
 80031d4:	9321      	str	r3, [sp, #132]	; 0x84
 80031d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031d8:	3301      	adds	r3, #1
 80031da:	2b07      	cmp	r3, #7
 80031dc:	9320      	str	r3, [sp, #128]	; 0x80
 80031de:	dc1a      	bgt.n	8003216 <_svfprintf_r+0xaae>
 80031e0:	3408      	adds	r4, #8
 80031e2:	9b03      	ldr	r3, [sp, #12]
 80031e4:	1e5e      	subs	r6, r3, #1
 80031e6:	2e00      	cmp	r6, #0
 80031e8:	f77f adef 	ble.w	8002dca <_svfprintf_r+0x662>
 80031ec:	4f1c      	ldr	r7, [pc, #112]	; (8003260 <_svfprintf_r+0xaf8>)
 80031ee:	f04f 0810 	mov.w	r8, #16
 80031f2:	2e10      	cmp	r6, #16
 80031f4:	6027      	str	r7, [r4, #0]
 80031f6:	dc18      	bgt.n	800322a <_svfprintf_r+0xac2>
 80031f8:	6066      	str	r6, [r4, #4]
 80031fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031fc:	441e      	add	r6, r3
 80031fe:	9621      	str	r6, [sp, #132]	; 0x84
 8003200:	e5d4      	b.n	8002dac <_svfprintf_r+0x644>
 8003202:	aa1f      	add	r2, sp, #124	; 0x7c
 8003204:	4651      	mov	r1, sl
 8003206:	4658      	mov	r0, fp
 8003208:	f001 fdf8 	bl	8004dfc <__ssprint_r>
 800320c:	2800      	cmp	r0, #0
 800320e:	f040 820c 	bne.w	800362a <_svfprintf_r+0xec2>
 8003212:	ac2c      	add	r4, sp, #176	; 0xb0
 8003214:	e7d0      	b.n	80031b8 <_svfprintf_r+0xa50>
 8003216:	aa1f      	add	r2, sp, #124	; 0x7c
 8003218:	4651      	mov	r1, sl
 800321a:	4658      	mov	r0, fp
 800321c:	f001 fdee 	bl	8004dfc <__ssprint_r>
 8003220:	2800      	cmp	r0, #0
 8003222:	f040 8202 	bne.w	800362a <_svfprintf_r+0xec2>
 8003226:	ac2c      	add	r4, sp, #176	; 0xb0
 8003228:	e7db      	b.n	80031e2 <_svfprintf_r+0xa7a>
 800322a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800322c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003230:	3310      	adds	r3, #16
 8003232:	9321      	str	r3, [sp, #132]	; 0x84
 8003234:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003236:	3301      	adds	r3, #1
 8003238:	2b07      	cmp	r3, #7
 800323a:	9320      	str	r3, [sp, #128]	; 0x80
 800323c:	dc02      	bgt.n	8003244 <_svfprintf_r+0xadc>
 800323e:	3408      	adds	r4, #8
 8003240:	3e10      	subs	r6, #16
 8003242:	e7d6      	b.n	80031f2 <_svfprintf_r+0xa8a>
 8003244:	aa1f      	add	r2, sp, #124	; 0x7c
 8003246:	4651      	mov	r1, sl
 8003248:	4658      	mov	r0, fp
 800324a:	f001 fdd7 	bl	8004dfc <__ssprint_r>
 800324e:	2800      	cmp	r0, #0
 8003250:	f040 81eb 	bne.w	800362a <_svfprintf_r+0xec2>
 8003254:	ac2c      	add	r4, sp, #176	; 0xb0
 8003256:	e7f3      	b.n	8003240 <_svfprintf_r+0xad8>
 8003258:	0800556e 	.word	0x0800556e
 800325c:	0800557f 	.word	0x0800557f
 8003260:	08005591 	.word	0x08005591
 8003264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003266:	2b00      	cmp	r3, #0
 8003268:	dc7a      	bgt.n	8003360 <_svfprintf_r+0xbf8>
 800326a:	4b9b      	ldr	r3, [pc, #620]	; (80034d8 <_svfprintf_r+0xd70>)
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	2301      	movs	r3, #1
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003274:	3301      	adds	r3, #1
 8003276:	9321      	str	r3, [sp, #132]	; 0x84
 8003278:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800327a:	3301      	adds	r3, #1
 800327c:	2b07      	cmp	r3, #7
 800327e:	9320      	str	r3, [sp, #128]	; 0x80
 8003280:	dc44      	bgt.n	800330c <_svfprintf_r+0xba4>
 8003282:	3408      	adds	r4, #8
 8003284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003286:	b923      	cbnz	r3, 8003292 <_svfprintf_r+0xb2a>
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	b913      	cbnz	r3, 8003292 <_svfprintf_r+0xb2a>
 800328c:	07e8      	lsls	r0, r5, #31
 800328e:	f57f ad9c 	bpl.w	8002dca <_svfprintf_r+0x662>
 8003292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	9b08      	ldr	r3, [sp, #32]
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	9a08      	ldr	r2, [sp, #32]
 800329c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800329e:	4413      	add	r3, r2
 80032a0:	9321      	str	r3, [sp, #132]	; 0x84
 80032a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032a4:	3301      	adds	r3, #1
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	9320      	str	r3, [sp, #128]	; 0x80
 80032aa:	dc39      	bgt.n	8003320 <_svfprintf_r+0xbb8>
 80032ac:	f104 0308 	add.w	r3, r4, #8
 80032b0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80032b2:	2e00      	cmp	r6, #0
 80032b4:	da19      	bge.n	80032ea <_svfprintf_r+0xb82>
 80032b6:	4f89      	ldr	r7, [pc, #548]	; (80034dc <_svfprintf_r+0xd74>)
 80032b8:	4276      	negs	r6, r6
 80032ba:	2410      	movs	r4, #16
 80032bc:	2e10      	cmp	r6, #16
 80032be:	601f      	str	r7, [r3, #0]
 80032c0:	dc38      	bgt.n	8003334 <_svfprintf_r+0xbcc>
 80032c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032c4:	605e      	str	r6, [r3, #4]
 80032c6:	4416      	add	r6, r2
 80032c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032ca:	9621      	str	r6, [sp, #132]	; 0x84
 80032cc:	3201      	adds	r2, #1
 80032ce:	2a07      	cmp	r2, #7
 80032d0:	f103 0308 	add.w	r3, r3, #8
 80032d4:	9220      	str	r2, [sp, #128]	; 0x80
 80032d6:	dd08      	ble.n	80032ea <_svfprintf_r+0xb82>
 80032d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80032da:	4651      	mov	r1, sl
 80032dc:	4658      	mov	r0, fp
 80032de:	f001 fd8d 	bl	8004dfc <__ssprint_r>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	f040 81a1 	bne.w	800362a <_svfprintf_r+0xec2>
 80032e8:	ab2c      	add	r3, sp, #176	; 0xb0
 80032ea:	9a03      	ldr	r2, [sp, #12]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	9903      	ldr	r1, [sp, #12]
 80032f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032f2:	f8c3 8000 	str.w	r8, [r3]
 80032f6:	440a      	add	r2, r1
 80032f8:	9221      	str	r2, [sp, #132]	; 0x84
 80032fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032fc:	3201      	adds	r2, #1
 80032fe:	2a07      	cmp	r2, #7
 8003300:	9220      	str	r2, [sp, #128]	; 0x80
 8003302:	f73f ad59 	bgt.w	8002db8 <_svfprintf_r+0x650>
 8003306:	f103 0408 	add.w	r4, r3, #8
 800330a:	e55e      	b.n	8002dca <_svfprintf_r+0x662>
 800330c:	aa1f      	add	r2, sp, #124	; 0x7c
 800330e:	4651      	mov	r1, sl
 8003310:	4658      	mov	r0, fp
 8003312:	f001 fd73 	bl	8004dfc <__ssprint_r>
 8003316:	2800      	cmp	r0, #0
 8003318:	f040 8187 	bne.w	800362a <_svfprintf_r+0xec2>
 800331c:	ac2c      	add	r4, sp, #176	; 0xb0
 800331e:	e7b1      	b.n	8003284 <_svfprintf_r+0xb1c>
 8003320:	aa1f      	add	r2, sp, #124	; 0x7c
 8003322:	4651      	mov	r1, sl
 8003324:	4658      	mov	r0, fp
 8003326:	f001 fd69 	bl	8004dfc <__ssprint_r>
 800332a:	2800      	cmp	r0, #0
 800332c:	f040 817d 	bne.w	800362a <_svfprintf_r+0xec2>
 8003330:	ab2c      	add	r3, sp, #176	; 0xb0
 8003332:	e7bd      	b.n	80032b0 <_svfprintf_r+0xb48>
 8003334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003336:	605c      	str	r4, [r3, #4]
 8003338:	3210      	adds	r2, #16
 800333a:	9221      	str	r2, [sp, #132]	; 0x84
 800333c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800333e:	3201      	adds	r2, #1
 8003340:	2a07      	cmp	r2, #7
 8003342:	9220      	str	r2, [sp, #128]	; 0x80
 8003344:	dc02      	bgt.n	800334c <_svfprintf_r+0xbe4>
 8003346:	3308      	adds	r3, #8
 8003348:	3e10      	subs	r6, #16
 800334a:	e7b7      	b.n	80032bc <_svfprintf_r+0xb54>
 800334c:	aa1f      	add	r2, sp, #124	; 0x7c
 800334e:	4651      	mov	r1, sl
 8003350:	4658      	mov	r0, fp
 8003352:	f001 fd53 	bl	8004dfc <__ssprint_r>
 8003356:	2800      	cmp	r0, #0
 8003358:	f040 8167 	bne.w	800362a <_svfprintf_r+0xec2>
 800335c:	ab2c      	add	r3, sp, #176	; 0xb0
 800335e:	e7f3      	b.n	8003348 <_svfprintf_r+0xbe0>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	42bb      	cmp	r3, r7
 8003364:	bfa8      	it	ge
 8003366:	463b      	movge	r3, r7
 8003368:	2b00      	cmp	r3, #0
 800336a:	461e      	mov	r6, r3
 800336c:	dd0b      	ble.n	8003386 <_svfprintf_r+0xc1e>
 800336e:	6063      	str	r3, [r4, #4]
 8003370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003372:	f8c4 8000 	str.w	r8, [r4]
 8003376:	4433      	add	r3, r6
 8003378:	9321      	str	r3, [sp, #132]	; 0x84
 800337a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800337c:	3301      	adds	r3, #1
 800337e:	2b07      	cmp	r3, #7
 8003380:	9320      	str	r3, [sp, #128]	; 0x80
 8003382:	dc5f      	bgt.n	8003444 <_svfprintf_r+0xcdc>
 8003384:	3408      	adds	r4, #8
 8003386:	2e00      	cmp	r6, #0
 8003388:	bfac      	ite	ge
 800338a:	1bbe      	subge	r6, r7, r6
 800338c:	463e      	movlt	r6, r7
 800338e:	2e00      	cmp	r6, #0
 8003390:	dd0f      	ble.n	80033b2 <_svfprintf_r+0xc4a>
 8003392:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80034dc <_svfprintf_r+0xd74>
 8003396:	f8c4 9000 	str.w	r9, [r4]
 800339a:	2e10      	cmp	r6, #16
 800339c:	dc5c      	bgt.n	8003458 <_svfprintf_r+0xcf0>
 800339e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033a0:	6066      	str	r6, [r4, #4]
 80033a2:	441e      	add	r6, r3
 80033a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033a6:	9621      	str	r6, [sp, #132]	; 0x84
 80033a8:	3301      	adds	r3, #1
 80033aa:	2b07      	cmp	r3, #7
 80033ac:	9320      	str	r3, [sp, #128]	; 0x80
 80033ae:	dc6a      	bgt.n	8003486 <_svfprintf_r+0xd1e>
 80033b0:	3408      	adds	r4, #8
 80033b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80033b4:	9a03      	ldr	r2, [sp, #12]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	db01      	blt.n	80033be <_svfprintf_r+0xc56>
 80033ba:	07e9      	lsls	r1, r5, #31
 80033bc:	d50d      	bpl.n	80033da <_svfprintf_r+0xc72>
 80033be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	9b08      	ldr	r3, [sp, #32]
 80033c4:	6063      	str	r3, [r4, #4]
 80033c6:	9a08      	ldr	r2, [sp, #32]
 80033c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033ca:	4413      	add	r3, r2
 80033cc:	9321      	str	r3, [sp, #132]	; 0x84
 80033ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033d0:	3301      	adds	r3, #1
 80033d2:	2b07      	cmp	r3, #7
 80033d4:	9320      	str	r3, [sp, #128]	; 0x80
 80033d6:	dc60      	bgt.n	800349a <_svfprintf_r+0xd32>
 80033d8:	3408      	adds	r4, #8
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	9a03      	ldr	r2, [sp, #12]
 80033de:	1bde      	subs	r6, r3, r7
 80033e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	429e      	cmp	r6, r3
 80033e6:	bfa8      	it	ge
 80033e8:	461e      	movge	r6, r3
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	dd0b      	ble.n	8003406 <_svfprintf_r+0xc9e>
 80033ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033f0:	6066      	str	r6, [r4, #4]
 80033f2:	4433      	add	r3, r6
 80033f4:	9321      	str	r3, [sp, #132]	; 0x84
 80033f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033f8:	3301      	adds	r3, #1
 80033fa:	4447      	add	r7, r8
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	6027      	str	r7, [r4, #0]
 8003400:	9320      	str	r3, [sp, #128]	; 0x80
 8003402:	dc54      	bgt.n	80034ae <_svfprintf_r+0xd46>
 8003404:	3408      	adds	r4, #8
 8003406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003408:	9a03      	ldr	r2, [sp, #12]
 800340a:	2e00      	cmp	r6, #0
 800340c:	eba2 0303 	sub.w	r3, r2, r3
 8003410:	bfac      	ite	ge
 8003412:	1b9e      	subge	r6, r3, r6
 8003414:	461e      	movlt	r6, r3
 8003416:	2e00      	cmp	r6, #0
 8003418:	f77f acd7 	ble.w	8002dca <_svfprintf_r+0x662>
 800341c:	4f2f      	ldr	r7, [pc, #188]	; (80034dc <_svfprintf_r+0xd74>)
 800341e:	f04f 0810 	mov.w	r8, #16
 8003422:	2e10      	cmp	r6, #16
 8003424:	6027      	str	r7, [r4, #0]
 8003426:	f77f aee7 	ble.w	80031f8 <_svfprintf_r+0xa90>
 800342a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800342c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003430:	3310      	adds	r3, #16
 8003432:	9321      	str	r3, [sp, #132]	; 0x84
 8003434:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003436:	3301      	adds	r3, #1
 8003438:	2b07      	cmp	r3, #7
 800343a:	9320      	str	r3, [sp, #128]	; 0x80
 800343c:	dc41      	bgt.n	80034c2 <_svfprintf_r+0xd5a>
 800343e:	3408      	adds	r4, #8
 8003440:	3e10      	subs	r6, #16
 8003442:	e7ee      	b.n	8003422 <_svfprintf_r+0xcba>
 8003444:	aa1f      	add	r2, sp, #124	; 0x7c
 8003446:	4651      	mov	r1, sl
 8003448:	4658      	mov	r0, fp
 800344a:	f001 fcd7 	bl	8004dfc <__ssprint_r>
 800344e:	2800      	cmp	r0, #0
 8003450:	f040 80eb 	bne.w	800362a <_svfprintf_r+0xec2>
 8003454:	ac2c      	add	r4, sp, #176	; 0xb0
 8003456:	e796      	b.n	8003386 <_svfprintf_r+0xc1e>
 8003458:	2310      	movs	r3, #16
 800345a:	6063      	str	r3, [r4, #4]
 800345c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800345e:	3310      	adds	r3, #16
 8003460:	9321      	str	r3, [sp, #132]	; 0x84
 8003462:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003464:	3301      	adds	r3, #1
 8003466:	2b07      	cmp	r3, #7
 8003468:	9320      	str	r3, [sp, #128]	; 0x80
 800346a:	dc02      	bgt.n	8003472 <_svfprintf_r+0xd0a>
 800346c:	3408      	adds	r4, #8
 800346e:	3e10      	subs	r6, #16
 8003470:	e791      	b.n	8003396 <_svfprintf_r+0xc2e>
 8003472:	aa1f      	add	r2, sp, #124	; 0x7c
 8003474:	4651      	mov	r1, sl
 8003476:	4658      	mov	r0, fp
 8003478:	f001 fcc0 	bl	8004dfc <__ssprint_r>
 800347c:	2800      	cmp	r0, #0
 800347e:	f040 80d4 	bne.w	800362a <_svfprintf_r+0xec2>
 8003482:	ac2c      	add	r4, sp, #176	; 0xb0
 8003484:	e7f3      	b.n	800346e <_svfprintf_r+0xd06>
 8003486:	aa1f      	add	r2, sp, #124	; 0x7c
 8003488:	4651      	mov	r1, sl
 800348a:	4658      	mov	r0, fp
 800348c:	f001 fcb6 	bl	8004dfc <__ssprint_r>
 8003490:	2800      	cmp	r0, #0
 8003492:	f040 80ca 	bne.w	800362a <_svfprintf_r+0xec2>
 8003496:	ac2c      	add	r4, sp, #176	; 0xb0
 8003498:	e78b      	b.n	80033b2 <_svfprintf_r+0xc4a>
 800349a:	aa1f      	add	r2, sp, #124	; 0x7c
 800349c:	4651      	mov	r1, sl
 800349e:	4658      	mov	r0, fp
 80034a0:	f001 fcac 	bl	8004dfc <__ssprint_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f040 80c0 	bne.w	800362a <_svfprintf_r+0xec2>
 80034aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80034ac:	e795      	b.n	80033da <_svfprintf_r+0xc72>
 80034ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80034b0:	4651      	mov	r1, sl
 80034b2:	4658      	mov	r0, fp
 80034b4:	f001 fca2 	bl	8004dfc <__ssprint_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f040 80b6 	bne.w	800362a <_svfprintf_r+0xec2>
 80034be:	ac2c      	add	r4, sp, #176	; 0xb0
 80034c0:	e7a1      	b.n	8003406 <_svfprintf_r+0xc9e>
 80034c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034c4:	4651      	mov	r1, sl
 80034c6:	4658      	mov	r0, fp
 80034c8:	f001 fc98 	bl	8004dfc <__ssprint_r>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	f040 80ac 	bne.w	800362a <_svfprintf_r+0xec2>
 80034d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80034d4:	e7b4      	b.n	8003440 <_svfprintf_r+0xcd8>
 80034d6:	bf00      	nop
 80034d8:	0800557f 	.word	0x0800557f
 80034dc:	08005591 	.word	0x08005591
 80034e0:	9b03      	ldr	r3, [sp, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	dc01      	bgt.n	80034ea <_svfprintf_r+0xd82>
 80034e6:	07ea      	lsls	r2, r5, #31
 80034e8:	d576      	bpl.n	80035d8 <_svfprintf_r+0xe70>
 80034ea:	2301      	movs	r3, #1
 80034ec:	6063      	str	r3, [r4, #4]
 80034ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034f0:	f8c4 8000 	str.w	r8, [r4]
 80034f4:	3301      	adds	r3, #1
 80034f6:	9321      	str	r3, [sp, #132]	; 0x84
 80034f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034fa:	3301      	adds	r3, #1
 80034fc:	2b07      	cmp	r3, #7
 80034fe:	9320      	str	r3, [sp, #128]	; 0x80
 8003500:	dc36      	bgt.n	8003570 <_svfprintf_r+0xe08>
 8003502:	3408      	adds	r4, #8
 8003504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	9b08      	ldr	r3, [sp, #32]
 800350a:	6063      	str	r3, [r4, #4]
 800350c:	9a08      	ldr	r2, [sp, #32]
 800350e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003510:	4413      	add	r3, r2
 8003512:	9321      	str	r3, [sp, #132]	; 0x84
 8003514:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003516:	3301      	adds	r3, #1
 8003518:	2b07      	cmp	r3, #7
 800351a:	9320      	str	r3, [sp, #128]	; 0x80
 800351c:	dc31      	bgt.n	8003582 <_svfprintf_r+0xe1a>
 800351e:	3408      	adds	r4, #8
 8003520:	2300      	movs	r3, #0
 8003522:	2200      	movs	r2, #0
 8003524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003528:	f7fd fada 	bl	8000ae0 <__aeabi_dcmpeq>
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	1e5e      	subs	r6, r3, #1
 8003530:	2800      	cmp	r0, #0
 8003532:	d12f      	bne.n	8003594 <_svfprintf_r+0xe2c>
 8003534:	f108 0301 	add.w	r3, r8, #1
 8003538:	e884 0048 	stmia.w	r4, {r3, r6}
 800353c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800353e:	9a03      	ldr	r2, [sp, #12]
 8003540:	3b01      	subs	r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	9321      	str	r3, [sp, #132]	; 0x84
 8003546:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003548:	3301      	adds	r3, #1
 800354a:	2b07      	cmp	r3, #7
 800354c:	9320      	str	r3, [sp, #128]	; 0x80
 800354e:	dd4a      	ble.n	80035e6 <_svfprintf_r+0xe7e>
 8003550:	aa1f      	add	r2, sp, #124	; 0x7c
 8003552:	4651      	mov	r1, sl
 8003554:	4658      	mov	r0, fp
 8003556:	f001 fc51 	bl	8004dfc <__ssprint_r>
 800355a:	2800      	cmp	r0, #0
 800355c:	d165      	bne.n	800362a <_svfprintf_r+0xec2>
 800355e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003560:	ab1b      	add	r3, sp, #108	; 0x6c
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003566:	6063      	str	r3, [r4, #4]
 8003568:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800356a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800356c:	4413      	add	r3, r2
 800356e:	e41c      	b.n	8002daa <_svfprintf_r+0x642>
 8003570:	aa1f      	add	r2, sp, #124	; 0x7c
 8003572:	4651      	mov	r1, sl
 8003574:	4658      	mov	r0, fp
 8003576:	f001 fc41 	bl	8004dfc <__ssprint_r>
 800357a:	2800      	cmp	r0, #0
 800357c:	d155      	bne.n	800362a <_svfprintf_r+0xec2>
 800357e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003580:	e7c0      	b.n	8003504 <_svfprintf_r+0xd9c>
 8003582:	aa1f      	add	r2, sp, #124	; 0x7c
 8003584:	4651      	mov	r1, sl
 8003586:	4658      	mov	r0, fp
 8003588:	f001 fc38 	bl	8004dfc <__ssprint_r>
 800358c:	2800      	cmp	r0, #0
 800358e:	d14c      	bne.n	800362a <_svfprintf_r+0xec2>
 8003590:	ac2c      	add	r4, sp, #176	; 0xb0
 8003592:	e7c5      	b.n	8003520 <_svfprintf_r+0xdb8>
 8003594:	2e00      	cmp	r6, #0
 8003596:	dde3      	ble.n	8003560 <_svfprintf_r+0xdf8>
 8003598:	4f59      	ldr	r7, [pc, #356]	; (8003700 <_svfprintf_r+0xf98>)
 800359a:	f04f 0810 	mov.w	r8, #16
 800359e:	2e10      	cmp	r6, #16
 80035a0:	6027      	str	r7, [r4, #0]
 80035a2:	dc04      	bgt.n	80035ae <_svfprintf_r+0xe46>
 80035a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035a6:	6066      	str	r6, [r4, #4]
 80035a8:	441e      	add	r6, r3
 80035aa:	9621      	str	r6, [sp, #132]	; 0x84
 80035ac:	e7cb      	b.n	8003546 <_svfprintf_r+0xdde>
 80035ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035b0:	f8c4 8004 	str.w	r8, [r4, #4]
 80035b4:	3310      	adds	r3, #16
 80035b6:	9321      	str	r3, [sp, #132]	; 0x84
 80035b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035ba:	3301      	adds	r3, #1
 80035bc:	2b07      	cmp	r3, #7
 80035be:	9320      	str	r3, [sp, #128]	; 0x80
 80035c0:	dc02      	bgt.n	80035c8 <_svfprintf_r+0xe60>
 80035c2:	3408      	adds	r4, #8
 80035c4:	3e10      	subs	r6, #16
 80035c6:	e7ea      	b.n	800359e <_svfprintf_r+0xe36>
 80035c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80035ca:	4651      	mov	r1, sl
 80035cc:	4658      	mov	r0, fp
 80035ce:	f001 fc15 	bl	8004dfc <__ssprint_r>
 80035d2:	bb50      	cbnz	r0, 800362a <_svfprintf_r+0xec2>
 80035d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80035d6:	e7f5      	b.n	80035c4 <_svfprintf_r+0xe5c>
 80035d8:	2301      	movs	r3, #1
 80035da:	6063      	str	r3, [r4, #4]
 80035dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035de:	f8c4 8000 	str.w	r8, [r4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	e7ae      	b.n	8003544 <_svfprintf_r+0xddc>
 80035e6:	3408      	adds	r4, #8
 80035e8:	e7ba      	b.n	8003560 <_svfprintf_r+0xdf8>
 80035ea:	3408      	adds	r4, #8
 80035ec:	f7ff bbed 	b.w	8002dca <_svfprintf_r+0x662>
 80035f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035f4:	1a9d      	subs	r5, r3, r2
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	f77f abea 	ble.w	8002dd0 <_svfprintf_r+0x668>
 80035fc:	2610      	movs	r6, #16
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <_svfprintf_r+0xf9c>)
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	2d10      	cmp	r5, #16
 8003604:	dc1b      	bgt.n	800363e <_svfprintf_r+0xed6>
 8003606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003608:	6065      	str	r5, [r4, #4]
 800360a:	441d      	add	r5, r3
 800360c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800360e:	9521      	str	r5, [sp, #132]	; 0x84
 8003610:	3301      	adds	r3, #1
 8003612:	2b07      	cmp	r3, #7
 8003614:	9320      	str	r3, [sp, #128]	; 0x80
 8003616:	f77f abdb 	ble.w	8002dd0 <_svfprintf_r+0x668>
 800361a:	aa1f      	add	r2, sp, #124	; 0x7c
 800361c:	4651      	mov	r1, sl
 800361e:	4658      	mov	r0, fp
 8003620:	f001 fbec 	bl	8004dfc <__ssprint_r>
 8003624:	2800      	cmp	r0, #0
 8003626:	f43f abd3 	beq.w	8002dd0 <_svfprintf_r+0x668>
 800362a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800362e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003634:	bf18      	it	ne
 8003636:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800363a:	f7ff b8b9 	b.w	80027b0 <_svfprintf_r+0x48>
 800363e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003640:	6066      	str	r6, [r4, #4]
 8003642:	3310      	adds	r3, #16
 8003644:	9321      	str	r3, [sp, #132]	; 0x84
 8003646:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003648:	3301      	adds	r3, #1
 800364a:	2b07      	cmp	r3, #7
 800364c:	9320      	str	r3, [sp, #128]	; 0x80
 800364e:	dc02      	bgt.n	8003656 <_svfprintf_r+0xeee>
 8003650:	3408      	adds	r4, #8
 8003652:	3d10      	subs	r5, #16
 8003654:	e7d3      	b.n	80035fe <_svfprintf_r+0xe96>
 8003656:	aa1f      	add	r2, sp, #124	; 0x7c
 8003658:	4651      	mov	r1, sl
 800365a:	4658      	mov	r0, fp
 800365c:	f001 fbce 	bl	8004dfc <__ssprint_r>
 8003660:	2800      	cmp	r0, #0
 8003662:	d1e2      	bne.n	800362a <_svfprintf_r+0xec2>
 8003664:	ac2c      	add	r4, sp, #176	; 0xb0
 8003666:	e7f4      	b.n	8003652 <_svfprintf_r+0xeea>
 8003668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0dd      	beq.n	800362a <_svfprintf_r+0xec2>
 800366e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003670:	4651      	mov	r1, sl
 8003672:	4658      	mov	r0, fp
 8003674:	f001 fbc2 	bl	8004dfc <__ssprint_r>
 8003678:	e7d7      	b.n	800362a <_svfprintf_r+0xec2>
 800367a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	f7fd fa5f 	bl	8000b44 <__aeabi_dcmpun>
 8003686:	2800      	cmp	r0, #0
 8003688:	f43f aa44 	beq.w	8002b14 <_svfprintf_r+0x3ac>
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <_svfprintf_r+0xfa0>)
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <_svfprintf_r+0xfa4>)
 8003690:	f7ff ba34 	b.w	8002afc <_svfprintf_r+0x394>
 8003694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003696:	eba3 0308 	sub.w	r3, r3, r8
 800369a:	9303      	str	r3, [sp, #12]
 800369c:	f7ff bab5 	b.w	8002c0a <_svfprintf_r+0x4a2>
 80036a0:	ea56 0207 	orrs.w	r2, r6, r7
 80036a4:	950b      	str	r5, [sp, #44]	; 0x2c
 80036a6:	f43f ac2b 	beq.w	8002f00 <_svfprintf_r+0x798>
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	f43f ac9d 	beq.w	8002fea <_svfprintf_r+0x882>
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	f43f acbd 	beq.w	8003030 <_svfprintf_r+0x8c8>
 80036b6:	ab2c      	add	r3, sp, #176	; 0xb0
 80036b8:	08f1      	lsrs	r1, r6, #3
 80036ba:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80036be:	08f8      	lsrs	r0, r7, #3
 80036c0:	f006 0207 	and.w	r2, r6, #7
 80036c4:	4607      	mov	r7, r0
 80036c6:	460e      	mov	r6, r1
 80036c8:	3230      	adds	r2, #48	; 0x30
 80036ca:	ea56 0107 	orrs.w	r1, r6, r7
 80036ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80036d2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80036d6:	f47f ac86 	bne.w	8002fe6 <_svfprintf_r+0x87e>
 80036da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036dc:	07c9      	lsls	r1, r1, #31
 80036de:	d506      	bpl.n	80036ee <_svfprintf_r+0xf86>
 80036e0:	2a30      	cmp	r2, #48	; 0x30
 80036e2:	d004      	beq.n	80036ee <_svfprintf_r+0xf86>
 80036e4:	2230      	movs	r2, #48	; 0x30
 80036e6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80036ea:	f1a3 0802 	sub.w	r8, r3, #2
 80036ee:	464e      	mov	r6, r9
 80036f0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80036f4:	eba9 0908 	sub.w	r9, r9, r8
 80036f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036fa:	2700      	movs	r7, #0
 80036fc:	f7ff bad1 	b.w	8002ca2 <_svfprintf_r+0x53a>
 8003700:	08005591 	.word	0x08005591
 8003704:	08005581 	.word	0x08005581
 8003708:	08005555 	.word	0x08005555
 800370c:	08005559 	.word	0x08005559

08003710 <quorem>:
 8003710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003714:	6903      	ldr	r3, [r0, #16]
 8003716:	690c      	ldr	r4, [r1, #16]
 8003718:	429c      	cmp	r4, r3
 800371a:	4680      	mov	r8, r0
 800371c:	f300 8082 	bgt.w	8003824 <quorem+0x114>
 8003720:	3c01      	subs	r4, #1
 8003722:	f101 0714 	add.w	r7, r1, #20
 8003726:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800372a:	f100 0614 	add.w	r6, r0, #20
 800372e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003732:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003736:	eb06 030e 	add.w	r3, r6, lr
 800373a:	3501      	adds	r5, #1
 800373c:	eb07 090e 	add.w	r9, r7, lr
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	fbb0 f5f5 	udiv	r5, r0, r5
 8003746:	b395      	cbz	r5, 80037ae <quorem+0x9e>
 8003748:	f04f 0a00 	mov.w	sl, #0
 800374c:	4638      	mov	r0, r7
 800374e:	46b4      	mov	ip, r6
 8003750:	46d3      	mov	fp, sl
 8003752:	f850 2b04 	ldr.w	r2, [r0], #4
 8003756:	b293      	uxth	r3, r2
 8003758:	fb05 a303 	mla	r3, r5, r3, sl
 800375c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003760:	b29b      	uxth	r3, r3
 8003762:	ebab 0303 	sub.w	r3, fp, r3
 8003766:	0c12      	lsrs	r2, r2, #16
 8003768:	f8bc b000 	ldrh.w	fp, [ip]
 800376c:	fb05 a202 	mla	r2, r5, r2, sl
 8003770:	fa13 f38b 	uxtah	r3, r3, fp
 8003774:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003778:	fa1f fb82 	uxth.w	fp, r2
 800377c:	f8dc 2000 	ldr.w	r2, [ip]
 8003780:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003788:	b29b      	uxth	r3, r3
 800378a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800378e:	4581      	cmp	r9, r0
 8003790:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003794:	f84c 3b04 	str.w	r3, [ip], #4
 8003798:	d2db      	bcs.n	8003752 <quorem+0x42>
 800379a:	f856 300e 	ldr.w	r3, [r6, lr]
 800379e:	b933      	cbnz	r3, 80037ae <quorem+0x9e>
 80037a0:	9b01      	ldr	r3, [sp, #4]
 80037a2:	3b04      	subs	r3, #4
 80037a4:	429e      	cmp	r6, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	d330      	bcc.n	800380c <quorem+0xfc>
 80037aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80037ae:	4640      	mov	r0, r8
 80037b0:	f001 fa4d 	bl	8004c4e <__mcmp>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	db25      	blt.n	8003804 <quorem+0xf4>
 80037b8:	3501      	adds	r5, #1
 80037ba:	4630      	mov	r0, r6
 80037bc:	f04f 0e00 	mov.w	lr, #0
 80037c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80037c4:	f8d0 c000 	ldr.w	ip, [r0]
 80037c8:	b293      	uxth	r3, r2
 80037ca:	ebae 0303 	sub.w	r3, lr, r3
 80037ce:	0c12      	lsrs	r2, r2, #16
 80037d0:	fa13 f38c 	uxtah	r3, r3, ip
 80037d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80037d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037dc:	b29b      	uxth	r3, r3
 80037de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037e2:	45b9      	cmp	r9, r7
 80037e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80037e8:	f840 3b04 	str.w	r3, [r0], #4
 80037ec:	d2e8      	bcs.n	80037c0 <quorem+0xb0>
 80037ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80037f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80037f6:	b92a      	cbnz	r2, 8003804 <quorem+0xf4>
 80037f8:	3b04      	subs	r3, #4
 80037fa:	429e      	cmp	r6, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	d30b      	bcc.n	8003818 <quorem+0x108>
 8003800:	f8c8 4010 	str.w	r4, [r8, #16]
 8003804:	4628      	mov	r0, r5
 8003806:	b003      	add	sp, #12
 8003808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	3b04      	subs	r3, #4
 8003810:	2a00      	cmp	r2, #0
 8003812:	d1ca      	bne.n	80037aa <quorem+0x9a>
 8003814:	3c01      	subs	r4, #1
 8003816:	e7c5      	b.n	80037a4 <quorem+0x94>
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	3b04      	subs	r3, #4
 800381c:	2a00      	cmp	r2, #0
 800381e:	d1ef      	bne.n	8003800 <quorem+0xf0>
 8003820:	3c01      	subs	r4, #1
 8003822:	e7ea      	b.n	80037fa <quorem+0xea>
 8003824:	2000      	movs	r0, #0
 8003826:	e7ee      	b.n	8003806 <quorem+0xf6>

08003828 <_dtoa_r>:
 8003828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	ec57 6b10 	vmov	r6, r7, d0
 8003830:	b097      	sub	sp, #92	; 0x5c
 8003832:	e9cd 6700 	strd	r6, r7, [sp]
 8003836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003838:	9107      	str	r1, [sp, #28]
 800383a:	4604      	mov	r4, r0
 800383c:	920a      	str	r2, [sp, #40]	; 0x28
 800383e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003840:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003842:	b93e      	cbnz	r6, 8003854 <_dtoa_r+0x2c>
 8003844:	2010      	movs	r0, #16
 8003846:	f000 fdcb 	bl	80043e0 <malloc>
 800384a:	6260      	str	r0, [r4, #36]	; 0x24
 800384c:	6046      	str	r6, [r0, #4]
 800384e:	6086      	str	r6, [r0, #8]
 8003850:	6006      	str	r6, [r0, #0]
 8003852:	60c6      	str	r6, [r0, #12]
 8003854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	b151      	cbz	r1, 8003870 <_dtoa_r+0x48>
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	604a      	str	r2, [r1, #4]
 800385e:	2301      	movs	r3, #1
 8003860:	4093      	lsls	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
 8003864:	4620      	mov	r0, r4
 8003866:	f001 f81d 	bl	80048a4 <_Bfree>
 800386a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	bfbf      	itttt	lt
 8003876:	2301      	movlt	r3, #1
 8003878:	602b      	strlt	r3, [r5, #0]
 800387a:	9b01      	ldrlt	r3, [sp, #4]
 800387c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003880:	bfb2      	itee	lt
 8003882:	9301      	strlt	r3, [sp, #4]
 8003884:	2300      	movge	r3, #0
 8003886:	602b      	strge	r3, [r5, #0]
 8003888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800388c:	4ba8      	ldr	r3, [pc, #672]	; (8003b30 <_dtoa_r+0x308>)
 800388e:	ea33 0308 	bics.w	r3, r3, r8
 8003892:	d11b      	bne.n	80038cc <_dtoa_r+0xa4>
 8003894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003896:	f242 730f 	movw	r3, #9999	; 0x270f
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	9b00      	ldr	r3, [sp, #0]
 800389e:	b923      	cbnz	r3, 80038aa <_dtoa_r+0x82>
 80038a0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f000 8578 	beq.w	800439a <_dtoa_r+0xb72>
 80038aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038ac:	b953      	cbnz	r3, 80038c4 <_dtoa_r+0x9c>
 80038ae:	4ba1      	ldr	r3, [pc, #644]	; (8003b34 <_dtoa_r+0x30c>)
 80038b0:	e021      	b.n	80038f6 <_dtoa_r+0xce>
 80038b2:	4ba1      	ldr	r3, [pc, #644]	; (8003b38 <_dtoa_r+0x310>)
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	3308      	adds	r3, #8
 80038b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	9802      	ldr	r0, [sp, #8]
 80038be:	b017      	add	sp, #92	; 0x5c
 80038c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c4:	4b9b      	ldr	r3, [pc, #620]	; (8003b34 <_dtoa_r+0x30c>)
 80038c6:	9302      	str	r3, [sp, #8]
 80038c8:	3303      	adds	r3, #3
 80038ca:	e7f5      	b.n	80038b8 <_dtoa_r+0x90>
 80038cc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2300      	movs	r3, #0
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fd f902 	bl	8000ae0 <__aeabi_dcmpeq>
 80038dc:	4681      	mov	r9, r0
 80038de:	b160      	cbz	r0, 80038fa <_dtoa_r+0xd2>
 80038e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038e2:	2301      	movs	r3, #1
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8553 	beq.w	8004394 <_dtoa_r+0xb6c>
 80038ee:	4b93      	ldr	r3, [pc, #588]	; (8003b3c <_dtoa_r+0x314>)
 80038f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	e7e0      	b.n	80038bc <_dtoa_r+0x94>
 80038fa:	aa14      	add	r2, sp, #80	; 0x50
 80038fc:	a915      	add	r1, sp, #84	; 0x54
 80038fe:	ec47 6b10 	vmov	d0, r6, r7
 8003902:	4620      	mov	r0, r4
 8003904:	f001 fa1b 	bl	8004d3e <__d2b>
 8003908:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800390c:	4682      	mov	sl, r0
 800390e:	2d00      	cmp	r5, #0
 8003910:	d07e      	beq.n	8003a10 <_dtoa_r+0x1e8>
 8003912:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003916:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800391a:	4630      	mov	r0, r6
 800391c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003920:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003924:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003928:	2200      	movs	r2, #0
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <_dtoa_r+0x318>)
 800392c:	f7fc fcbc 	bl	80002a8 <__aeabi_dsub>
 8003930:	a379      	add	r3, pc, #484	; (adr r3, 8003b18 <_dtoa_r+0x2f0>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fe6b 	bl	8000610 <__aeabi_dmul>
 800393a:	a379      	add	r3, pc, #484	; (adr r3, 8003b20 <_dtoa_r+0x2f8>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f7fc fcb4 	bl	80002ac <__adddf3>
 8003944:	4606      	mov	r6, r0
 8003946:	4628      	mov	r0, r5
 8003948:	460f      	mov	r7, r1
 800394a:	f7fc fdfb 	bl	8000544 <__aeabi_i2d>
 800394e:	a376      	add	r3, pc, #472	; (adr r3, 8003b28 <_dtoa_r+0x300>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f7fc fe5c 	bl	8000610 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4630      	mov	r0, r6
 800395e:	4639      	mov	r1, r7
 8003960:	f7fc fca4 	bl	80002ac <__adddf3>
 8003964:	4606      	mov	r6, r0
 8003966:	460f      	mov	r7, r1
 8003968:	f7fd f902 	bl	8000b70 <__aeabi_d2iz>
 800396c:	2200      	movs	r2, #0
 800396e:	4683      	mov	fp, r0
 8003970:	2300      	movs	r3, #0
 8003972:	4630      	mov	r0, r6
 8003974:	4639      	mov	r1, r7
 8003976:	f7fd f8bd 	bl	8000af4 <__aeabi_dcmplt>
 800397a:	b158      	cbz	r0, 8003994 <_dtoa_r+0x16c>
 800397c:	4658      	mov	r0, fp
 800397e:	f7fc fde1 	bl	8000544 <__aeabi_i2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fd f8a9 	bl	8000ae0 <__aeabi_dcmpeq>
 800398e:	b908      	cbnz	r0, 8003994 <_dtoa_r+0x16c>
 8003990:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003994:	f1bb 0f16 	cmp.w	fp, #22
 8003998:	d859      	bhi.n	8003a4e <_dtoa_r+0x226>
 800399a:	496a      	ldr	r1, [pc, #424]	; (8003b44 <_dtoa_r+0x31c>)
 800399c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80039a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a8:	f7fd f8c2 	bl	8000b30 <__aeabi_dcmpgt>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d050      	beq.n	8003a52 <_dtoa_r+0x22a>
 80039b0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80039b4:	2300      	movs	r3, #0
 80039b6:	930e      	str	r3, [sp, #56]	; 0x38
 80039b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80039ba:	1b5d      	subs	r5, r3, r5
 80039bc:	1e6b      	subs	r3, r5, #1
 80039be:	9306      	str	r3, [sp, #24]
 80039c0:	bf45      	ittet	mi
 80039c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80039c6:	9305      	strmi	r3, [sp, #20]
 80039c8:	2300      	movpl	r3, #0
 80039ca:	2300      	movmi	r3, #0
 80039cc:	bf4c      	ite	mi
 80039ce:	9306      	strmi	r3, [sp, #24]
 80039d0:	9305      	strpl	r3, [sp, #20]
 80039d2:	f1bb 0f00 	cmp.w	fp, #0
 80039d6:	db3e      	blt.n	8003a56 <_dtoa_r+0x22e>
 80039d8:	9b06      	ldr	r3, [sp, #24]
 80039da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80039de:	445b      	add	r3, fp
 80039e0:	9306      	str	r3, [sp, #24]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9308      	str	r3, [sp, #32]
 80039e6:	9b07      	ldr	r3, [sp, #28]
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	f200 80af 	bhi.w	8003b4c <_dtoa_r+0x324>
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	bfc4      	itt	gt
 80039f2:	3b04      	subgt	r3, #4
 80039f4:	9307      	strgt	r3, [sp, #28]
 80039f6:	9b07      	ldr	r3, [sp, #28]
 80039f8:	f1a3 0302 	sub.w	r3, r3, #2
 80039fc:	bfcc      	ite	gt
 80039fe:	2600      	movgt	r6, #0
 8003a00:	2601      	movle	r6, #1
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	f200 80ae 	bhi.w	8003b64 <_dtoa_r+0x33c>
 8003a08:	e8df f003 	tbb	[pc, r3]
 8003a0c:	772f8482 	.word	0x772f8482
 8003a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003a14:	441d      	add	r5, r3
 8003a16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	dd11      	ble.n	8003a42 <_dtoa_r+0x21a>
 8003a1e:	9a00      	ldr	r2, [sp, #0]
 8003a20:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003a24:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003a28:	fa22 f000 	lsr.w	r0, r2, r0
 8003a2c:	fa08 f303 	lsl.w	r3, r8, r3
 8003a30:	4318      	orrs	r0, r3
 8003a32:	f7fc fd77 	bl	8000524 <__aeabi_ui2d>
 8003a36:	2301      	movs	r3, #1
 8003a38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003a3c:	3d01      	subs	r5, #1
 8003a3e:	9312      	str	r3, [sp, #72]	; 0x48
 8003a40:	e772      	b.n	8003928 <_dtoa_r+0x100>
 8003a42:	f1c3 0020 	rsb	r0, r3, #32
 8003a46:	9b00      	ldr	r3, [sp, #0]
 8003a48:	fa03 f000 	lsl.w	r0, r3, r0
 8003a4c:	e7f1      	b.n	8003a32 <_dtoa_r+0x20a>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e7b1      	b.n	80039b6 <_dtoa_r+0x18e>
 8003a52:	900e      	str	r0, [sp, #56]	; 0x38
 8003a54:	e7b0      	b.n	80039b8 <_dtoa_r+0x190>
 8003a56:	9b05      	ldr	r3, [sp, #20]
 8003a58:	eba3 030b 	sub.w	r3, r3, fp
 8003a5c:	9305      	str	r3, [sp, #20]
 8003a5e:	f1cb 0300 	rsb	r3, fp, #0
 8003a62:	9308      	str	r3, [sp, #32]
 8003a64:	2300      	movs	r3, #0
 8003a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a68:	e7bd      	b.n	80039e6 <_dtoa_r+0x1be>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dd7a      	ble.n	8003b6a <_dtoa_r+0x342>
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	606a      	str	r2, [r5, #4]
 8003a7e:	2104      	movs	r1, #4
 8003a80:	f101 0214 	add.w	r2, r1, #20
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d975      	bls.n	8003b74 <_dtoa_r+0x34c>
 8003a88:	6869      	ldr	r1, [r5, #4]
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 fed6 	bl	800483c <_Balloc>
 8003a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a92:	6028      	str	r0, [r5, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9302      	str	r3, [sp, #8]
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	2b0e      	cmp	r3, #14
 8003a9c:	f200 80e5 	bhi.w	8003c6a <_dtoa_r+0x442>
 8003aa0:	2e00      	cmp	r6, #0
 8003aa2:	f000 80e2 	beq.w	8003c6a <_dtoa_r+0x442>
 8003aa6:	ed9d 7b00 	vldr	d7, [sp]
 8003aaa:	f1bb 0f00 	cmp.w	fp, #0
 8003aae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003ab2:	dd74      	ble.n	8003b9e <_dtoa_r+0x376>
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <_dtoa_r+0x31c>)
 8003ab6:	f00b 030f 	and.w	r3, fp, #15
 8003aba:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003abe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ac2:	06f0      	lsls	r0, r6, #27
 8003ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ac8:	d559      	bpl.n	8003b7e <_dtoa_r+0x356>
 8003aca:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <_dtoa_r+0x320>)
 8003acc:	ec51 0b17 	vmov	r0, r1, d7
 8003ad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ad4:	f7fc fec6 	bl	8000864 <__aeabi_ddiv>
 8003ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8003adc:	f006 060f 	and.w	r6, r6, #15
 8003ae0:	2503      	movs	r5, #3
 8003ae2:	4f19      	ldr	r7, [pc, #100]	; (8003b48 <_dtoa_r+0x320>)
 8003ae4:	2e00      	cmp	r6, #0
 8003ae6:	d14c      	bne.n	8003b82 <_dtoa_r+0x35a>
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003af0:	f7fc feb8 	bl	8000864 <__aeabi_ddiv>
 8003af4:	e9cd 0100 	strd	r0, r1, [sp]
 8003af8:	e06a      	b.n	8003bd0 <_dtoa_r+0x3a8>
 8003afa:	2301      	movs	r3, #1
 8003afc:	9309      	str	r3, [sp, #36]	; 0x24
 8003afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b00:	445b      	add	r3, fp
 8003b02:	9304      	str	r3, [sp, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	9303      	str	r3, [sp, #12]
 8003b0a:	bfb8      	it	lt
 8003b0c:	2301      	movlt	r3, #1
 8003b0e:	e7b3      	b.n	8003a78 <_dtoa_r+0x250>
 8003b10:	2300      	movs	r3, #0
 8003b12:	e7ab      	b.n	8003a6c <_dtoa_r+0x244>
 8003b14:	2300      	movs	r3, #0
 8003b16:	e7f1      	b.n	8003afc <_dtoa_r+0x2d4>
 8003b18:	636f4361 	.word	0x636f4361
 8003b1c:	3fd287a7 	.word	0x3fd287a7
 8003b20:	8b60c8b3 	.word	0x8b60c8b3
 8003b24:	3fc68a28 	.word	0x3fc68a28
 8003b28:	509f79fb 	.word	0x509f79fb
 8003b2c:	3fd34413 	.word	0x3fd34413
 8003b30:	7ff00000 	.word	0x7ff00000
 8003b34:	080055aa 	.word	0x080055aa
 8003b38:	080055a1 	.word	0x080055a1
 8003b3c:	08005580 	.word	0x08005580
 8003b40:	3ff80000 	.word	0x3ff80000
 8003b44:	080055d8 	.word	0x080055d8
 8003b48:	080055b0 	.word	0x080055b0
 8003b4c:	2601      	movs	r6, #1
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9307      	str	r3, [sp, #28]
 8003b52:	9609      	str	r6, [sp, #36]	; 0x24
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2312      	movs	r3, #18
 8003b60:	920a      	str	r2, [sp, #40]	; 0x28
 8003b62:	e789      	b.n	8003a78 <_dtoa_r+0x250>
 8003b64:	2301      	movs	r3, #1
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	e7f4      	b.n	8003b54 <_dtoa_r+0x32c>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	461a      	mov	r2, r3
 8003b72:	e7f5      	b.n	8003b60 <_dtoa_r+0x338>
 8003b74:	686a      	ldr	r2, [r5, #4]
 8003b76:	3201      	adds	r2, #1
 8003b78:	606a      	str	r2, [r5, #4]
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	e780      	b.n	8003a80 <_dtoa_r+0x258>
 8003b7e:	2502      	movs	r5, #2
 8003b80:	e7af      	b.n	8003ae2 <_dtoa_r+0x2ba>
 8003b82:	07f1      	lsls	r1, r6, #31
 8003b84:	d508      	bpl.n	8003b98 <_dtoa_r+0x370>
 8003b86:	4640      	mov	r0, r8
 8003b88:	4649      	mov	r1, r9
 8003b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8e:	f7fc fd3f 	bl	8000610 <__aeabi_dmul>
 8003b92:	3501      	adds	r5, #1
 8003b94:	4680      	mov	r8, r0
 8003b96:	4689      	mov	r9, r1
 8003b98:	1076      	asrs	r6, r6, #1
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	e7a2      	b.n	8003ae4 <_dtoa_r+0x2bc>
 8003b9e:	f000 809d 	beq.w	8003cdc <_dtoa_r+0x4b4>
 8003ba2:	f1cb 0600 	rsb	r6, fp, #0
 8003ba6:	4b9f      	ldr	r3, [pc, #636]	; (8003e24 <_dtoa_r+0x5fc>)
 8003ba8:	4f9f      	ldr	r7, [pc, #636]	; (8003e28 <_dtoa_r+0x600>)
 8003baa:	f006 020f 	and.w	r2, r6, #15
 8003bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003bba:	f7fc fd29 	bl	8000610 <__aeabi_dmul>
 8003bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8003bc2:	1136      	asrs	r6, r6, #4
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2502      	movs	r5, #2
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	d17c      	bne.n	8003cc6 <_dtoa_r+0x49e>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d191      	bne.n	8003af4 <_dtoa_r+0x2cc>
 8003bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8084 	beq.w	8003ce0 <_dtoa_r+0x4b8>
 8003bd8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4b93      	ldr	r3, [pc, #588]	; (8003e2c <_dtoa_r+0x604>)
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7fc ff86 	bl	8000af4 <__aeabi_dcmplt>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d079      	beq.n	8003ce0 <_dtoa_r+0x4b8>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d076      	beq.n	8003ce0 <_dtoa_r+0x4b8>
 8003bf2:	9b04      	ldr	r3, [sp, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dd34      	ble.n	8003c62 <_dtoa_r+0x43a>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4b8d      	ldr	r3, [pc, #564]	; (8003e30 <_dtoa_r+0x608>)
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	4649      	mov	r1, r9
 8003c00:	f7fc fd06 	bl	8000610 <__aeabi_dmul>
 8003c04:	e9cd 0100 	strd	r0, r1, [sp]
 8003c08:	9e04      	ldr	r6, [sp, #16]
 8003c0a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003c0e:	3501      	adds	r5, #1
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7fc fc97 	bl	8000544 <__aeabi_i2d>
 8003c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c1a:	f7fc fcf9 	bl	8000610 <__aeabi_dmul>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4b84      	ldr	r3, [pc, #528]	; (8003e34 <_dtoa_r+0x60c>)
 8003c22:	f7fc fb43 	bl	80002ac <__adddf3>
 8003c26:	4680      	mov	r8, r0
 8003c28:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	d15a      	bne.n	8003ce6 <_dtoa_r+0x4be>
 8003c30:	2200      	movs	r2, #0
 8003c32:	4b81      	ldr	r3, [pc, #516]	; (8003e38 <_dtoa_r+0x610>)
 8003c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c38:	f7fc fb36 	bl	80002a8 <__aeabi_dsub>
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	e9cd 0100 	strd	r0, r1, [sp]
 8003c44:	f7fc ff74 	bl	8000b30 <__aeabi_dcmpgt>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f040 829b 	bne.w	8004184 <_dtoa_r+0x95c>
 8003c4e:	4642      	mov	r2, r8
 8003c50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c58:	f7fc ff4c 	bl	8000af4 <__aeabi_dcmplt>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	f040 828f 	bne.w	8004180 <_dtoa_r+0x958>
 8003c62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c66:	e9cd 2300 	strd	r2, r3, [sp]
 8003c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f2c0 8150 	blt.w	8003f12 <_dtoa_r+0x6ea>
 8003c72:	f1bb 0f0e 	cmp.w	fp, #14
 8003c76:	f300 814c 	bgt.w	8003f12 <_dtoa_r+0x6ea>
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <_dtoa_r+0x5fc>)
 8003c7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f280 80da 	bge.w	8003e40 <_dtoa_r+0x618>
 8003c8c:	9b03      	ldr	r3, [sp, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f300 80d6 	bgt.w	8003e40 <_dtoa_r+0x618>
 8003c94:	f040 8273 	bne.w	800417e <_dtoa_r+0x956>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <_dtoa_r+0x610>)
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	f7fc fcb6 	bl	8000610 <__aeabi_dmul>
 8003ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ca8:	f7fc ff38 	bl	8000b1c <__aeabi_dcmpge>
 8003cac:	9e03      	ldr	r6, [sp, #12]
 8003cae:	4637      	mov	r7, r6
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 824a 	bne.w	800414a <_dtoa_r+0x922>
 8003cb6:	9b02      	ldr	r3, [sp, #8]
 8003cb8:	9a02      	ldr	r2, [sp, #8]
 8003cba:	1c5d      	adds	r5, r3, #1
 8003cbc:	2331      	movs	r3, #49	; 0x31
 8003cbe:	7013      	strb	r3, [r2, #0]
 8003cc0:	f10b 0b01 	add.w	fp, fp, #1
 8003cc4:	e245      	b.n	8004152 <_dtoa_r+0x92a>
 8003cc6:	07f2      	lsls	r2, r6, #31
 8003cc8:	d505      	bpl.n	8003cd6 <_dtoa_r+0x4ae>
 8003cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cce:	f7fc fc9f 	bl	8000610 <__aeabi_dmul>
 8003cd2:	3501      	adds	r5, #1
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	1076      	asrs	r6, r6, #1
 8003cd8:	3708      	adds	r7, #8
 8003cda:	e775      	b.n	8003bc8 <_dtoa_r+0x3a0>
 8003cdc:	2502      	movs	r5, #2
 8003cde:	e777      	b.n	8003bd0 <_dtoa_r+0x3a8>
 8003ce0:	465f      	mov	r7, fp
 8003ce2:	9e03      	ldr	r6, [sp, #12]
 8003ce4:	e794      	b.n	8003c10 <_dtoa_r+0x3e8>
 8003ce6:	9a02      	ldr	r2, [sp, #8]
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <_dtoa_r+0x5fc>)
 8003cea:	4432      	add	r2, r6
 8003cec:	9213      	str	r2, [sp, #76]	; 0x4c
 8003cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cf0:	1e71      	subs	r1, r6, #1
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d048      	beq.n	8003d88 <_dtoa_r+0x560>
 8003cf6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	494e      	ldr	r1, [pc, #312]	; (8003e3c <_dtoa_r+0x614>)
 8003d02:	f7fc fdaf 	bl	8000864 <__aeabi_ddiv>
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	f7fc facd 	bl	80002a8 <__aeabi_dsub>
 8003d0e:	9d02      	ldr	r5, [sp, #8]
 8003d10:	4680      	mov	r8, r0
 8003d12:	4689      	mov	r9, r1
 8003d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d18:	f7fc ff2a 	bl	8000b70 <__aeabi_d2iz>
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	f7fc fc11 	bl	8000544 <__aeabi_i2d>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d2a:	f7fc fabd 	bl	80002a8 <__aeabi_dsub>
 8003d2e:	3630      	adds	r6, #48	; 0x30
 8003d30:	f805 6b01 	strb.w	r6, [r5], #1
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	e9cd 0100 	strd	r0, r1, [sp]
 8003d3c:	f7fc feda 	bl	8000af4 <__aeabi_dcmplt>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d165      	bne.n	8003e10 <_dtoa_r+0x5e8>
 8003d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	4938      	ldr	r1, [pc, #224]	; (8003e2c <_dtoa_r+0x604>)
 8003d4c:	f7fc faac 	bl	80002a8 <__aeabi_dsub>
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	f7fc fece 	bl	8000af4 <__aeabi_dcmplt>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f040 80ba 	bne.w	8003ed2 <_dtoa_r+0x6aa>
 8003d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d60:	429d      	cmp	r5, r3
 8003d62:	f43f af7e 	beq.w	8003c62 <_dtoa_r+0x43a>
 8003d66:	2200      	movs	r2, #0
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <_dtoa_r+0x608>)
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	f7fc fc4f 	bl	8000610 <__aeabi_dmul>
 8003d72:	2200      	movs	r2, #0
 8003d74:	4680      	mov	r8, r0
 8003d76:	4689      	mov	r9, r1
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <_dtoa_r+0x608>)
 8003d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d7e:	f7fc fc47 	bl	8000610 <__aeabi_dmul>
 8003d82:	e9cd 0100 	strd	r0, r1, [sp]
 8003d86:	e7c5      	b.n	8003d14 <_dtoa_r+0x4ec>
 8003d88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d94:	f7fc fc3c 	bl	8000610 <__aeabi_dmul>
 8003d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d9c:	9d02      	ldr	r5, [sp, #8]
 8003d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003da2:	f7fc fee5 	bl	8000b70 <__aeabi_d2iz>
 8003da6:	4606      	mov	r6, r0
 8003da8:	f7fc fbcc 	bl	8000544 <__aeabi_i2d>
 8003dac:	3630      	adds	r6, #48	; 0x30
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003db6:	f7fc fa77 	bl	80002a8 <__aeabi_dsub>
 8003dba:	f805 6b01 	strb.w	r6, [r5], #1
 8003dbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	4689      	mov	r9, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	d125      	bne.n	8003e18 <_dtoa_r+0x5f0>
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <_dtoa_r+0x614>)
 8003dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dd2:	f7fc fa6b 	bl	80002ac <__adddf3>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	f7fc fea7 	bl	8000b30 <__aeabi_dcmpgt>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d175      	bne.n	8003ed2 <_dtoa_r+0x6aa>
 8003de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dea:	2000      	movs	r0, #0
 8003dec:	4913      	ldr	r1, [pc, #76]	; (8003e3c <_dtoa_r+0x614>)
 8003dee:	f7fc fa5b 	bl	80002a8 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4640      	mov	r0, r8
 8003df8:	4649      	mov	r1, r9
 8003dfa:	f7fc fe7b 	bl	8000af4 <__aeabi_dcmplt>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f43f af2f 	beq.w	8003c62 <_dtoa_r+0x43a>
 8003e04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003e0e:	d001      	beq.n	8003e14 <_dtoa_r+0x5ec>
 8003e10:	46bb      	mov	fp, r7
 8003e12:	e04d      	b.n	8003eb0 <_dtoa_r+0x688>
 8003e14:	4615      	mov	r5, r2
 8003e16:	e7f5      	b.n	8003e04 <_dtoa_r+0x5dc>
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <_dtoa_r+0x608>)
 8003e1a:	f7fc fbf9 	bl	8000610 <__aeabi_dmul>
 8003e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8003e22:	e7bc      	b.n	8003d9e <_dtoa_r+0x576>
 8003e24:	080055d8 	.word	0x080055d8
 8003e28:	080055b0 	.word	0x080055b0
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	40240000 	.word	0x40240000
 8003e34:	401c0000 	.word	0x401c0000
 8003e38:	40140000 	.word	0x40140000
 8003e3c:	3fe00000 	.word	0x3fe00000
 8003e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003e44:	9d02      	ldr	r5, [sp, #8]
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	f7fc fd09 	bl	8000864 <__aeabi_ddiv>
 8003e52:	f7fc fe8d 	bl	8000b70 <__aeabi_d2iz>
 8003e56:	9000      	str	r0, [sp, #0]
 8003e58:	f7fc fb74 	bl	8000544 <__aeabi_i2d>
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	f7fc fbd6 	bl	8000610 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4630      	mov	r0, r6
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	f7fc fa1c 	bl	80002a8 <__aeabi_dsub>
 8003e70:	9e00      	ldr	r6, [sp, #0]
 8003e72:	9f03      	ldr	r7, [sp, #12]
 8003e74:	3630      	adds	r6, #48	; 0x30
 8003e76:	f805 6b01 	strb.w	r6, [r5], #1
 8003e7a:	9e02      	ldr	r6, [sp, #8]
 8003e7c:	1bae      	subs	r6, r5, r6
 8003e7e:	42b7      	cmp	r7, r6
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	d138      	bne.n	8003ef8 <_dtoa_r+0x6d0>
 8003e86:	f7fc fa11 	bl	80002ac <__adddf3>
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460f      	mov	r7, r1
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4640      	mov	r0, r8
 8003e94:	4649      	mov	r1, r9
 8003e96:	f7fc fe2d 	bl	8000af4 <__aeabi_dcmplt>
 8003e9a:	b9c8      	cbnz	r0, 8003ed0 <_dtoa_r+0x6a8>
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	f7fc fe1c 	bl	8000ae0 <__aeabi_dcmpeq>
 8003ea8:	b110      	cbz	r0, 8003eb0 <_dtoa_r+0x688>
 8003eaa:	9b00      	ldr	r3, [sp, #0]
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d40f      	bmi.n	8003ed0 <_dtoa_r+0x6a8>
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f000 fcf6 	bl	80048a4 <_Bfree>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ebc:	702b      	strb	r3, [r5, #0]
 8003ebe:	f10b 0301 	add.w	r3, fp, #1
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f43f acf8 	beq.w	80038bc <_dtoa_r+0x94>
 8003ecc:	601d      	str	r5, [r3, #0]
 8003ece:	e4f5      	b.n	80038bc <_dtoa_r+0x94>
 8003ed0:	465f      	mov	r7, fp
 8003ed2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003ed6:	2a39      	cmp	r2, #57	; 0x39
 8003ed8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003edc:	d106      	bne.n	8003eec <_dtoa_r+0x6c4>
 8003ede:	9a02      	ldr	r2, [sp, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d107      	bne.n	8003ef4 <_dtoa_r+0x6cc>
 8003ee4:	2330      	movs	r3, #48	; 0x30
 8003ee6:	7013      	strb	r3, [r2, #0]
 8003ee8:	3701      	adds	r7, #1
 8003eea:	4613      	mov	r3, r2
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	3201      	adds	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e78d      	b.n	8003e10 <_dtoa_r+0x5e8>
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	e7ec      	b.n	8003ed2 <_dtoa_r+0x6aa>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4ba4      	ldr	r3, [pc, #656]	; (800418c <_dtoa_r+0x964>)
 8003efc:	f7fc fb88 	bl	8000610 <__aeabi_dmul>
 8003f00:	2200      	movs	r2, #0
 8003f02:	2300      	movs	r3, #0
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	f7fc fdea 	bl	8000ae0 <__aeabi_dcmpeq>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d09a      	beq.n	8003e46 <_dtoa_r+0x61e>
 8003f10:	e7ce      	b.n	8003eb0 <_dtoa_r+0x688>
 8003f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	f000 80cd 	beq.w	80040b4 <_dtoa_r+0x88c>
 8003f1a:	9a07      	ldr	r2, [sp, #28]
 8003f1c:	2a01      	cmp	r2, #1
 8003f1e:	f300 80af 	bgt.w	8004080 <_dtoa_r+0x858>
 8003f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	f000 80a7 	beq.w	8004078 <_dtoa_r+0x850>
 8003f2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f2e:	9e08      	ldr	r6, [sp, #32]
 8003f30:	9d05      	ldr	r5, [sp, #20]
 8003f32:	9a05      	ldr	r2, [sp, #20]
 8003f34:	441a      	add	r2, r3
 8003f36:	9205      	str	r2, [sp, #20]
 8003f38:	9a06      	ldr	r2, [sp, #24]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	441a      	add	r2, r3
 8003f3e:	4620      	mov	r0, r4
 8003f40:	9206      	str	r2, [sp, #24]
 8003f42:	f000 fd4f 	bl	80049e4 <__i2b>
 8003f46:	4607      	mov	r7, r0
 8003f48:	2d00      	cmp	r5, #0
 8003f4a:	dd0c      	ble.n	8003f66 <_dtoa_r+0x73e>
 8003f4c:	9b06      	ldr	r3, [sp, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	dd09      	ble.n	8003f66 <_dtoa_r+0x73e>
 8003f52:	42ab      	cmp	r3, r5
 8003f54:	9a05      	ldr	r2, [sp, #20]
 8003f56:	bfa8      	it	ge
 8003f58:	462b      	movge	r3, r5
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	9205      	str	r2, [sp, #20]
 8003f5e:	9a06      	ldr	r2, [sp, #24]
 8003f60:	1aed      	subs	r5, r5, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	9306      	str	r3, [sp, #24]
 8003f66:	9b08      	ldr	r3, [sp, #32]
 8003f68:	b1f3      	cbz	r3, 8003fa8 <_dtoa_r+0x780>
 8003f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a5 	beq.w	80040bc <_dtoa_r+0x894>
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	dd10      	ble.n	8003f98 <_dtoa_r+0x770>
 8003f76:	4639      	mov	r1, r7
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f000 fdc8 	bl	8004b10 <__pow5mult>
 8003f80:	4652      	mov	r2, sl
 8003f82:	4601      	mov	r1, r0
 8003f84:	4607      	mov	r7, r0
 8003f86:	4620      	mov	r0, r4
 8003f88:	f000 fd35 	bl	80049f6 <__multiply>
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	4680      	mov	r8, r0
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fc87 	bl	80048a4 <_Bfree>
 8003f96:	46c2      	mov	sl, r8
 8003f98:	9b08      	ldr	r3, [sp, #32]
 8003f9a:	1b9a      	subs	r2, r3, r6
 8003f9c:	d004      	beq.n	8003fa8 <_dtoa_r+0x780>
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 fdb5 	bl	8004b10 <__pow5mult>
 8003fa6:	4682      	mov	sl, r0
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 fd1a 	bl	80049e4 <__i2b>
 8003fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	f340 8083 	ble.w	80040c0 <_dtoa_r+0x898>
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 fda6 	bl	8004b10 <__pow5mult>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	4606      	mov	r6, r0
 8003fca:	dd7c      	ble.n	80040c6 <_dtoa_r+0x89e>
 8003fcc:	f04f 0800 	mov.w	r8, #0
 8003fd0:	6933      	ldr	r3, [r6, #16]
 8003fd2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003fd6:	6918      	ldr	r0, [r3, #16]
 8003fd8:	f000 fcb6 	bl	8004948 <__hi0bits>
 8003fdc:	f1c0 0020 	rsb	r0, r0, #32
 8003fe0:	9b06      	ldr	r3, [sp, #24]
 8003fe2:	4418      	add	r0, r3
 8003fe4:	f010 001f 	ands.w	r0, r0, #31
 8003fe8:	f000 8096 	beq.w	8004118 <_dtoa_r+0x8f0>
 8003fec:	f1c0 0320 	rsb	r3, r0, #32
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	f340 8087 	ble.w	8004104 <_dtoa_r+0x8dc>
 8003ff6:	9b05      	ldr	r3, [sp, #20]
 8003ff8:	f1c0 001c 	rsb	r0, r0, #28
 8003ffc:	4403      	add	r3, r0
 8003ffe:	9305      	str	r3, [sp, #20]
 8004000:	9b06      	ldr	r3, [sp, #24]
 8004002:	4405      	add	r5, r0
 8004004:	4403      	add	r3, r0
 8004006:	9306      	str	r3, [sp, #24]
 8004008:	9b05      	ldr	r3, [sp, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dd05      	ble.n	800401a <_dtoa_r+0x7f2>
 800400e:	4651      	mov	r1, sl
 8004010:	461a      	mov	r2, r3
 8004012:	4620      	mov	r0, r4
 8004014:	f000 fdca 	bl	8004bac <__lshift>
 8004018:	4682      	mov	sl, r0
 800401a:	9b06      	ldr	r3, [sp, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	dd05      	ble.n	800402c <_dtoa_r+0x804>
 8004020:	4631      	mov	r1, r6
 8004022:	461a      	mov	r2, r3
 8004024:	4620      	mov	r0, r4
 8004026:	f000 fdc1 	bl	8004bac <__lshift>
 800402a:	4606      	mov	r6, r0
 800402c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d074      	beq.n	800411c <_dtoa_r+0x8f4>
 8004032:	4631      	mov	r1, r6
 8004034:	4650      	mov	r0, sl
 8004036:	f000 fe0a 	bl	8004c4e <__mcmp>
 800403a:	2800      	cmp	r0, #0
 800403c:	da6e      	bge.n	800411c <_dtoa_r+0x8f4>
 800403e:	2300      	movs	r3, #0
 8004040:	4651      	mov	r1, sl
 8004042:	220a      	movs	r2, #10
 8004044:	4620      	mov	r0, r4
 8004046:	f000 fc44 	bl	80048d2 <__multadd>
 800404a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004050:	4682      	mov	sl, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 81a8 	beq.w	80043a8 <_dtoa_r+0xb80>
 8004058:	2300      	movs	r3, #0
 800405a:	4639      	mov	r1, r7
 800405c:	220a      	movs	r2, #10
 800405e:	4620      	mov	r0, r4
 8004060:	f000 fc37 	bl	80048d2 <__multadd>
 8004064:	9b04      	ldr	r3, [sp, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	4607      	mov	r7, r0
 800406a:	f300 80c8 	bgt.w	80041fe <_dtoa_r+0x9d6>
 800406e:	9b07      	ldr	r3, [sp, #28]
 8004070:	2b02      	cmp	r3, #2
 8004072:	f340 80c4 	ble.w	80041fe <_dtoa_r+0x9d6>
 8004076:	e059      	b.n	800412c <_dtoa_r+0x904>
 8004078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800407a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800407e:	e756      	b.n	8003f2e <_dtoa_r+0x706>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	1e5e      	subs	r6, r3, #1
 8004084:	9b08      	ldr	r3, [sp, #32]
 8004086:	42b3      	cmp	r3, r6
 8004088:	bfbf      	itttt	lt
 800408a:	9b08      	ldrlt	r3, [sp, #32]
 800408c:	9608      	strlt	r6, [sp, #32]
 800408e:	1af2      	sublt	r2, r6, r3
 8004090:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004092:	bfb6      	itet	lt
 8004094:	189b      	addlt	r3, r3, r2
 8004096:	1b9e      	subge	r6, r3, r6
 8004098:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	bfb8      	it	lt
 800409e:	2600      	movlt	r6, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfb9      	ittee	lt
 80040a4:	9b05      	ldrlt	r3, [sp, #20]
 80040a6:	9a03      	ldrlt	r2, [sp, #12]
 80040a8:	9d05      	ldrge	r5, [sp, #20]
 80040aa:	9b03      	ldrge	r3, [sp, #12]
 80040ac:	bfbc      	itt	lt
 80040ae:	1a9d      	sublt	r5, r3, r2
 80040b0:	2300      	movlt	r3, #0
 80040b2:	e73e      	b.n	8003f32 <_dtoa_r+0x70a>
 80040b4:	9e08      	ldr	r6, [sp, #32]
 80040b6:	9d05      	ldr	r5, [sp, #20]
 80040b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80040ba:	e745      	b.n	8003f48 <_dtoa_r+0x720>
 80040bc:	9a08      	ldr	r2, [sp, #32]
 80040be:	e76e      	b.n	8003f9e <_dtoa_r+0x776>
 80040c0:	9b07      	ldr	r3, [sp, #28]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	dc19      	bgt.n	80040fa <_dtoa_r+0x8d2>
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	b9bb      	cbnz	r3, 80040fa <_dtoa_r+0x8d2>
 80040ca:	9b01      	ldr	r3, [sp, #4]
 80040cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d0:	b99b      	cbnz	r3, 80040fa <_dtoa_r+0x8d2>
 80040d2:	9b01      	ldr	r3, [sp, #4]
 80040d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d8:	0d1b      	lsrs	r3, r3, #20
 80040da:	051b      	lsls	r3, r3, #20
 80040dc:	b183      	cbz	r3, 8004100 <_dtoa_r+0x8d8>
 80040de:	9b05      	ldr	r3, [sp, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	9b06      	ldr	r3, [sp, #24]
 80040e6:	3301      	adds	r3, #1
 80040e8:	9306      	str	r3, [sp, #24]
 80040ea:	f04f 0801 	mov.w	r8, #1
 80040ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af6d 	bne.w	8003fd0 <_dtoa_r+0x7a8>
 80040f6:	2001      	movs	r0, #1
 80040f8:	e772      	b.n	8003fe0 <_dtoa_r+0x7b8>
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	e7f6      	b.n	80040ee <_dtoa_r+0x8c6>
 8004100:	4698      	mov	r8, r3
 8004102:	e7f4      	b.n	80040ee <_dtoa_r+0x8c6>
 8004104:	d080      	beq.n	8004008 <_dtoa_r+0x7e0>
 8004106:	9a05      	ldr	r2, [sp, #20]
 8004108:	331c      	adds	r3, #28
 800410a:	441a      	add	r2, r3
 800410c:	9205      	str	r2, [sp, #20]
 800410e:	9a06      	ldr	r2, [sp, #24]
 8004110:	441a      	add	r2, r3
 8004112:	441d      	add	r5, r3
 8004114:	4613      	mov	r3, r2
 8004116:	e776      	b.n	8004006 <_dtoa_r+0x7de>
 8004118:	4603      	mov	r3, r0
 800411a:	e7f4      	b.n	8004106 <_dtoa_r+0x8de>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	dc36      	bgt.n	8004190 <_dtoa_r+0x968>
 8004122:	9b07      	ldr	r3, [sp, #28]
 8004124:	2b02      	cmp	r3, #2
 8004126:	dd33      	ble.n	8004190 <_dtoa_r+0x968>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	b963      	cbnz	r3, 800414a <_dtoa_r+0x922>
 8004130:	4631      	mov	r1, r6
 8004132:	2205      	movs	r2, #5
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fbcc 	bl	80048d2 <__multadd>
 800413a:	4601      	mov	r1, r0
 800413c:	4606      	mov	r6, r0
 800413e:	4650      	mov	r0, sl
 8004140:	f000 fd85 	bl	8004c4e <__mcmp>
 8004144:	2800      	cmp	r0, #0
 8004146:	f73f adb6 	bgt.w	8003cb6 <_dtoa_r+0x48e>
 800414a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800414c:	9d02      	ldr	r5, [sp, #8]
 800414e:	ea6f 0b03 	mvn.w	fp, r3
 8004152:	2300      	movs	r3, #0
 8004154:	9303      	str	r3, [sp, #12]
 8004156:	4631      	mov	r1, r6
 8004158:	4620      	mov	r0, r4
 800415a:	f000 fba3 	bl	80048a4 <_Bfree>
 800415e:	2f00      	cmp	r7, #0
 8004160:	f43f aea6 	beq.w	8003eb0 <_dtoa_r+0x688>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	b12b      	cbz	r3, 8004174 <_dtoa_r+0x94c>
 8004168:	42bb      	cmp	r3, r7
 800416a:	d003      	beq.n	8004174 <_dtoa_r+0x94c>
 800416c:	4619      	mov	r1, r3
 800416e:	4620      	mov	r0, r4
 8004170:	f000 fb98 	bl	80048a4 <_Bfree>
 8004174:	4639      	mov	r1, r7
 8004176:	4620      	mov	r0, r4
 8004178:	f000 fb94 	bl	80048a4 <_Bfree>
 800417c:	e698      	b.n	8003eb0 <_dtoa_r+0x688>
 800417e:	2600      	movs	r6, #0
 8004180:	4637      	mov	r7, r6
 8004182:	e7e2      	b.n	800414a <_dtoa_r+0x922>
 8004184:	46bb      	mov	fp, r7
 8004186:	4637      	mov	r7, r6
 8004188:	e595      	b.n	8003cb6 <_dtoa_r+0x48e>
 800418a:	bf00      	nop
 800418c:	40240000 	.word	0x40240000
 8004190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004192:	bb93      	cbnz	r3, 80041fa <_dtoa_r+0x9d2>
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	9d02      	ldr	r5, [sp, #8]
 800419a:	4631      	mov	r1, r6
 800419c:	4650      	mov	r0, sl
 800419e:	f7ff fab7 	bl	8003710 <quorem>
 80041a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80041a6:	f805 9b01 	strb.w	r9, [r5], #1
 80041aa:	9b02      	ldr	r3, [sp, #8]
 80041ac:	9a04      	ldr	r2, [sp, #16]
 80041ae:	1aeb      	subs	r3, r5, r3
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f300 80dc 	bgt.w	800436e <_dtoa_r+0xb46>
 80041b6:	9b02      	ldr	r3, [sp, #8]
 80041b8:	2a01      	cmp	r2, #1
 80041ba:	bfac      	ite	ge
 80041bc:	189b      	addge	r3, r3, r2
 80041be:	3301      	addlt	r3, #1
 80041c0:	4698      	mov	r8, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	4651      	mov	r1, sl
 80041c8:	2201      	movs	r2, #1
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fcee 	bl	8004bac <__lshift>
 80041d0:	4631      	mov	r1, r6
 80041d2:	4682      	mov	sl, r0
 80041d4:	f000 fd3b 	bl	8004c4e <__mcmp>
 80041d8:	2800      	cmp	r0, #0
 80041da:	f300 808d 	bgt.w	80042f8 <_dtoa_r+0xad0>
 80041de:	d103      	bne.n	80041e8 <_dtoa_r+0x9c0>
 80041e0:	f019 0f01 	tst.w	r9, #1
 80041e4:	f040 8088 	bne.w	80042f8 <_dtoa_r+0xad0>
 80041e8:	4645      	mov	r5, r8
 80041ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041ee:	2b30      	cmp	r3, #48	; 0x30
 80041f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80041f4:	d1af      	bne.n	8004156 <_dtoa_r+0x92e>
 80041f6:	4615      	mov	r5, r2
 80041f8:	e7f7      	b.n	80041ea <_dtoa_r+0x9c2>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	2d00      	cmp	r5, #0
 8004200:	dd05      	ble.n	800420e <_dtoa_r+0x9e6>
 8004202:	4639      	mov	r1, r7
 8004204:	462a      	mov	r2, r5
 8004206:	4620      	mov	r0, r4
 8004208:	f000 fcd0 	bl	8004bac <__lshift>
 800420c:	4607      	mov	r7, r0
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d04c      	beq.n	80042ae <_dtoa_r+0xa86>
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4620      	mov	r0, r4
 8004218:	f000 fb10 	bl	800483c <_Balloc>
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	3202      	adds	r2, #2
 8004220:	4605      	mov	r5, r0
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	f107 010c 	add.w	r1, r7, #12
 8004228:	300c      	adds	r0, #12
 800422a:	f000 faef 	bl	800480c <memcpy>
 800422e:	2201      	movs	r2, #1
 8004230:	4629      	mov	r1, r5
 8004232:	4620      	mov	r0, r4
 8004234:	f000 fcba 	bl	8004bac <__lshift>
 8004238:	9b00      	ldr	r3, [sp, #0]
 800423a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800423e:	9703      	str	r7, [sp, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	4607      	mov	r7, r0
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	4631      	mov	r1, r6
 800424a:	4650      	mov	r0, sl
 800424c:	f7ff fa60 	bl	8003710 <quorem>
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	4605      	mov	r5, r0
 8004254:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004258:	4650      	mov	r0, sl
 800425a:	f000 fcf8 	bl	8004c4e <__mcmp>
 800425e:	463a      	mov	r2, r7
 8004260:	9000      	str	r0, [sp, #0]
 8004262:	4631      	mov	r1, r6
 8004264:	4620      	mov	r0, r4
 8004266:	f000 fd0c 	bl	8004c82 <__mdiff>
 800426a:	68c3      	ldr	r3, [r0, #12]
 800426c:	4602      	mov	r2, r0
 800426e:	bb03      	cbnz	r3, 80042b2 <_dtoa_r+0xa8a>
 8004270:	4601      	mov	r1, r0
 8004272:	9006      	str	r0, [sp, #24]
 8004274:	4650      	mov	r0, sl
 8004276:	f000 fcea 	bl	8004c4e <__mcmp>
 800427a:	9a06      	ldr	r2, [sp, #24]
 800427c:	4603      	mov	r3, r0
 800427e:	4611      	mov	r1, r2
 8004280:	4620      	mov	r0, r4
 8004282:	9306      	str	r3, [sp, #24]
 8004284:	f000 fb0e 	bl	80048a4 <_Bfree>
 8004288:	9b06      	ldr	r3, [sp, #24]
 800428a:	b9a3      	cbnz	r3, 80042b6 <_dtoa_r+0xa8e>
 800428c:	9a07      	ldr	r2, [sp, #28]
 800428e:	b992      	cbnz	r2, 80042b6 <_dtoa_r+0xa8e>
 8004290:	9a05      	ldr	r2, [sp, #20]
 8004292:	b982      	cbnz	r2, 80042b6 <_dtoa_r+0xa8e>
 8004294:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004298:	d029      	beq.n	80042ee <_dtoa_r+0xac6>
 800429a:	9b00      	ldr	r3, [sp, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	dd01      	ble.n	80042a4 <_dtoa_r+0xa7c>
 80042a0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80042a4:	f108 0501 	add.w	r5, r8, #1
 80042a8:	f888 9000 	strb.w	r9, [r8]
 80042ac:	e753      	b.n	8004156 <_dtoa_r+0x92e>
 80042ae:	4638      	mov	r0, r7
 80042b0:	e7c2      	b.n	8004238 <_dtoa_r+0xa10>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e7e3      	b.n	800427e <_dtoa_r+0xa56>
 80042b6:	9a00      	ldr	r2, [sp, #0]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	db04      	blt.n	80042c6 <_dtoa_r+0xa9e>
 80042bc:	d125      	bne.n	800430a <_dtoa_r+0xae2>
 80042be:	9a07      	ldr	r2, [sp, #28]
 80042c0:	bb1a      	cbnz	r2, 800430a <_dtoa_r+0xae2>
 80042c2:	9a05      	ldr	r2, [sp, #20]
 80042c4:	bb0a      	cbnz	r2, 800430a <_dtoa_r+0xae2>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	ddec      	ble.n	80042a4 <_dtoa_r+0xa7c>
 80042ca:	4651      	mov	r1, sl
 80042cc:	2201      	movs	r2, #1
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 fc6c 	bl	8004bac <__lshift>
 80042d4:	4631      	mov	r1, r6
 80042d6:	4682      	mov	sl, r0
 80042d8:	f000 fcb9 	bl	8004c4e <__mcmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	dc03      	bgt.n	80042e8 <_dtoa_r+0xac0>
 80042e0:	d1e0      	bne.n	80042a4 <_dtoa_r+0xa7c>
 80042e2:	f019 0f01 	tst.w	r9, #1
 80042e6:	d0dd      	beq.n	80042a4 <_dtoa_r+0xa7c>
 80042e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80042ec:	d1d8      	bne.n	80042a0 <_dtoa_r+0xa78>
 80042ee:	2339      	movs	r3, #57	; 0x39
 80042f0:	f888 3000 	strb.w	r3, [r8]
 80042f4:	f108 0801 	add.w	r8, r8, #1
 80042f8:	4645      	mov	r5, r8
 80042fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042fe:	2b39      	cmp	r3, #57	; 0x39
 8004300:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004304:	d03b      	beq.n	800437e <_dtoa_r+0xb56>
 8004306:	3301      	adds	r3, #1
 8004308:	e040      	b.n	800438c <_dtoa_r+0xb64>
 800430a:	2b00      	cmp	r3, #0
 800430c:	f108 0501 	add.w	r5, r8, #1
 8004310:	dd05      	ble.n	800431e <_dtoa_r+0xaf6>
 8004312:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004316:	d0ea      	beq.n	80042ee <_dtoa_r+0xac6>
 8004318:	f109 0901 	add.w	r9, r9, #1
 800431c:	e7c4      	b.n	80042a8 <_dtoa_r+0xa80>
 800431e:	9b02      	ldr	r3, [sp, #8]
 8004320:	9a04      	ldr	r2, [sp, #16]
 8004322:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004326:	1aeb      	subs	r3, r5, r3
 8004328:	4293      	cmp	r3, r2
 800432a:	46a8      	mov	r8, r5
 800432c:	f43f af4b 	beq.w	80041c6 <_dtoa_r+0x99e>
 8004330:	4651      	mov	r1, sl
 8004332:	2300      	movs	r3, #0
 8004334:	220a      	movs	r2, #10
 8004336:	4620      	mov	r0, r4
 8004338:	f000 facb 	bl	80048d2 <__multadd>
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	9903      	ldr	r1, [sp, #12]
 8004340:	42bb      	cmp	r3, r7
 8004342:	4682      	mov	sl, r0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f04f 020a 	mov.w	r2, #10
 800434c:	4620      	mov	r0, r4
 800434e:	d104      	bne.n	800435a <_dtoa_r+0xb32>
 8004350:	f000 fabf 	bl	80048d2 <__multadd>
 8004354:	9003      	str	r0, [sp, #12]
 8004356:	4607      	mov	r7, r0
 8004358:	e776      	b.n	8004248 <_dtoa_r+0xa20>
 800435a:	f000 faba 	bl	80048d2 <__multadd>
 800435e:	2300      	movs	r3, #0
 8004360:	9003      	str	r0, [sp, #12]
 8004362:	220a      	movs	r2, #10
 8004364:	4639      	mov	r1, r7
 8004366:	4620      	mov	r0, r4
 8004368:	f000 fab3 	bl	80048d2 <__multadd>
 800436c:	e7f3      	b.n	8004356 <_dtoa_r+0xb2e>
 800436e:	4651      	mov	r1, sl
 8004370:	2300      	movs	r3, #0
 8004372:	220a      	movs	r2, #10
 8004374:	4620      	mov	r0, r4
 8004376:	f000 faac 	bl	80048d2 <__multadd>
 800437a:	4682      	mov	sl, r0
 800437c:	e70d      	b.n	800419a <_dtoa_r+0x972>
 800437e:	9b02      	ldr	r3, [sp, #8]
 8004380:	4293      	cmp	r3, r2
 8004382:	d105      	bne.n	8004390 <_dtoa_r+0xb68>
 8004384:	9a02      	ldr	r2, [sp, #8]
 8004386:	f10b 0b01 	add.w	fp, fp, #1
 800438a:	2331      	movs	r3, #49	; 0x31
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	e6e2      	b.n	8004156 <_dtoa_r+0x92e>
 8004390:	4615      	mov	r5, r2
 8004392:	e7b2      	b.n	80042fa <_dtoa_r+0xad2>
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <_dtoa_r+0xb94>)
 8004396:	f7ff baae 	b.w	80038f6 <_dtoa_r+0xce>
 800439a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f aa88 	bne.w	80038b2 <_dtoa_r+0x8a>
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <_dtoa_r+0xb98>)
 80043a4:	f7ff baa7 	b.w	80038f6 <_dtoa_r+0xce>
 80043a8:	9b04      	ldr	r3, [sp, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f73f aef4 	bgt.w	8004198 <_dtoa_r+0x970>
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	f77f aef0 	ble.w	8004198 <_dtoa_r+0x970>
 80043b8:	e6b8      	b.n	800412c <_dtoa_r+0x904>
 80043ba:	bf00      	nop
 80043bc:	0800557f 	.word	0x0800557f
 80043c0:	080055a1 	.word	0x080055a1

080043c4 <_localeconv_r>:
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <_localeconv_r+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a18      	ldr	r0, [r3, #32]
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <_localeconv_r+0x18>)
 80043cc:	2800      	cmp	r0, #0
 80043ce:	bf08      	it	eq
 80043d0:	4618      	moveq	r0, r3
 80043d2:	30f0      	adds	r0, #240	; 0xf0
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000009c 	.word	0x2000009c
 80043dc:	200005a0 	.word	0x200005a0

080043e0 <malloc>:
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <malloc+0xc>)
 80043e2:	4601      	mov	r1, r0
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	f000 b803 	b.w	80043f0 <_malloc_r>
 80043ea:	bf00      	nop
 80043ec:	2000009c 	.word	0x2000009c

080043f0 <_malloc_r>:
 80043f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	f101 040b 	add.w	r4, r1, #11
 80043f8:	2c16      	cmp	r4, #22
 80043fa:	4681      	mov	r9, r0
 80043fc:	d907      	bls.n	800440e <_malloc_r+0x1e>
 80043fe:	f034 0407 	bics.w	r4, r4, #7
 8004402:	d505      	bpl.n	8004410 <_malloc_r+0x20>
 8004404:	230c      	movs	r3, #12
 8004406:	f8c9 3000 	str.w	r3, [r9]
 800440a:	2600      	movs	r6, #0
 800440c:	e131      	b.n	8004672 <_malloc_r+0x282>
 800440e:	2410      	movs	r4, #16
 8004410:	428c      	cmp	r4, r1
 8004412:	d3f7      	bcc.n	8004404 <_malloc_r+0x14>
 8004414:	4648      	mov	r0, r9
 8004416:	f000 fa05 	bl	8004824 <__malloc_lock>
 800441a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800441e:	4d9c      	ldr	r5, [pc, #624]	; (8004690 <_malloc_r+0x2a0>)
 8004420:	d236      	bcs.n	8004490 <_malloc_r+0xa0>
 8004422:	f104 0208 	add.w	r2, r4, #8
 8004426:	442a      	add	r2, r5
 8004428:	f1a2 0108 	sub.w	r1, r2, #8
 800442c:	6856      	ldr	r6, [r2, #4]
 800442e:	428e      	cmp	r6, r1
 8004430:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004434:	d102      	bne.n	800443c <_malloc_r+0x4c>
 8004436:	68d6      	ldr	r6, [r2, #12]
 8004438:	42b2      	cmp	r2, r6
 800443a:	d010      	beq.n	800445e <_malloc_r+0x6e>
 800443c:	6873      	ldr	r3, [r6, #4]
 800443e:	68f2      	ldr	r2, [r6, #12]
 8004440:	68b1      	ldr	r1, [r6, #8]
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	60ca      	str	r2, [r1, #12]
 8004448:	4433      	add	r3, r6
 800444a:	6091      	str	r1, [r2, #8]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	4648      	mov	r0, r9
 8004456:	f000 f9eb 	bl	8004830 <__malloc_unlock>
 800445a:	3608      	adds	r6, #8
 800445c:	e109      	b.n	8004672 <_malloc_r+0x282>
 800445e:	3302      	adds	r3, #2
 8004460:	4a8c      	ldr	r2, [pc, #560]	; (8004694 <_malloc_r+0x2a4>)
 8004462:	692e      	ldr	r6, [r5, #16]
 8004464:	4296      	cmp	r6, r2
 8004466:	4611      	mov	r1, r2
 8004468:	d06d      	beq.n	8004546 <_malloc_r+0x156>
 800446a:	6870      	ldr	r0, [r6, #4]
 800446c:	f020 0003 	bic.w	r0, r0, #3
 8004470:	1b07      	subs	r7, r0, r4
 8004472:	2f0f      	cmp	r7, #15
 8004474:	dd47      	ble.n	8004506 <_malloc_r+0x116>
 8004476:	1933      	adds	r3, r6, r4
 8004478:	f044 0401 	orr.w	r4, r4, #1
 800447c:	6074      	str	r4, [r6, #4]
 800447e:	616b      	str	r3, [r5, #20]
 8004480:	612b      	str	r3, [r5, #16]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	f047 0201 	orr.w	r2, r7, #1
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	5037      	str	r7, [r6, r0]
 800448e:	e7e1      	b.n	8004454 <_malloc_r+0x64>
 8004490:	0a63      	lsrs	r3, r4, #9
 8004492:	d02a      	beq.n	80044ea <_malloc_r+0xfa>
 8004494:	2b04      	cmp	r3, #4
 8004496:	d812      	bhi.n	80044be <_malloc_r+0xce>
 8004498:	09a3      	lsrs	r3, r4, #6
 800449a:	3338      	adds	r3, #56	; 0x38
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80044a2:	f1a2 0008 	sub.w	r0, r2, #8
 80044a6:	6856      	ldr	r6, [r2, #4]
 80044a8:	4286      	cmp	r6, r0
 80044aa:	d006      	beq.n	80044ba <_malloc_r+0xca>
 80044ac:	6872      	ldr	r2, [r6, #4]
 80044ae:	f022 0203 	bic.w	r2, r2, #3
 80044b2:	1b11      	subs	r1, r2, r4
 80044b4:	290f      	cmp	r1, #15
 80044b6:	dd1c      	ble.n	80044f2 <_malloc_r+0x102>
 80044b8:	3b01      	subs	r3, #1
 80044ba:	3301      	adds	r3, #1
 80044bc:	e7d0      	b.n	8004460 <_malloc_r+0x70>
 80044be:	2b14      	cmp	r3, #20
 80044c0:	d801      	bhi.n	80044c6 <_malloc_r+0xd6>
 80044c2:	335b      	adds	r3, #91	; 0x5b
 80044c4:	e7ea      	b.n	800449c <_malloc_r+0xac>
 80044c6:	2b54      	cmp	r3, #84	; 0x54
 80044c8:	d802      	bhi.n	80044d0 <_malloc_r+0xe0>
 80044ca:	0b23      	lsrs	r3, r4, #12
 80044cc:	336e      	adds	r3, #110	; 0x6e
 80044ce:	e7e5      	b.n	800449c <_malloc_r+0xac>
 80044d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80044d4:	d802      	bhi.n	80044dc <_malloc_r+0xec>
 80044d6:	0be3      	lsrs	r3, r4, #15
 80044d8:	3377      	adds	r3, #119	; 0x77
 80044da:	e7df      	b.n	800449c <_malloc_r+0xac>
 80044dc:	f240 5254 	movw	r2, #1364	; 0x554
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d804      	bhi.n	80044ee <_malloc_r+0xfe>
 80044e4:	0ca3      	lsrs	r3, r4, #18
 80044e6:	337c      	adds	r3, #124	; 0x7c
 80044e8:	e7d8      	b.n	800449c <_malloc_r+0xac>
 80044ea:	233f      	movs	r3, #63	; 0x3f
 80044ec:	e7d6      	b.n	800449c <_malloc_r+0xac>
 80044ee:	237e      	movs	r3, #126	; 0x7e
 80044f0:	e7d4      	b.n	800449c <_malloc_r+0xac>
 80044f2:	2900      	cmp	r1, #0
 80044f4:	68f1      	ldr	r1, [r6, #12]
 80044f6:	db04      	blt.n	8004502 <_malloc_r+0x112>
 80044f8:	68b3      	ldr	r3, [r6, #8]
 80044fa:	60d9      	str	r1, [r3, #12]
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	18b3      	adds	r3, r6, r2
 8004500:	e7a4      	b.n	800444c <_malloc_r+0x5c>
 8004502:	460e      	mov	r6, r1
 8004504:	e7d0      	b.n	80044a8 <_malloc_r+0xb8>
 8004506:	2f00      	cmp	r7, #0
 8004508:	616a      	str	r2, [r5, #20]
 800450a:	612a      	str	r2, [r5, #16]
 800450c:	db05      	blt.n	800451a <_malloc_r+0x12a>
 800450e:	4430      	add	r0, r6
 8004510:	6843      	ldr	r3, [r0, #4]
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6043      	str	r3, [r0, #4]
 8004518:	e79c      	b.n	8004454 <_malloc_r+0x64>
 800451a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800451e:	d244      	bcs.n	80045aa <_malloc_r+0x1ba>
 8004520:	08c0      	lsrs	r0, r0, #3
 8004522:	1087      	asrs	r7, r0, #2
 8004524:	2201      	movs	r2, #1
 8004526:	fa02 f707 	lsl.w	r7, r2, r7
 800452a:	686a      	ldr	r2, [r5, #4]
 800452c:	3001      	adds	r0, #1
 800452e:	433a      	orrs	r2, r7
 8004530:	606a      	str	r2, [r5, #4]
 8004532:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004536:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800453a:	60b7      	str	r7, [r6, #8]
 800453c:	3a08      	subs	r2, #8
 800453e:	60f2      	str	r2, [r6, #12]
 8004540:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004544:	60fe      	str	r6, [r7, #12]
 8004546:	2001      	movs	r0, #1
 8004548:	109a      	asrs	r2, r3, #2
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	6868      	ldr	r0, [r5, #4]
 8004550:	4282      	cmp	r2, r0
 8004552:	f200 80a1 	bhi.w	8004698 <_malloc_r+0x2a8>
 8004556:	4202      	tst	r2, r0
 8004558:	d106      	bne.n	8004568 <_malloc_r+0x178>
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	0052      	lsls	r2, r2, #1
 8004560:	4202      	tst	r2, r0
 8004562:	f103 0304 	add.w	r3, r3, #4
 8004566:	d0fa      	beq.n	800455e <_malloc_r+0x16e>
 8004568:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800456c:	46e0      	mov	r8, ip
 800456e:	469e      	mov	lr, r3
 8004570:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004574:	4546      	cmp	r6, r8
 8004576:	d153      	bne.n	8004620 <_malloc_r+0x230>
 8004578:	f10e 0e01 	add.w	lr, lr, #1
 800457c:	f01e 0f03 	tst.w	lr, #3
 8004580:	f108 0808 	add.w	r8, r8, #8
 8004584:	d1f4      	bne.n	8004570 <_malloc_r+0x180>
 8004586:	0798      	lsls	r0, r3, #30
 8004588:	d179      	bne.n	800467e <_malloc_r+0x28e>
 800458a:	686b      	ldr	r3, [r5, #4]
 800458c:	ea23 0302 	bic.w	r3, r3, r2
 8004590:	606b      	str	r3, [r5, #4]
 8004592:	6868      	ldr	r0, [r5, #4]
 8004594:	0052      	lsls	r2, r2, #1
 8004596:	4282      	cmp	r2, r0
 8004598:	d87e      	bhi.n	8004698 <_malloc_r+0x2a8>
 800459a:	2a00      	cmp	r2, #0
 800459c:	d07c      	beq.n	8004698 <_malloc_r+0x2a8>
 800459e:	4673      	mov	r3, lr
 80045a0:	4202      	tst	r2, r0
 80045a2:	d1e1      	bne.n	8004568 <_malloc_r+0x178>
 80045a4:	3304      	adds	r3, #4
 80045a6:	0052      	lsls	r2, r2, #1
 80045a8:	e7fa      	b.n	80045a0 <_malloc_r+0x1b0>
 80045aa:	0a42      	lsrs	r2, r0, #9
 80045ac:	2a04      	cmp	r2, #4
 80045ae:	d815      	bhi.n	80045dc <_malloc_r+0x1ec>
 80045b0:	0982      	lsrs	r2, r0, #6
 80045b2:	3238      	adds	r2, #56	; 0x38
 80045b4:	1c57      	adds	r7, r2, #1
 80045b6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80045ba:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80045be:	45be      	cmp	lr, r7
 80045c0:	d126      	bne.n	8004610 <_malloc_r+0x220>
 80045c2:	2001      	movs	r0, #1
 80045c4:	1092      	asrs	r2, r2, #2
 80045c6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ca:	6868      	ldr	r0, [r5, #4]
 80045cc:	4310      	orrs	r0, r2
 80045ce:	6068      	str	r0, [r5, #4]
 80045d0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80045d4:	60b7      	str	r7, [r6, #8]
 80045d6:	f8ce 6008 	str.w	r6, [lr, #8]
 80045da:	e7b3      	b.n	8004544 <_malloc_r+0x154>
 80045dc:	2a14      	cmp	r2, #20
 80045de:	d801      	bhi.n	80045e4 <_malloc_r+0x1f4>
 80045e0:	325b      	adds	r2, #91	; 0x5b
 80045e2:	e7e7      	b.n	80045b4 <_malloc_r+0x1c4>
 80045e4:	2a54      	cmp	r2, #84	; 0x54
 80045e6:	d802      	bhi.n	80045ee <_malloc_r+0x1fe>
 80045e8:	0b02      	lsrs	r2, r0, #12
 80045ea:	326e      	adds	r2, #110	; 0x6e
 80045ec:	e7e2      	b.n	80045b4 <_malloc_r+0x1c4>
 80045ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80045f2:	d802      	bhi.n	80045fa <_malloc_r+0x20a>
 80045f4:	0bc2      	lsrs	r2, r0, #15
 80045f6:	3277      	adds	r2, #119	; 0x77
 80045f8:	e7dc      	b.n	80045b4 <_malloc_r+0x1c4>
 80045fa:	f240 5754 	movw	r7, #1364	; 0x554
 80045fe:	42ba      	cmp	r2, r7
 8004600:	bf9a      	itte	ls
 8004602:	0c82      	lsrls	r2, r0, #18
 8004604:	327c      	addls	r2, #124	; 0x7c
 8004606:	227e      	movhi	r2, #126	; 0x7e
 8004608:	e7d4      	b.n	80045b4 <_malloc_r+0x1c4>
 800460a:	68bf      	ldr	r7, [r7, #8]
 800460c:	45be      	cmp	lr, r7
 800460e:	d004      	beq.n	800461a <_malloc_r+0x22a>
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f022 0203 	bic.w	r2, r2, #3
 8004616:	4290      	cmp	r0, r2
 8004618:	d3f7      	bcc.n	800460a <_malloc_r+0x21a>
 800461a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800461e:	e7d7      	b.n	80045d0 <_malloc_r+0x1e0>
 8004620:	6870      	ldr	r0, [r6, #4]
 8004622:	68f7      	ldr	r7, [r6, #12]
 8004624:	f020 0003 	bic.w	r0, r0, #3
 8004628:	eba0 0a04 	sub.w	sl, r0, r4
 800462c:	f1ba 0f0f 	cmp.w	sl, #15
 8004630:	dd10      	ble.n	8004654 <_malloc_r+0x264>
 8004632:	68b2      	ldr	r2, [r6, #8]
 8004634:	1933      	adds	r3, r6, r4
 8004636:	f044 0401 	orr.w	r4, r4, #1
 800463a:	6074      	str	r4, [r6, #4]
 800463c:	60d7      	str	r7, [r2, #12]
 800463e:	60ba      	str	r2, [r7, #8]
 8004640:	f04a 0201 	orr.w	r2, sl, #1
 8004644:	616b      	str	r3, [r5, #20]
 8004646:	612b      	str	r3, [r5, #16]
 8004648:	60d9      	str	r1, [r3, #12]
 800464a:	6099      	str	r1, [r3, #8]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	f846 a000 	str.w	sl, [r6, r0]
 8004652:	e6ff      	b.n	8004454 <_malloc_r+0x64>
 8004654:	f1ba 0f00 	cmp.w	sl, #0
 8004658:	db0f      	blt.n	800467a <_malloc_r+0x28a>
 800465a:	4430      	add	r0, r6
 800465c:	6843      	ldr	r3, [r0, #4]
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6043      	str	r3, [r0, #4]
 8004664:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004668:	4648      	mov	r0, r9
 800466a:	60df      	str	r7, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	f000 f8df 	bl	8004830 <__malloc_unlock>
 8004672:	4630      	mov	r0, r6
 8004674:	b003      	add	sp, #12
 8004676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467a:	463e      	mov	r6, r7
 800467c:	e77a      	b.n	8004574 <_malloc_r+0x184>
 800467e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004682:	4584      	cmp	ip, r0
 8004684:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004688:	f43f af7d 	beq.w	8004586 <_malloc_r+0x196>
 800468c:	e781      	b.n	8004592 <_malloc_r+0x1a2>
 800468e:	bf00      	nop
 8004690:	20000190 	.word	0x20000190
 8004694:	20000198 	.word	0x20000198
 8004698:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800469c:	f8db 6004 	ldr.w	r6, [fp, #4]
 80046a0:	f026 0603 	bic.w	r6, r6, #3
 80046a4:	42b4      	cmp	r4, r6
 80046a6:	d803      	bhi.n	80046b0 <_malloc_r+0x2c0>
 80046a8:	1b33      	subs	r3, r6, r4
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	f300 8096 	bgt.w	80047dc <_malloc_r+0x3ec>
 80046b0:	4a4f      	ldr	r2, [pc, #316]	; (80047f0 <_malloc_r+0x400>)
 80046b2:	6817      	ldr	r7, [r2, #0]
 80046b4:	4a4f      	ldr	r2, [pc, #316]	; (80047f4 <_malloc_r+0x404>)
 80046b6:	6811      	ldr	r1, [r2, #0]
 80046b8:	3710      	adds	r7, #16
 80046ba:	3101      	adds	r1, #1
 80046bc:	eb0b 0306 	add.w	r3, fp, r6
 80046c0:	4427      	add	r7, r4
 80046c2:	d005      	beq.n	80046d0 <_malloc_r+0x2e0>
 80046c4:	494c      	ldr	r1, [pc, #304]	; (80047f8 <_malloc_r+0x408>)
 80046c6:	3901      	subs	r1, #1
 80046c8:	440f      	add	r7, r1
 80046ca:	3101      	adds	r1, #1
 80046cc:	4249      	negs	r1, r1
 80046ce:	400f      	ands	r7, r1
 80046d0:	4639      	mov	r1, r7
 80046d2:	4648      	mov	r0, r9
 80046d4:	9201      	str	r2, [sp, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	f000 fb80 	bl	8004ddc <_sbrk_r>
 80046dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80046e0:	4680      	mov	r8, r0
 80046e2:	d056      	beq.n	8004792 <_malloc_r+0x3a2>
 80046e4:	9b00      	ldr	r3, [sp, #0]
 80046e6:	9a01      	ldr	r2, [sp, #4]
 80046e8:	4283      	cmp	r3, r0
 80046ea:	d901      	bls.n	80046f0 <_malloc_r+0x300>
 80046ec:	45ab      	cmp	fp, r5
 80046ee:	d150      	bne.n	8004792 <_malloc_r+0x3a2>
 80046f0:	4842      	ldr	r0, [pc, #264]	; (80047fc <_malloc_r+0x40c>)
 80046f2:	6801      	ldr	r1, [r0, #0]
 80046f4:	4543      	cmp	r3, r8
 80046f6:	eb07 0e01 	add.w	lr, r7, r1
 80046fa:	f8c0 e000 	str.w	lr, [r0]
 80046fe:	4940      	ldr	r1, [pc, #256]	; (8004800 <_malloc_r+0x410>)
 8004700:	4682      	mov	sl, r0
 8004702:	d113      	bne.n	800472c <_malloc_r+0x33c>
 8004704:	420b      	tst	r3, r1
 8004706:	d111      	bne.n	800472c <_malloc_r+0x33c>
 8004708:	68ab      	ldr	r3, [r5, #8]
 800470a:	443e      	add	r6, r7
 800470c:	f046 0601 	orr.w	r6, r6, #1
 8004710:	605e      	str	r6, [r3, #4]
 8004712:	4a3c      	ldr	r2, [pc, #240]	; (8004804 <_malloc_r+0x414>)
 8004714:	f8da 3000 	ldr.w	r3, [sl]
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	428b      	cmp	r3, r1
 800471c:	bf88      	it	hi
 800471e:	6013      	strhi	r3, [r2, #0]
 8004720:	4a39      	ldr	r2, [pc, #228]	; (8004808 <_malloc_r+0x418>)
 8004722:	6811      	ldr	r1, [r2, #0]
 8004724:	428b      	cmp	r3, r1
 8004726:	bf88      	it	hi
 8004728:	6013      	strhi	r3, [r2, #0]
 800472a:	e032      	b.n	8004792 <_malloc_r+0x3a2>
 800472c:	6810      	ldr	r0, [r2, #0]
 800472e:	3001      	adds	r0, #1
 8004730:	bf1b      	ittet	ne
 8004732:	eba8 0303 	subne.w	r3, r8, r3
 8004736:	4473      	addne	r3, lr
 8004738:	f8c2 8000 	streq.w	r8, [r2]
 800473c:	f8ca 3000 	strne.w	r3, [sl]
 8004740:	f018 0007 	ands.w	r0, r8, #7
 8004744:	bf1c      	itt	ne
 8004746:	f1c0 0008 	rsbne	r0, r0, #8
 800474a:	4480      	addne	r8, r0
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <_malloc_r+0x408>)
 800474e:	4447      	add	r7, r8
 8004750:	4418      	add	r0, r3
 8004752:	400f      	ands	r7, r1
 8004754:	1bc7      	subs	r7, r0, r7
 8004756:	4639      	mov	r1, r7
 8004758:	4648      	mov	r0, r9
 800475a:	f000 fb3f 	bl	8004ddc <_sbrk_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	bf08      	it	eq
 8004762:	4640      	moveq	r0, r8
 8004764:	f8da 3000 	ldr.w	r3, [sl]
 8004768:	f8c5 8008 	str.w	r8, [r5, #8]
 800476c:	bf08      	it	eq
 800476e:	2700      	moveq	r7, #0
 8004770:	eba0 0008 	sub.w	r0, r0, r8
 8004774:	443b      	add	r3, r7
 8004776:	4407      	add	r7, r0
 8004778:	f047 0701 	orr.w	r7, r7, #1
 800477c:	45ab      	cmp	fp, r5
 800477e:	f8ca 3000 	str.w	r3, [sl]
 8004782:	f8c8 7004 	str.w	r7, [r8, #4]
 8004786:	d0c4      	beq.n	8004712 <_malloc_r+0x322>
 8004788:	2e0f      	cmp	r6, #15
 800478a:	d810      	bhi.n	80047ae <_malloc_r+0x3be>
 800478c:	2301      	movs	r3, #1
 800478e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004792:	68ab      	ldr	r3, [r5, #8]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	f022 0203 	bic.w	r2, r2, #3
 800479a:	4294      	cmp	r4, r2
 800479c:	eba2 0304 	sub.w	r3, r2, r4
 80047a0:	d801      	bhi.n	80047a6 <_malloc_r+0x3b6>
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	dc1a      	bgt.n	80047dc <_malloc_r+0x3ec>
 80047a6:	4648      	mov	r0, r9
 80047a8:	f000 f842 	bl	8004830 <__malloc_unlock>
 80047ac:	e62d      	b.n	800440a <_malloc_r+0x1a>
 80047ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 80047b2:	3e0c      	subs	r6, #12
 80047b4:	f026 0607 	bic.w	r6, r6, #7
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	4333      	orrs	r3, r6
 80047be:	f8cb 3004 	str.w	r3, [fp, #4]
 80047c2:	eb0b 0306 	add.w	r3, fp, r6
 80047c6:	2205      	movs	r2, #5
 80047c8:	2e0f      	cmp	r6, #15
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	609a      	str	r2, [r3, #8]
 80047ce:	d9a0      	bls.n	8004712 <_malloc_r+0x322>
 80047d0:	f10b 0108 	add.w	r1, fp, #8
 80047d4:	4648      	mov	r0, r9
 80047d6:	f000 fc0f 	bl	8004ff8 <_free_r>
 80047da:	e79a      	b.n	8004712 <_malloc_r+0x322>
 80047dc:	68ae      	ldr	r6, [r5, #8]
 80047de:	f044 0201 	orr.w	r2, r4, #1
 80047e2:	4434      	add	r4, r6
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6072      	str	r2, [r6, #4]
 80047ea:	60ac      	str	r4, [r5, #8]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	e631      	b.n	8004454 <_malloc_r+0x64>
 80047f0:	20000768 	.word	0x20000768
 80047f4:	20000598 	.word	0x20000598
 80047f8:	00000080 	.word	0x00000080
 80047fc:	20000738 	.word	0x20000738
 8004800:	0000007f 	.word	0x0000007f
 8004804:	20000760 	.word	0x20000760
 8004808:	20000764 	.word	0x20000764

0800480c <memcpy>:
 800480c:	b510      	push	{r4, lr}
 800480e:	1e43      	subs	r3, r0, #1
 8004810:	440a      	add	r2, r1
 8004812:	4291      	cmp	r1, r2
 8004814:	d100      	bne.n	8004818 <memcpy+0xc>
 8004816:	bd10      	pop	{r4, pc}
 8004818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004820:	e7f7      	b.n	8004812 <memcpy+0x6>
	...

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f000 bca3 	b.w	8005170 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	20000794 	.word	0x20000794

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f000 bc9e 	b.w	8005172 <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	20000794 	.word	0x20000794

0800483c <_Balloc>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004840:	4604      	mov	r4, r0
 8004842:	460e      	mov	r6, r1
 8004844:	b93d      	cbnz	r5, 8004856 <_Balloc+0x1a>
 8004846:	2010      	movs	r0, #16
 8004848:	f7ff fdca 	bl	80043e0 <malloc>
 800484c:	6260      	str	r0, [r4, #36]	; 0x24
 800484e:	6045      	str	r5, [r0, #4]
 8004850:	6085      	str	r5, [r0, #8]
 8004852:	6005      	str	r5, [r0, #0]
 8004854:	60c5      	str	r5, [r0, #12]
 8004856:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004858:	68eb      	ldr	r3, [r5, #12]
 800485a:	b183      	cbz	r3, 800487e <_Balloc+0x42>
 800485c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004864:	b9b8      	cbnz	r0, 8004896 <_Balloc+0x5a>
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f506 	lsl.w	r5, r1, r6
 800486c:	1d6a      	adds	r2, r5, #5
 800486e:	0092      	lsls	r2, r2, #2
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fb3d 	bl	8004ef0 <_calloc_r>
 8004876:	b160      	cbz	r0, 8004892 <_Balloc+0x56>
 8004878:	6046      	str	r6, [r0, #4]
 800487a:	6085      	str	r5, [r0, #8]
 800487c:	e00e      	b.n	800489c <_Balloc+0x60>
 800487e:	2221      	movs	r2, #33	; 0x21
 8004880:	2104      	movs	r1, #4
 8004882:	4620      	mov	r0, r4
 8004884:	f000 fb34 	bl	8004ef0 <_calloc_r>
 8004888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800488a:	60e8      	str	r0, [r5, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e4      	bne.n	800485c <_Balloc+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	6802      	ldr	r2, [r0, #0]
 8004898:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800489c:	2300      	movs	r3, #0
 800489e:	6103      	str	r3, [r0, #16]
 80048a0:	60c3      	str	r3, [r0, #12]
 80048a2:	bd70      	pop	{r4, r5, r6, pc}

080048a4 <_Bfree>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80048a8:	4606      	mov	r6, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	b93c      	cbnz	r4, 80048be <_Bfree+0x1a>
 80048ae:	2010      	movs	r0, #16
 80048b0:	f7ff fd96 	bl	80043e0 <malloc>
 80048b4:	6270      	str	r0, [r6, #36]	; 0x24
 80048b6:	6044      	str	r4, [r0, #4]
 80048b8:	6084      	str	r4, [r0, #8]
 80048ba:	6004      	str	r4, [r0, #0]
 80048bc:	60c4      	str	r4, [r0, #12]
 80048be:	b13d      	cbz	r5, 80048d0 <_Bfree+0x2c>
 80048c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80048c2:	686a      	ldr	r2, [r5, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ca:	6029      	str	r1, [r5, #0]
 80048cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80048d0:	bd70      	pop	{r4, r5, r6, pc}

080048d2 <__multadd>:
 80048d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	690d      	ldr	r5, [r1, #16]
 80048d8:	461f      	mov	r7, r3
 80048da:	4606      	mov	r6, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	f101 0e14 	add.w	lr, r1, #20
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8de 0000 	ldr.w	r0, [lr]
 80048e8:	b281      	uxth	r1, r0
 80048ea:	fb02 7101 	mla	r1, r2, r1, r7
 80048ee:	0c0f      	lsrs	r7, r1, #16
 80048f0:	0c00      	lsrs	r0, r0, #16
 80048f2:	fb02 7000 	mla	r0, r2, r0, r7
 80048f6:	b289      	uxth	r1, r1
 80048f8:	3301      	adds	r3, #1
 80048fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80048fe:	429d      	cmp	r5, r3
 8004900:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004904:	f84e 1b04 	str.w	r1, [lr], #4
 8004908:	dcec      	bgt.n	80048e4 <__multadd+0x12>
 800490a:	b1d7      	cbz	r7, 8004942 <__multadd+0x70>
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	429d      	cmp	r5, r3
 8004910:	db12      	blt.n	8004938 <__multadd+0x66>
 8004912:	6861      	ldr	r1, [r4, #4]
 8004914:	4630      	mov	r0, r6
 8004916:	3101      	adds	r1, #1
 8004918:	f7ff ff90 	bl	800483c <_Balloc>
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	3202      	adds	r2, #2
 8004920:	f104 010c 	add.w	r1, r4, #12
 8004924:	4680      	mov	r8, r0
 8004926:	0092      	lsls	r2, r2, #2
 8004928:	300c      	adds	r0, #12
 800492a:	f7ff ff6f 	bl	800480c <memcpy>
 800492e:	4621      	mov	r1, r4
 8004930:	4630      	mov	r0, r6
 8004932:	f7ff ffb7 	bl	80048a4 <_Bfree>
 8004936:	4644      	mov	r4, r8
 8004938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800493c:	3501      	adds	r5, #1
 800493e:	615f      	str	r7, [r3, #20]
 8004940:	6125      	str	r5, [r4, #16]
 8004942:	4620      	mov	r0, r4
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004948 <__hi0bits>:
 8004948:	0c02      	lsrs	r2, r0, #16
 800494a:	0412      	lsls	r2, r2, #16
 800494c:	4603      	mov	r3, r0
 800494e:	b9b2      	cbnz	r2, 800497e <__hi0bits+0x36>
 8004950:	0403      	lsls	r3, r0, #16
 8004952:	2010      	movs	r0, #16
 8004954:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004958:	bf04      	itt	eq
 800495a:	021b      	lsleq	r3, r3, #8
 800495c:	3008      	addeq	r0, #8
 800495e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004962:	bf04      	itt	eq
 8004964:	011b      	lsleq	r3, r3, #4
 8004966:	3004      	addeq	r0, #4
 8004968:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800496c:	bf04      	itt	eq
 800496e:	009b      	lsleq	r3, r3, #2
 8004970:	3002      	addeq	r0, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	db06      	blt.n	8004984 <__hi0bits+0x3c>
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	d503      	bpl.n	8004982 <__hi0bits+0x3a>
 800497a:	3001      	adds	r0, #1
 800497c:	4770      	bx	lr
 800497e:	2000      	movs	r0, #0
 8004980:	e7e8      	b.n	8004954 <__hi0bits+0xc>
 8004982:	2020      	movs	r0, #32
 8004984:	4770      	bx	lr

08004986 <__lo0bits>:
 8004986:	6803      	ldr	r3, [r0, #0]
 8004988:	f013 0207 	ands.w	r2, r3, #7
 800498c:	4601      	mov	r1, r0
 800498e:	d00b      	beq.n	80049a8 <__lo0bits+0x22>
 8004990:	07da      	lsls	r2, r3, #31
 8004992:	d423      	bmi.n	80049dc <__lo0bits+0x56>
 8004994:	0798      	lsls	r0, r3, #30
 8004996:	bf49      	itett	mi
 8004998:	085b      	lsrmi	r3, r3, #1
 800499a:	089b      	lsrpl	r3, r3, #2
 800499c:	2001      	movmi	r0, #1
 800499e:	600b      	strmi	r3, [r1, #0]
 80049a0:	bf5c      	itt	pl
 80049a2:	600b      	strpl	r3, [r1, #0]
 80049a4:	2002      	movpl	r0, #2
 80049a6:	4770      	bx	lr
 80049a8:	b298      	uxth	r0, r3
 80049aa:	b9a8      	cbnz	r0, 80049d8 <__lo0bits+0x52>
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	2010      	movs	r0, #16
 80049b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80049b4:	bf04      	itt	eq
 80049b6:	0a1b      	lsreq	r3, r3, #8
 80049b8:	3008      	addeq	r0, #8
 80049ba:	071a      	lsls	r2, r3, #28
 80049bc:	bf04      	itt	eq
 80049be:	091b      	lsreq	r3, r3, #4
 80049c0:	3004      	addeq	r0, #4
 80049c2:	079a      	lsls	r2, r3, #30
 80049c4:	bf04      	itt	eq
 80049c6:	089b      	lsreq	r3, r3, #2
 80049c8:	3002      	addeq	r0, #2
 80049ca:	07da      	lsls	r2, r3, #31
 80049cc:	d402      	bmi.n	80049d4 <__lo0bits+0x4e>
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	d006      	beq.n	80049e0 <__lo0bits+0x5a>
 80049d2:	3001      	adds	r0, #1
 80049d4:	600b      	str	r3, [r1, #0]
 80049d6:	4770      	bx	lr
 80049d8:	4610      	mov	r0, r2
 80049da:	e7e9      	b.n	80049b0 <__lo0bits+0x2a>
 80049dc:	2000      	movs	r0, #0
 80049de:	4770      	bx	lr
 80049e0:	2020      	movs	r0, #32
 80049e2:	4770      	bx	lr

080049e4 <__i2b>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	460c      	mov	r4, r1
 80049e8:	2101      	movs	r1, #1
 80049ea:	f7ff ff27 	bl	800483c <_Balloc>
 80049ee:	2201      	movs	r2, #1
 80049f0:	6144      	str	r4, [r0, #20]
 80049f2:	6102      	str	r2, [r0, #16]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__multiply>:
 80049f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	4614      	mov	r4, r2
 80049fc:	690a      	ldr	r2, [r1, #16]
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	bfb8      	it	lt
 8004a04:	460b      	movlt	r3, r1
 8004a06:	4689      	mov	r9, r1
 8004a08:	bfbc      	itt	lt
 8004a0a:	46a1      	movlt	r9, r4
 8004a0c:	461c      	movlt	r4, r3
 8004a0e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004a12:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a16:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004a1a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a1e:	eb07 060a 	add.w	r6, r7, sl
 8004a22:	429e      	cmp	r6, r3
 8004a24:	bfc8      	it	gt
 8004a26:	3101      	addgt	r1, #1
 8004a28:	f7ff ff08 	bl	800483c <_Balloc>
 8004a2c:	f100 0514 	add.w	r5, r0, #20
 8004a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a34:	462b      	mov	r3, r5
 8004a36:	2200      	movs	r2, #0
 8004a38:	4543      	cmp	r3, r8
 8004a3a:	d316      	bcc.n	8004a6a <__multiply+0x74>
 8004a3c:	f104 0214 	add.w	r2, r4, #20
 8004a40:	f109 0114 	add.w	r1, r9, #20
 8004a44:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004a48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	9c01      	ldr	r4, [sp, #4]
 8004a50:	4294      	cmp	r4, r2
 8004a52:	4613      	mov	r3, r2
 8004a54:	d80c      	bhi.n	8004a70 <__multiply+0x7a>
 8004a56:	2e00      	cmp	r6, #0
 8004a58:	dd03      	ble.n	8004a62 <__multiply+0x6c>
 8004a5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d054      	beq.n	8004b0c <__multiply+0x116>
 8004a62:	6106      	str	r6, [r0, #16]
 8004a64:	b003      	add	sp, #12
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	f843 2b04 	str.w	r2, [r3], #4
 8004a6e:	e7e3      	b.n	8004a38 <__multiply+0x42>
 8004a70:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a74:	3204      	adds	r2, #4
 8004a76:	f1ba 0f00 	cmp.w	sl, #0
 8004a7a:	d020      	beq.n	8004abe <__multiply+0xc8>
 8004a7c:	46ae      	mov	lr, r5
 8004a7e:	4689      	mov	r9, r1
 8004a80:	f04f 0c00 	mov.w	ip, #0
 8004a84:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a88:	f8be b000 	ldrh.w	fp, [lr]
 8004a8c:	b2a3      	uxth	r3, r4
 8004a8e:	fb0a b303 	mla	r3, sl, r3, fp
 8004a92:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004a96:	f8de 4000 	ldr.w	r4, [lr]
 8004a9a:	4463      	add	r3, ip
 8004a9c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004aa0:	fb0a c40b 	mla	r4, sl, fp, ip
 8004aa4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004aae:	454f      	cmp	r7, r9
 8004ab0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004ab4:	f84e 3b04 	str.w	r3, [lr], #4
 8004ab8:	d8e4      	bhi.n	8004a84 <__multiply+0x8e>
 8004aba:	f8ce c000 	str.w	ip, [lr]
 8004abe:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004ac2:	f1b9 0f00 	cmp.w	r9, #0
 8004ac6:	d01f      	beq.n	8004b08 <__multiply+0x112>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	46ae      	mov	lr, r5
 8004acc:	468c      	mov	ip, r1
 8004ace:	f04f 0a00 	mov.w	sl, #0
 8004ad2:	f8bc 4000 	ldrh.w	r4, [ip]
 8004ad6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004ada:	fb09 b404 	mla	r4, r9, r4, fp
 8004ade:	44a2      	add	sl, r4
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004ae6:	f84e 3b04 	str.w	r3, [lr], #4
 8004aea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004aee:	f8be 4000 	ldrh.w	r4, [lr]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	fb09 4303 	mla	r3, r9, r3, r4
 8004af8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004afc:	4567      	cmp	r7, ip
 8004afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b02:	d8e6      	bhi.n	8004ad2 <__multiply+0xdc>
 8004b04:	f8ce 3000 	str.w	r3, [lr]
 8004b08:	3504      	adds	r5, #4
 8004b0a:	e7a0      	b.n	8004a4e <__multiply+0x58>
 8004b0c:	3e01      	subs	r6, #1
 8004b0e:	e7a2      	b.n	8004a56 <__multiply+0x60>

08004b10 <__pow5mult>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	4615      	mov	r5, r2
 8004b16:	f012 0203 	ands.w	r2, r2, #3
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	460f      	mov	r7, r1
 8004b1e:	d007      	beq.n	8004b30 <__pow5mult+0x20>
 8004b20:	3a01      	subs	r2, #1
 8004b22:	4c21      	ldr	r4, [pc, #132]	; (8004ba8 <__pow5mult+0x98>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b2a:	f7ff fed2 	bl	80048d2 <__multadd>
 8004b2e:	4607      	mov	r7, r0
 8004b30:	10ad      	asrs	r5, r5, #2
 8004b32:	d035      	beq.n	8004ba0 <__pow5mult+0x90>
 8004b34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b36:	b93c      	cbnz	r4, 8004b48 <__pow5mult+0x38>
 8004b38:	2010      	movs	r0, #16
 8004b3a:	f7ff fc51 	bl	80043e0 <malloc>
 8004b3e:	6270      	str	r0, [r6, #36]	; 0x24
 8004b40:	6044      	str	r4, [r0, #4]
 8004b42:	6084      	str	r4, [r0, #8]
 8004b44:	6004      	str	r4, [r0, #0]
 8004b46:	60c4      	str	r4, [r0, #12]
 8004b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b50:	b94c      	cbnz	r4, 8004b66 <__pow5mult+0x56>
 8004b52:	f240 2171 	movw	r1, #625	; 0x271
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff ff44 	bl	80049e4 <__i2b>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b62:	4604      	mov	r4, r0
 8004b64:	6003      	str	r3, [r0, #0]
 8004b66:	f04f 0800 	mov.w	r8, #0
 8004b6a:	07eb      	lsls	r3, r5, #31
 8004b6c:	d50a      	bpl.n	8004b84 <__pow5mult+0x74>
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4622      	mov	r2, r4
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ff3f 	bl	80049f6 <__multiply>
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4681      	mov	r9, r0
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff fe91 	bl	80048a4 <_Bfree>
 8004b82:	464f      	mov	r7, r9
 8004b84:	106d      	asrs	r5, r5, #1
 8004b86:	d00b      	beq.n	8004ba0 <__pow5mult+0x90>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	b938      	cbnz	r0, 8004b9c <__pow5mult+0x8c>
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7ff ff30 	bl	80049f6 <__multiply>
 8004b96:	6020      	str	r0, [r4, #0]
 8004b98:	f8c0 8000 	str.w	r8, [r0]
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e7e4      	b.n	8004b6a <__pow5mult+0x5a>
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba6:	bf00      	nop
 8004ba8:	080056a0 	.word	0x080056a0

08004bac <__lshift>:
 8004bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	6849      	ldr	r1, [r1, #4]
 8004bba:	eb0a 0903 	add.w	r9, sl, r3
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	4616      	mov	r6, r2
 8004bc4:	f109 0501 	add.w	r5, r9, #1
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	db31      	blt.n	8004c30 <__lshift+0x84>
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff fe35 	bl	800483c <_Balloc>
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	f100 0314 	add.w	r3, r0, #20
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4552      	cmp	r2, sl
 8004bde:	db2a      	blt.n	8004c36 <__lshift+0x8a>
 8004be0:	6920      	ldr	r0, [r4, #16]
 8004be2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004be6:	f104 0114 	add.w	r1, r4, #20
 8004bea:	f016 021f 	ands.w	r2, r6, #31
 8004bee:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004bf2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004bf6:	d022      	beq.n	8004c3e <__lshift+0x92>
 8004bf8:	f1c2 0c20 	rsb	ip, r2, #32
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	680e      	ldr	r6, [r1, #0]
 8004c00:	4096      	lsls	r6, r2
 8004c02:	4330      	orrs	r0, r6
 8004c04:	f843 0b04 	str.w	r0, [r3], #4
 8004c08:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c0c:	458e      	cmp	lr, r1
 8004c0e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004c12:	d8f4      	bhi.n	8004bfe <__lshift+0x52>
 8004c14:	6018      	str	r0, [r3, #0]
 8004c16:	b108      	cbz	r0, 8004c1c <__lshift+0x70>
 8004c18:	f109 0502 	add.w	r5, r9, #2
 8004c1c:	3d01      	subs	r5, #1
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c24:	4621      	mov	r1, r4
 8004c26:	f7ff fe3d 	bl	80048a4 <_Bfree>
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3101      	adds	r1, #1
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	e7c8      	b.n	8004bc8 <__lshift+0x1c>
 8004c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c3a:	3201      	adds	r2, #1
 8004c3c:	e7ce      	b.n	8004bdc <__lshift+0x30>
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c44:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c48:	458e      	cmp	lr, r1
 8004c4a:	d8f9      	bhi.n	8004c40 <__lshift+0x94>
 8004c4c:	e7e6      	b.n	8004c1c <__lshift+0x70>

08004c4e <__mcmp>:
 8004c4e:	6903      	ldr	r3, [r0, #16]
 8004c50:	690a      	ldr	r2, [r1, #16]
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	b530      	push	{r4, r5, lr}
 8004c56:	d10c      	bne.n	8004c72 <__mcmp+0x24>
 8004c58:	0092      	lsls	r2, r2, #2
 8004c5a:	3014      	adds	r0, #20
 8004c5c:	3114      	adds	r1, #20
 8004c5e:	1884      	adds	r4, r0, r2
 8004c60:	4411      	add	r1, r2
 8004c62:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c66:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c6a:	4295      	cmp	r5, r2
 8004c6c:	d003      	beq.n	8004c76 <__mcmp+0x28>
 8004c6e:	d305      	bcc.n	8004c7c <__mcmp+0x2e>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4618      	mov	r0, r3
 8004c74:	bd30      	pop	{r4, r5, pc}
 8004c76:	42a0      	cmp	r0, r4
 8004c78:	d3f3      	bcc.n	8004c62 <__mcmp+0x14>
 8004c7a:	e7fa      	b.n	8004c72 <__mcmp+0x24>
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c80:	e7f7      	b.n	8004c72 <__mcmp+0x24>

08004c82 <__mdiff>:
 8004c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c86:	460d      	mov	r5, r1
 8004c88:	4607      	mov	r7, r0
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	4614      	mov	r4, r2
 8004c90:	f7ff ffdd 	bl	8004c4e <__mcmp>
 8004c94:	1e06      	subs	r6, r0, #0
 8004c96:	d108      	bne.n	8004caa <__mdiff+0x28>
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f7ff fdce 	bl	800483c <_Balloc>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	6103      	str	r3, [r0, #16]
 8004ca4:	6146      	str	r6, [r0, #20]
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	bfa4      	itt	ge
 8004cac:	4623      	movge	r3, r4
 8004cae:	462c      	movge	r4, r5
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	6861      	ldr	r1, [r4, #4]
 8004cb4:	bfa6      	itte	ge
 8004cb6:	461d      	movge	r5, r3
 8004cb8:	2600      	movge	r6, #0
 8004cba:	2601      	movlt	r6, #1
 8004cbc:	f7ff fdbe 	bl	800483c <_Balloc>
 8004cc0:	692b      	ldr	r3, [r5, #16]
 8004cc2:	60c6      	str	r6, [r0, #12]
 8004cc4:	6926      	ldr	r6, [r4, #16]
 8004cc6:	f105 0914 	add.w	r9, r5, #20
 8004cca:	f104 0214 	add.w	r2, r4, #20
 8004cce:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004cd2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004cd6:	f100 0514 	add.w	r5, r0, #20
 8004cda:	f04f 0c00 	mov.w	ip, #0
 8004cde:	f852 ab04 	ldr.w	sl, [r2], #4
 8004ce2:	f859 4b04 	ldr.w	r4, [r9], #4
 8004ce6:	fa1c f18a 	uxtah	r1, ip, sl
 8004cea:	b2a3      	uxth	r3, r4
 8004cec:	1ac9      	subs	r1, r1, r3
 8004cee:	0c23      	lsrs	r3, r4, #16
 8004cf0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004cf4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004cf8:	b289      	uxth	r1, r1
 8004cfa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cfe:	45c8      	cmp	r8, r9
 8004d00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d04:	4696      	mov	lr, r2
 8004d06:	f845 3b04 	str.w	r3, [r5], #4
 8004d0a:	d8e8      	bhi.n	8004cde <__mdiff+0x5c>
 8004d0c:	45be      	cmp	lr, r7
 8004d0e:	d305      	bcc.n	8004d1c <__mdiff+0x9a>
 8004d10:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d14:	b18b      	cbz	r3, 8004d3a <__mdiff+0xb8>
 8004d16:	6106      	str	r6, [r0, #16]
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d20:	fa1c f381 	uxtah	r3, ip, r1
 8004d24:	141a      	asrs	r2, r3, #16
 8004d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d34:	f845 3b04 	str.w	r3, [r5], #4
 8004d38:	e7e8      	b.n	8004d0c <__mdiff+0x8a>
 8004d3a:	3e01      	subs	r6, #1
 8004d3c:	e7e8      	b.n	8004d10 <__mdiff+0x8e>

08004d3e <__d2b>:
 8004d3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d42:	460e      	mov	r6, r1
 8004d44:	2101      	movs	r1, #1
 8004d46:	ec59 8b10 	vmov	r8, r9, d0
 8004d4a:	4615      	mov	r5, r2
 8004d4c:	f7ff fd76 	bl	800483c <_Balloc>
 8004d50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d54:	4607      	mov	r7, r0
 8004d56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d5a:	bb34      	cbnz	r4, 8004daa <__d2b+0x6c>
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	f1b8 0f00 	cmp.w	r8, #0
 8004d62:	d027      	beq.n	8004db4 <__d2b+0x76>
 8004d64:	a802      	add	r0, sp, #8
 8004d66:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004d6a:	f7ff fe0c 	bl	8004986 <__lo0bits>
 8004d6e:	9900      	ldr	r1, [sp, #0]
 8004d70:	b1f0      	cbz	r0, 8004db0 <__d2b+0x72>
 8004d72:	9a01      	ldr	r2, [sp, #4]
 8004d74:	f1c0 0320 	rsb	r3, r0, #32
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	40c2      	lsrs	r2, r0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	9201      	str	r2, [sp, #4]
 8004d84:	9b01      	ldr	r3, [sp, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2102      	movne	r1, #2
 8004d8e:	2101      	moveq	r1, #1
 8004d90:	6139      	str	r1, [r7, #16]
 8004d92:	b1c4      	cbz	r4, 8004dc6 <__d2b+0x88>
 8004d94:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d98:	4404      	add	r4, r0
 8004d9a:	6034      	str	r4, [r6, #0]
 8004d9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004da0:	6028      	str	r0, [r5, #0]
 8004da2:	4638      	mov	r0, r7
 8004da4:	b003      	add	sp, #12
 8004da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dae:	e7d5      	b.n	8004d5c <__d2b+0x1e>
 8004db0:	6179      	str	r1, [r7, #20]
 8004db2:	e7e7      	b.n	8004d84 <__d2b+0x46>
 8004db4:	a801      	add	r0, sp, #4
 8004db6:	f7ff fde6 	bl	8004986 <__lo0bits>
 8004dba:	9b01      	ldr	r3, [sp, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	6139      	str	r1, [r7, #16]
 8004dc2:	3020      	adds	r0, #32
 8004dc4:	e7e5      	b.n	8004d92 <__d2b+0x54>
 8004dc6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004dca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004dce:	6030      	str	r0, [r6, #0]
 8004dd0:	6918      	ldr	r0, [r3, #16]
 8004dd2:	f7ff fdb9 	bl	8004948 <__hi0bits>
 8004dd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004dda:	e7e1      	b.n	8004da0 <__d2b+0x62>

08004ddc <_sbrk_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4c06      	ldr	r4, [pc, #24]	; (8004df8 <_sbrk_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4605      	mov	r5, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	f000 fb86 	bl	80054f8 <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_sbrk_r+0x1a>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_sbrk_r+0x1a>
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	2000079c 	.word	0x2000079c

08004dfc <__ssprint_r>:
 8004dfc:	6893      	ldr	r3, [r2, #8]
 8004dfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e02:	4681      	mov	r9, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	4617      	mov	r7, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d060      	beq.n	8004ece <__ssprint_r+0xd2>
 8004e0c:	f04f 0b00 	mov.w	fp, #0
 8004e10:	f8d2 a000 	ldr.w	sl, [r2]
 8004e14:	465e      	mov	r6, fp
 8004e16:	b356      	cbz	r6, 8004e6e <__ssprint_r+0x72>
 8004e18:	68a3      	ldr	r3, [r4, #8]
 8004e1a:	429e      	cmp	r6, r3
 8004e1c:	d344      	bcc.n	8004ea8 <__ssprint_r+0xac>
 8004e1e:	89a2      	ldrh	r2, [r4, #12]
 8004e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e24:	d03e      	beq.n	8004ea4 <__ssprint_r+0xa8>
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	6921      	ldr	r1, [r4, #16]
 8004e2a:	eba5 0801 	sub.w	r8, r5, r1
 8004e2e:	6965      	ldr	r5, [r4, #20]
 8004e30:	2302      	movs	r3, #2
 8004e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e36:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e3a:	f108 0301 	add.w	r3, r8, #1
 8004e3e:	4433      	add	r3, r6
 8004e40:	429d      	cmp	r5, r3
 8004e42:	bf38      	it	cc
 8004e44:	461d      	movcc	r5, r3
 8004e46:	0553      	lsls	r3, r2, #21
 8004e48:	d546      	bpl.n	8004ed8 <__ssprint_r+0xdc>
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	4648      	mov	r0, r9
 8004e4e:	f7ff facf 	bl	80043f0 <_malloc_r>
 8004e52:	b998      	cbnz	r0, 8004e7c <__ssprint_r+0x80>
 8004e54:	230c      	movs	r3, #12
 8004e56:	f8c9 3000 	str.w	r3, [r9]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e6c:	e031      	b.n	8004ed2 <__ssprint_r+0xd6>
 8004e6e:	f8da b000 	ldr.w	fp, [sl]
 8004e72:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004e76:	f10a 0a08 	add.w	sl, sl, #8
 8004e7a:	e7cc      	b.n	8004e16 <__ssprint_r+0x1a>
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	6921      	ldr	r1, [r4, #16]
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	f7ff fcc3 	bl	800480c <memcpy>
 8004e86:	89a2      	ldrh	r2, [r4, #12]
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e92:	81a2      	strh	r2, [r4, #12]
 8004e94:	6123      	str	r3, [r4, #16]
 8004e96:	6165      	str	r5, [r4, #20]
 8004e98:	4443      	add	r3, r8
 8004e9a:	eba5 0508 	sub.w	r5, r5, r8
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	60a5      	str	r5, [r4, #8]
 8004ea2:	4633      	mov	r3, r6
 8004ea4:	429e      	cmp	r6, r3
 8004ea6:	d200      	bcs.n	8004eaa <__ssprint_r+0xae>
 8004ea8:	4633      	mov	r3, r6
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4659      	mov	r1, fp
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	f000 f971 	bl	8005198 <memmove>
 8004eb6:	68a2      	ldr	r2, [r4, #8]
 8004eb8:	9b01      	ldr	r3, [sp, #4]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	60a2      	str	r2, [r4, #8]
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	1b9e      	subs	r6, r3, r6
 8004ec8:	60be      	str	r6, [r7, #8]
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d1cf      	bne.n	8004e6e <__ssprint_r+0x72>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	b003      	add	sp, #12
 8004ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed8:	462a      	mov	r2, r5
 8004eda:	4648      	mov	r0, r9
 8004edc:	f000 f97e 	bl	80051dc <_realloc_r>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1d6      	bne.n	8004e94 <__ssprint_r+0x98>
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	4648      	mov	r0, r9
 8004eea:	f000 f885 	bl	8004ff8 <_free_r>
 8004eee:	e7b1      	b.n	8004e54 <__ssprint_r+0x58>

08004ef0 <_calloc_r>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4351      	muls	r1, r2
 8004ef4:	f7ff fa7c 	bl	80043f0 <_malloc_r>
 8004ef8:	4604      	mov	r4, r0
 8004efa:	b198      	cbz	r0, 8004f24 <_calloc_r+0x34>
 8004efc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004f00:	f022 0203 	bic.w	r2, r2, #3
 8004f04:	3a04      	subs	r2, #4
 8004f06:	2a24      	cmp	r2, #36	; 0x24
 8004f08:	d81b      	bhi.n	8004f42 <_calloc_r+0x52>
 8004f0a:	2a13      	cmp	r2, #19
 8004f0c:	d917      	bls.n	8004f3e <_calloc_r+0x4e>
 8004f0e:	2100      	movs	r1, #0
 8004f10:	2a1b      	cmp	r2, #27
 8004f12:	6001      	str	r1, [r0, #0]
 8004f14:	6041      	str	r1, [r0, #4]
 8004f16:	d807      	bhi.n	8004f28 <_calloc_r+0x38>
 8004f18:	f100 0308 	add.w	r3, r0, #8
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	605a      	str	r2, [r3, #4]
 8004f22:	609a      	str	r2, [r3, #8]
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd10      	pop	{r4, pc}
 8004f28:	2a24      	cmp	r2, #36	; 0x24
 8004f2a:	6081      	str	r1, [r0, #8]
 8004f2c:	60c1      	str	r1, [r0, #12]
 8004f2e:	bf11      	iteee	ne
 8004f30:	f100 0310 	addne.w	r3, r0, #16
 8004f34:	6101      	streq	r1, [r0, #16]
 8004f36:	f100 0318 	addeq.w	r3, r0, #24
 8004f3a:	6141      	streq	r1, [r0, #20]
 8004f3c:	e7ee      	b.n	8004f1c <_calloc_r+0x2c>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	e7ec      	b.n	8004f1c <_calloc_r+0x2c>
 8004f42:	2100      	movs	r1, #0
 8004f44:	f000 f942 	bl	80051cc <memset>
 8004f48:	e7ec      	b.n	8004f24 <_calloc_r+0x34>
	...

08004f4c <_malloc_trim_r>:
 8004f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f50:	4f25      	ldr	r7, [pc, #148]	; (8004fe8 <_malloc_trim_r+0x9c>)
 8004f52:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004ff4 <_malloc_trim_r+0xa8>
 8004f56:	4689      	mov	r9, r1
 8004f58:	4606      	mov	r6, r0
 8004f5a:	f7ff fc63 	bl	8004824 <__malloc_lock>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	685d      	ldr	r5, [r3, #4]
 8004f62:	f1a8 0411 	sub.w	r4, r8, #17
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	eba4 0409 	sub.w	r4, r4, r9
 8004f6e:	442c      	add	r4, r5
 8004f70:	fbb4 f4f8 	udiv	r4, r4, r8
 8004f74:	3c01      	subs	r4, #1
 8004f76:	fb08 f404 	mul.w	r4, r8, r4
 8004f7a:	4544      	cmp	r4, r8
 8004f7c:	da05      	bge.n	8004f8a <_malloc_trim_r+0x3e>
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff fc56 	bl	8004830 <__malloc_unlock>
 8004f84:	2000      	movs	r0, #0
 8004f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7ff ff25 	bl	8004ddc <_sbrk_r>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	442b      	add	r3, r5
 8004f96:	4298      	cmp	r0, r3
 8004f98:	d1f1      	bne.n	8004f7e <_malloc_trim_r+0x32>
 8004f9a:	4261      	negs	r1, r4
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7ff ff1d 	bl	8004ddc <_sbrk_r>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d110      	bne.n	8004fc8 <_malloc_trim_r+0x7c>
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f7ff ff17 	bl	8004ddc <_sbrk_r>
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	1a83      	subs	r3, r0, r2
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	dde3      	ble.n	8004f7e <_malloc_trim_r+0x32>
 8004fb6:	490d      	ldr	r1, [pc, #52]	; (8004fec <_malloc_trim_r+0xa0>)
 8004fb8:	6809      	ldr	r1, [r1, #0]
 8004fba:	1a40      	subs	r0, r0, r1
 8004fbc:	490c      	ldr	r1, [pc, #48]	; (8004ff0 <_malloc_trim_r+0xa4>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6008      	str	r0, [r1, #0]
 8004fc4:	6053      	str	r3, [r2, #4]
 8004fc6:	e7da      	b.n	8004f7e <_malloc_trim_r+0x32>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <_malloc_trim_r+0xa4>)
 8004fcc:	1b2d      	subs	r5, r5, r4
 8004fce:	f045 0501 	orr.w	r5, r5, #1
 8004fd2:	605d      	str	r5, [r3, #4]
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	1b1c      	subs	r4, r3, r4
 8004fda:	6014      	str	r4, [r2, #0]
 8004fdc:	f7ff fc28 	bl	8004830 <__malloc_unlock>
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000190 	.word	0x20000190
 8004fec:	20000598 	.word	0x20000598
 8004ff0:	20000738 	.word	0x20000738
 8004ff4:	00000080 	.word	0x00000080

08004ff8 <_free_r>:
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4688      	mov	r8, r1
 8005000:	2900      	cmp	r1, #0
 8005002:	f000 80ab 	beq.w	800515c <_free_r+0x164>
 8005006:	f7ff fc0d 	bl	8004824 <__malloc_lock>
 800500a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800500e:	4d54      	ldr	r5, [pc, #336]	; (8005160 <_free_r+0x168>)
 8005010:	f022 0001 	bic.w	r0, r2, #1
 8005014:	f1a8 0308 	sub.w	r3, r8, #8
 8005018:	181f      	adds	r7, r3, r0
 800501a:	68a9      	ldr	r1, [r5, #8]
 800501c:	687e      	ldr	r6, [r7, #4]
 800501e:	428f      	cmp	r7, r1
 8005020:	f026 0603 	bic.w	r6, r6, #3
 8005024:	f002 0201 	and.w	r2, r2, #1
 8005028:	d11b      	bne.n	8005062 <_free_r+0x6a>
 800502a:	4430      	add	r0, r6
 800502c:	b93a      	cbnz	r2, 800503e <_free_r+0x46>
 800502e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	4410      	add	r0, r2
 8005036:	6899      	ldr	r1, [r3, #8]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	60ca      	str	r2, [r1, #12]
 800503c:	6091      	str	r1, [r2, #8]
 800503e:	f040 0201 	orr.w	r2, r0, #1
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	60ab      	str	r3, [r5, #8]
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <_free_r+0x16c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4298      	cmp	r0, r3
 800504c:	d304      	bcc.n	8005058 <_free_r+0x60>
 800504e:	4b46      	ldr	r3, [pc, #280]	; (8005168 <_free_r+0x170>)
 8005050:	4620      	mov	r0, r4
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	f7ff ff7a 	bl	8004f4c <_malloc_trim_r>
 8005058:	4620      	mov	r0, r4
 800505a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800505e:	f7ff bbe7 	b.w	8004830 <__malloc_unlock>
 8005062:	607e      	str	r6, [r7, #4]
 8005064:	2a00      	cmp	r2, #0
 8005066:	d139      	bne.n	80050dc <_free_r+0xe4>
 8005068:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800506c:	1a5b      	subs	r3, r3, r1
 800506e:	4408      	add	r0, r1
 8005070:	6899      	ldr	r1, [r3, #8]
 8005072:	f105 0e08 	add.w	lr, r5, #8
 8005076:	4571      	cmp	r1, lr
 8005078:	d032      	beq.n	80050e0 <_free_r+0xe8>
 800507a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800507e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005082:	f8ce 1008 	str.w	r1, [lr, #8]
 8005086:	19b9      	adds	r1, r7, r6
 8005088:	6849      	ldr	r1, [r1, #4]
 800508a:	07c9      	lsls	r1, r1, #31
 800508c:	d40a      	bmi.n	80050a4 <_free_r+0xac>
 800508e:	4430      	add	r0, r6
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	bb3a      	cbnz	r2, 80050e4 <_free_r+0xec>
 8005094:	4e35      	ldr	r6, [pc, #212]	; (800516c <_free_r+0x174>)
 8005096:	42b1      	cmp	r1, r6
 8005098:	d124      	bne.n	80050e4 <_free_r+0xec>
 800509a:	616b      	str	r3, [r5, #20]
 800509c:	612b      	str	r3, [r5, #16]
 800509e:	2201      	movs	r2, #1
 80050a0:	60d9      	str	r1, [r3, #12]
 80050a2:	6099      	str	r1, [r3, #8]
 80050a4:	f040 0101 	orr.w	r1, r0, #1
 80050a8:	6059      	str	r1, [r3, #4]
 80050aa:	5018      	str	r0, [r3, r0]
 80050ac:	2a00      	cmp	r2, #0
 80050ae:	d1d3      	bne.n	8005058 <_free_r+0x60>
 80050b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80050b4:	d21a      	bcs.n	80050ec <_free_r+0xf4>
 80050b6:	08c0      	lsrs	r0, r0, #3
 80050b8:	1081      	asrs	r1, r0, #2
 80050ba:	2201      	movs	r2, #1
 80050bc:	408a      	lsls	r2, r1
 80050be:	6869      	ldr	r1, [r5, #4]
 80050c0:	3001      	adds	r0, #1
 80050c2:	430a      	orrs	r2, r1
 80050c4:	606a      	str	r2, [r5, #4]
 80050c6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80050ca:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80050ce:	6099      	str	r1, [r3, #8]
 80050d0:	3a08      	subs	r2, #8
 80050d2:	60da      	str	r2, [r3, #12]
 80050d4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80050d8:	60cb      	str	r3, [r1, #12]
 80050da:	e7bd      	b.n	8005058 <_free_r+0x60>
 80050dc:	2200      	movs	r2, #0
 80050de:	e7d2      	b.n	8005086 <_free_r+0x8e>
 80050e0:	2201      	movs	r2, #1
 80050e2:	e7d0      	b.n	8005086 <_free_r+0x8e>
 80050e4:	68fe      	ldr	r6, [r7, #12]
 80050e6:	60ce      	str	r6, [r1, #12]
 80050e8:	60b1      	str	r1, [r6, #8]
 80050ea:	e7db      	b.n	80050a4 <_free_r+0xac>
 80050ec:	0a42      	lsrs	r2, r0, #9
 80050ee:	2a04      	cmp	r2, #4
 80050f0:	d813      	bhi.n	800511a <_free_r+0x122>
 80050f2:	0982      	lsrs	r2, r0, #6
 80050f4:	3238      	adds	r2, #56	; 0x38
 80050f6:	1c51      	adds	r1, r2, #1
 80050f8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80050fc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005100:	428e      	cmp	r6, r1
 8005102:	d124      	bne.n	800514e <_free_r+0x156>
 8005104:	2001      	movs	r0, #1
 8005106:	1092      	asrs	r2, r2, #2
 8005108:	fa00 f202 	lsl.w	r2, r0, r2
 800510c:	6868      	ldr	r0, [r5, #4]
 800510e:	4302      	orrs	r2, r0
 8005110:	606a      	str	r2, [r5, #4]
 8005112:	60de      	str	r6, [r3, #12]
 8005114:	6099      	str	r1, [r3, #8]
 8005116:	60b3      	str	r3, [r6, #8]
 8005118:	e7de      	b.n	80050d8 <_free_r+0xe0>
 800511a:	2a14      	cmp	r2, #20
 800511c:	d801      	bhi.n	8005122 <_free_r+0x12a>
 800511e:	325b      	adds	r2, #91	; 0x5b
 8005120:	e7e9      	b.n	80050f6 <_free_r+0xfe>
 8005122:	2a54      	cmp	r2, #84	; 0x54
 8005124:	d802      	bhi.n	800512c <_free_r+0x134>
 8005126:	0b02      	lsrs	r2, r0, #12
 8005128:	326e      	adds	r2, #110	; 0x6e
 800512a:	e7e4      	b.n	80050f6 <_free_r+0xfe>
 800512c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005130:	d802      	bhi.n	8005138 <_free_r+0x140>
 8005132:	0bc2      	lsrs	r2, r0, #15
 8005134:	3277      	adds	r2, #119	; 0x77
 8005136:	e7de      	b.n	80050f6 <_free_r+0xfe>
 8005138:	f240 5154 	movw	r1, #1364	; 0x554
 800513c:	428a      	cmp	r2, r1
 800513e:	bf9a      	itte	ls
 8005140:	0c82      	lsrls	r2, r0, #18
 8005142:	327c      	addls	r2, #124	; 0x7c
 8005144:	227e      	movhi	r2, #126	; 0x7e
 8005146:	e7d6      	b.n	80050f6 <_free_r+0xfe>
 8005148:	6889      	ldr	r1, [r1, #8]
 800514a:	428e      	cmp	r6, r1
 800514c:	d004      	beq.n	8005158 <_free_r+0x160>
 800514e:	684a      	ldr	r2, [r1, #4]
 8005150:	f022 0203 	bic.w	r2, r2, #3
 8005154:	4290      	cmp	r0, r2
 8005156:	d3f7      	bcc.n	8005148 <_free_r+0x150>
 8005158:	68ce      	ldr	r6, [r1, #12]
 800515a:	e7da      	b.n	8005112 <_free_r+0x11a>
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	20000190 	.word	0x20000190
 8005164:	2000059c 	.word	0x2000059c
 8005168:	20000768 	.word	0x20000768
 800516c:	20000198 	.word	0x20000198

08005170 <__retarget_lock_acquire_recursive>:
 8005170:	4770      	bx	lr

08005172 <__retarget_lock_release_recursive>:
 8005172:	4770      	bx	lr

08005174 <__ascii_mbtowc>:
 8005174:	b082      	sub	sp, #8
 8005176:	b901      	cbnz	r1, 800517a <__ascii_mbtowc+0x6>
 8005178:	a901      	add	r1, sp, #4
 800517a:	b142      	cbz	r2, 800518e <__ascii_mbtowc+0x1a>
 800517c:	b14b      	cbz	r3, 8005192 <__ascii_mbtowc+0x1e>
 800517e:	7813      	ldrb	r3, [r2, #0]
 8005180:	600b      	str	r3, [r1, #0]
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	1c10      	adds	r0, r2, #0
 8005186:	bf18      	it	ne
 8005188:	2001      	movne	r0, #1
 800518a:	b002      	add	sp, #8
 800518c:	4770      	bx	lr
 800518e:	4610      	mov	r0, r2
 8005190:	e7fb      	b.n	800518a <__ascii_mbtowc+0x16>
 8005192:	f06f 0001 	mvn.w	r0, #1
 8005196:	e7f8      	b.n	800518a <__ascii_mbtowc+0x16>

08005198 <memmove>:
 8005198:	4288      	cmp	r0, r1
 800519a:	b510      	push	{r4, lr}
 800519c:	eb01 0302 	add.w	r3, r1, r2
 80051a0:	d803      	bhi.n	80051aa <memmove+0x12>
 80051a2:	1e42      	subs	r2, r0, #1
 80051a4:	4299      	cmp	r1, r3
 80051a6:	d10c      	bne.n	80051c2 <memmove+0x2a>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	4298      	cmp	r0, r3
 80051ac:	d2f9      	bcs.n	80051a2 <memmove+0xa>
 80051ae:	1881      	adds	r1, r0, r2
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	42d3      	cmn	r3, r2
 80051b4:	d100      	bne.n	80051b8 <memmove+0x20>
 80051b6:	bd10      	pop	{r4, pc}
 80051b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051c0:	e7f7      	b.n	80051b2 <memmove+0x1a>
 80051c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051ca:	e7eb      	b.n	80051a4 <memmove+0xc>

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <_realloc_r>:
 80051dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	4682      	mov	sl, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	b929      	cbnz	r1, 80051f2 <_realloc_r+0x16>
 80051e6:	4611      	mov	r1, r2
 80051e8:	b003      	add	sp, #12
 80051ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ee:	f7ff b8ff 	b.w	80043f0 <_malloc_r>
 80051f2:	9201      	str	r2, [sp, #4]
 80051f4:	f7ff fb16 	bl	8004824 <__malloc_lock>
 80051f8:	9a01      	ldr	r2, [sp, #4]
 80051fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80051fe:	f102 080b 	add.w	r8, r2, #11
 8005202:	f1b8 0f16 	cmp.w	r8, #22
 8005206:	f1a4 0908 	sub.w	r9, r4, #8
 800520a:	f025 0603 	bic.w	r6, r5, #3
 800520e:	d90a      	bls.n	8005226 <_realloc_r+0x4a>
 8005210:	f038 0807 	bics.w	r8, r8, #7
 8005214:	d509      	bpl.n	800522a <_realloc_r+0x4e>
 8005216:	230c      	movs	r3, #12
 8005218:	f8ca 3000 	str.w	r3, [sl]
 800521c:	2700      	movs	r7, #0
 800521e:	4638      	mov	r0, r7
 8005220:	b003      	add	sp, #12
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	f04f 0810 	mov.w	r8, #16
 800522a:	4590      	cmp	r8, r2
 800522c:	d3f3      	bcc.n	8005216 <_realloc_r+0x3a>
 800522e:	45b0      	cmp	r8, r6
 8005230:	f340 8145 	ble.w	80054be <_realloc_r+0x2e2>
 8005234:	4ba8      	ldr	r3, [pc, #672]	; (80054d8 <_realloc_r+0x2fc>)
 8005236:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800523a:	eb09 0106 	add.w	r1, r9, r6
 800523e:	4571      	cmp	r1, lr
 8005240:	469b      	mov	fp, r3
 8005242:	684b      	ldr	r3, [r1, #4]
 8005244:	d005      	beq.n	8005252 <_realloc_r+0x76>
 8005246:	f023 0001 	bic.w	r0, r3, #1
 800524a:	4408      	add	r0, r1
 800524c:	6840      	ldr	r0, [r0, #4]
 800524e:	07c7      	lsls	r7, r0, #31
 8005250:	d447      	bmi.n	80052e2 <_realloc_r+0x106>
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	4571      	cmp	r1, lr
 8005258:	eb06 0703 	add.w	r7, r6, r3
 800525c:	d119      	bne.n	8005292 <_realloc_r+0xb6>
 800525e:	f108 0010 	add.w	r0, r8, #16
 8005262:	4287      	cmp	r7, r0
 8005264:	db3f      	blt.n	80052e6 <_realloc_r+0x10a>
 8005266:	eb09 0308 	add.w	r3, r9, r8
 800526a:	eba7 0708 	sub.w	r7, r7, r8
 800526e:	f047 0701 	orr.w	r7, r7, #1
 8005272:	f8cb 3008 	str.w	r3, [fp, #8]
 8005276:	605f      	str	r7, [r3, #4]
 8005278:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	ea43 0308 	orr.w	r3, r3, r8
 8005284:	f844 3c04 	str.w	r3, [r4, #-4]
 8005288:	4650      	mov	r0, sl
 800528a:	f7ff fad1 	bl	8004830 <__malloc_unlock>
 800528e:	4627      	mov	r7, r4
 8005290:	e7c5      	b.n	800521e <_realloc_r+0x42>
 8005292:	45b8      	cmp	r8, r7
 8005294:	dc27      	bgt.n	80052e6 <_realloc_r+0x10a>
 8005296:	68cb      	ldr	r3, [r1, #12]
 8005298:	688a      	ldr	r2, [r1, #8]
 800529a:	60d3      	str	r3, [r2, #12]
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	eba7 0008 	sub.w	r0, r7, r8
 80052a2:	280f      	cmp	r0, #15
 80052a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80052a8:	eb09 0207 	add.w	r2, r9, r7
 80052ac:	f240 8109 	bls.w	80054c2 <_realloc_r+0x2e6>
 80052b0:	eb09 0108 	add.w	r1, r9, r8
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	ea43 0308 	orr.w	r3, r3, r8
 80052bc:	f040 0001 	orr.w	r0, r0, #1
 80052c0:	f8c9 3004 	str.w	r3, [r9, #4]
 80052c4:	6048      	str	r0, [r1, #4]
 80052c6:	6853      	ldr	r3, [r2, #4]
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6053      	str	r3, [r2, #4]
 80052ce:	3108      	adds	r1, #8
 80052d0:	4650      	mov	r0, sl
 80052d2:	f7ff fe91 	bl	8004ff8 <_free_r>
 80052d6:	4650      	mov	r0, sl
 80052d8:	f7ff faaa 	bl	8004830 <__malloc_unlock>
 80052dc:	f109 0708 	add.w	r7, r9, #8
 80052e0:	e79d      	b.n	800521e <_realloc_r+0x42>
 80052e2:	2300      	movs	r3, #0
 80052e4:	4619      	mov	r1, r3
 80052e6:	07e8      	lsls	r0, r5, #31
 80052e8:	f100 8084 	bmi.w	80053f4 <_realloc_r+0x218>
 80052ec:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80052f0:	eba9 0505 	sub.w	r5, r9, r5
 80052f4:	6868      	ldr	r0, [r5, #4]
 80052f6:	f020 0003 	bic.w	r0, r0, #3
 80052fa:	4430      	add	r0, r6
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d076      	beq.n	80053ee <_realloc_r+0x212>
 8005300:	4571      	cmp	r1, lr
 8005302:	d150      	bne.n	80053a6 <_realloc_r+0x1ca>
 8005304:	4403      	add	r3, r0
 8005306:	f108 0110 	add.w	r1, r8, #16
 800530a:	428b      	cmp	r3, r1
 800530c:	db6f      	blt.n	80053ee <_realloc_r+0x212>
 800530e:	462f      	mov	r7, r5
 8005310:	68ea      	ldr	r2, [r5, #12]
 8005312:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005316:	60ca      	str	r2, [r1, #12]
 8005318:	6091      	str	r1, [r2, #8]
 800531a:	1f32      	subs	r2, r6, #4
 800531c:	2a24      	cmp	r2, #36	; 0x24
 800531e:	d83b      	bhi.n	8005398 <_realloc_r+0x1bc>
 8005320:	2a13      	cmp	r2, #19
 8005322:	d936      	bls.n	8005392 <_realloc_r+0x1b6>
 8005324:	6821      	ldr	r1, [r4, #0]
 8005326:	60a9      	str	r1, [r5, #8]
 8005328:	6861      	ldr	r1, [r4, #4]
 800532a:	60e9      	str	r1, [r5, #12]
 800532c:	2a1b      	cmp	r2, #27
 800532e:	d81c      	bhi.n	800536a <_realloc_r+0x18e>
 8005330:	f105 0210 	add.w	r2, r5, #16
 8005334:	f104 0108 	add.w	r1, r4, #8
 8005338:	6808      	ldr	r0, [r1, #0]
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	6848      	ldr	r0, [r1, #4]
 800533e:	6050      	str	r0, [r2, #4]
 8005340:	6889      	ldr	r1, [r1, #8]
 8005342:	6091      	str	r1, [r2, #8]
 8005344:	eb05 0208 	add.w	r2, r5, r8
 8005348:	eba3 0308 	sub.w	r3, r3, r8
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	f8cb 2008 	str.w	r2, [fp, #8]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	686b      	ldr	r3, [r5, #4]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	ea43 0308 	orr.w	r3, r3, r8
 8005360:	606b      	str	r3, [r5, #4]
 8005362:	4650      	mov	r0, sl
 8005364:	f7ff fa64 	bl	8004830 <__malloc_unlock>
 8005368:	e759      	b.n	800521e <_realloc_r+0x42>
 800536a:	68a1      	ldr	r1, [r4, #8]
 800536c:	6129      	str	r1, [r5, #16]
 800536e:	68e1      	ldr	r1, [r4, #12]
 8005370:	6169      	str	r1, [r5, #20]
 8005372:	2a24      	cmp	r2, #36	; 0x24
 8005374:	bf01      	itttt	eq
 8005376:	6922      	ldreq	r2, [r4, #16]
 8005378:	61aa      	streq	r2, [r5, #24]
 800537a:	6960      	ldreq	r0, [r4, #20]
 800537c:	61e8      	streq	r0, [r5, #28]
 800537e:	bf19      	ittee	ne
 8005380:	f105 0218 	addne.w	r2, r5, #24
 8005384:	f104 0110 	addne.w	r1, r4, #16
 8005388:	f105 0220 	addeq.w	r2, r5, #32
 800538c:	f104 0118 	addeq.w	r1, r4, #24
 8005390:	e7d2      	b.n	8005338 <_realloc_r+0x15c>
 8005392:	463a      	mov	r2, r7
 8005394:	4621      	mov	r1, r4
 8005396:	e7cf      	b.n	8005338 <_realloc_r+0x15c>
 8005398:	4621      	mov	r1, r4
 800539a:	4638      	mov	r0, r7
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	f7ff fefb 	bl	8005198 <memmove>
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	e7ce      	b.n	8005344 <_realloc_r+0x168>
 80053a6:	18c7      	adds	r7, r0, r3
 80053a8:	45b8      	cmp	r8, r7
 80053aa:	dc20      	bgt.n	80053ee <_realloc_r+0x212>
 80053ac:	68cb      	ldr	r3, [r1, #12]
 80053ae:	688a      	ldr	r2, [r1, #8]
 80053b0:	60d3      	str	r3, [r2, #12]
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	4628      	mov	r0, r5
 80053b6:	68eb      	ldr	r3, [r5, #12]
 80053b8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80053bc:	60d3      	str	r3, [r2, #12]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	1f32      	subs	r2, r6, #4
 80053c2:	2a24      	cmp	r2, #36	; 0x24
 80053c4:	d842      	bhi.n	800544c <_realloc_r+0x270>
 80053c6:	2a13      	cmp	r2, #19
 80053c8:	d93e      	bls.n	8005448 <_realloc_r+0x26c>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	60ab      	str	r3, [r5, #8]
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	60eb      	str	r3, [r5, #12]
 80053d2:	2a1b      	cmp	r2, #27
 80053d4:	d824      	bhi.n	8005420 <_realloc_r+0x244>
 80053d6:	f105 0010 	add.w	r0, r5, #16
 80053da:	f104 0308 	add.w	r3, r4, #8
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	6002      	str	r2, [r0, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	6042      	str	r2, [r0, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	6083      	str	r3, [r0, #8]
 80053ea:	46a9      	mov	r9, r5
 80053ec:	e757      	b.n	800529e <_realloc_r+0xc2>
 80053ee:	4580      	cmp	r8, r0
 80053f0:	4607      	mov	r7, r0
 80053f2:	dddf      	ble.n	80053b4 <_realloc_r+0x1d8>
 80053f4:	4611      	mov	r1, r2
 80053f6:	4650      	mov	r0, sl
 80053f8:	f7fe fffa 	bl	80043f0 <_malloc_r>
 80053fc:	4607      	mov	r7, r0
 80053fe:	2800      	cmp	r0, #0
 8005400:	d0af      	beq.n	8005362 <_realloc_r+0x186>
 8005402:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	f1a0 0208 	sub.w	r2, r0, #8
 800540e:	444b      	add	r3, r9
 8005410:	429a      	cmp	r2, r3
 8005412:	d11f      	bne.n	8005454 <_realloc_r+0x278>
 8005414:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005418:	f027 0703 	bic.w	r7, r7, #3
 800541c:	4437      	add	r7, r6
 800541e:	e73e      	b.n	800529e <_realloc_r+0xc2>
 8005420:	68a3      	ldr	r3, [r4, #8]
 8005422:	612b      	str	r3, [r5, #16]
 8005424:	68e3      	ldr	r3, [r4, #12]
 8005426:	616b      	str	r3, [r5, #20]
 8005428:	2a24      	cmp	r2, #36	; 0x24
 800542a:	bf01      	itttt	eq
 800542c:	6923      	ldreq	r3, [r4, #16]
 800542e:	61ab      	streq	r3, [r5, #24]
 8005430:	6962      	ldreq	r2, [r4, #20]
 8005432:	61ea      	streq	r2, [r5, #28]
 8005434:	bf19      	ittee	ne
 8005436:	f105 0018 	addne.w	r0, r5, #24
 800543a:	f104 0310 	addne.w	r3, r4, #16
 800543e:	f105 0020 	addeq.w	r0, r5, #32
 8005442:	f104 0318 	addeq.w	r3, r4, #24
 8005446:	e7ca      	b.n	80053de <_realloc_r+0x202>
 8005448:	4623      	mov	r3, r4
 800544a:	e7c8      	b.n	80053de <_realloc_r+0x202>
 800544c:	4621      	mov	r1, r4
 800544e:	f7ff fea3 	bl	8005198 <memmove>
 8005452:	e7ca      	b.n	80053ea <_realloc_r+0x20e>
 8005454:	1f32      	subs	r2, r6, #4
 8005456:	2a24      	cmp	r2, #36	; 0x24
 8005458:	d82d      	bhi.n	80054b6 <_realloc_r+0x2da>
 800545a:	2a13      	cmp	r2, #19
 800545c:	d928      	bls.n	80054b0 <_realloc_r+0x2d4>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	6043      	str	r3, [r0, #4]
 8005466:	2a1b      	cmp	r2, #27
 8005468:	d80e      	bhi.n	8005488 <_realloc_r+0x2ac>
 800546a:	f100 0308 	add.w	r3, r0, #8
 800546e:	f104 0208 	add.w	r2, r4, #8
 8005472:	6811      	ldr	r1, [r2, #0]
 8005474:	6019      	str	r1, [r3, #0]
 8005476:	6851      	ldr	r1, [r2, #4]
 8005478:	6059      	str	r1, [r3, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	4621      	mov	r1, r4
 8005480:	4650      	mov	r0, sl
 8005482:	f7ff fdb9 	bl	8004ff8 <_free_r>
 8005486:	e76c      	b.n	8005362 <_realloc_r+0x186>
 8005488:	68a3      	ldr	r3, [r4, #8]
 800548a:	6083      	str	r3, [r0, #8]
 800548c:	68e3      	ldr	r3, [r4, #12]
 800548e:	60c3      	str	r3, [r0, #12]
 8005490:	2a24      	cmp	r2, #36	; 0x24
 8005492:	bf01      	itttt	eq
 8005494:	6923      	ldreq	r3, [r4, #16]
 8005496:	6103      	streq	r3, [r0, #16]
 8005498:	6961      	ldreq	r1, [r4, #20]
 800549a:	6141      	streq	r1, [r0, #20]
 800549c:	bf19      	ittee	ne
 800549e:	f100 0310 	addne.w	r3, r0, #16
 80054a2:	f104 0210 	addne.w	r2, r4, #16
 80054a6:	f100 0318 	addeq.w	r3, r0, #24
 80054aa:	f104 0218 	addeq.w	r2, r4, #24
 80054ae:	e7e0      	b.n	8005472 <_realloc_r+0x296>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4622      	mov	r2, r4
 80054b4:	e7dd      	b.n	8005472 <_realloc_r+0x296>
 80054b6:	4621      	mov	r1, r4
 80054b8:	f7ff fe6e 	bl	8005198 <memmove>
 80054bc:	e7df      	b.n	800547e <_realloc_r+0x2a2>
 80054be:	4637      	mov	r7, r6
 80054c0:	e6ed      	b.n	800529e <_realloc_r+0xc2>
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	431f      	orrs	r7, r3
 80054c8:	f8c9 7004 	str.w	r7, [r9, #4]
 80054cc:	6853      	ldr	r3, [r2, #4]
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	e6ff      	b.n	80052d6 <_realloc_r+0xfa>
 80054d6:	bf00      	nop
 80054d8:	20000190 	.word	0x20000190

080054dc <__ascii_wctomb>:
 80054dc:	b149      	cbz	r1, 80054f2 <__ascii_wctomb+0x16>
 80054de:	2aff      	cmp	r2, #255	; 0xff
 80054e0:	bf85      	ittet	hi
 80054e2:	238a      	movhi	r3, #138	; 0x8a
 80054e4:	6003      	strhi	r3, [r0, #0]
 80054e6:	700a      	strbls	r2, [r1, #0]
 80054e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80054ec:	bf98      	it	ls
 80054ee:	2001      	movls	r0, #1
 80054f0:	4770      	bx	lr
 80054f2:	4608      	mov	r0, r1
 80054f4:	4770      	bx	lr
	...

080054f8 <_sbrk>:
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <_sbrk+0x14>)
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	4602      	mov	r2, r0
 80054fe:	b909      	cbnz	r1, 8005504 <_sbrk+0xc>
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <_sbrk+0x18>)
 8005502:	6019      	str	r1, [r3, #0]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	4402      	add	r2, r0
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	4770      	bx	lr
 800550c:	2000076c 	.word	0x2000076c
 8005510:	200007a0 	.word	0x200007a0

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
